<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tn__common_8h">
<title>core/tn_common.h File Reference</title>
<indexterm><primary>core/tn_common.h</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>Definitions used through the whole kernel. </para>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_tn__common_8h_1adbf9c425147511997eb1396c4afeac40"/>#define <link linkend="_tn__common_8h_1adbf9c425147511997eb1396c4afeac40">TN_NULL</link>   ((void *)0)</para>

<para>NULL pointer definition. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__common_8h_1a9f76389d1506addfc7542f54e484a92c"/>#define <link linkend="_tn__common_8h_1a9f76389d1506addfc7542f54e484a92c">TN_BOOL</link>   int</para>

<para>boolean type definition </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__common_8h_1a87ed178a95496e2f19aa670adc4886b3"/>#define <link linkend="_tn__common_8h_1a87ed178a95496e2f19aa670adc4886b3">TN_TRUE</link>   (1 == 1)</para>

<para><computeroutput>true</computeroutput> value definition for type <computeroutput>#TN_BOOL</computeroutput> </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__common_8h_1aa32a38a7d2e3b7983e53a61ab05417ee"/>#define <link linkend="_tn__common_8h_1aa32a38a7d2e3b7983e53a61ab05417ee">TN_FALSE</link>   (1 == 0)</para>

<para><computeroutput>false</computeroutput> value definition for type <computeroutput>#TN_BOOL</computeroutput> </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__common_8h_1a3f48380e8a624edc643319a81192d88e">TN_MAKE_ALIG_SIZE</link>(a)   (((a) + (sizeof(<link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link>) - 1)) &amp; (~(sizeof(<link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link>) - 1)))</para>

<para>Macro for making a number a multiple of <computeroutput>sizeof(#TN_UWord)</computeroutput>, should be used with fixed memory block pool. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__common_8h_1acfab13cc4c9dbe07c9fd35202a736573">_TN_UNUSED</link>(x)   (void)(x)</para>

<para>The same as <computeroutput>#TN_MAKE_ALIG_SIZE</computeroutput> but its behavior depends on the option <computeroutput>#TN_API_MAKE_ALIG_ARG</computeroutput> </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__common_8h_1a14e167647501991fc87127399dce13e2"/>#define <emphasis role="strong">_TN_FATAL_ERROR</emphasis>(error_msg)   <link linkend="_tn__arch__example_8h_1ac355ce66c30fd8e505a71e6170913121">_TN_FATAL_ERRORF</link>(error_msg, NULL)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_tn__common_8h_1a603cbe1ffdafc7e6813ef692bbd7d22f"/>typedef void() <link linkend="_tn__common_8h_1a603cbe1ffdafc7e6813ef692bbd7d22f">TN_TaskBody</link>(void *param)</para>

<para>Prototype for task body function. </para>
</listitem>
            <listitem><para>typedef unsigned long <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link></para>

<para>Type for system tick count, it is used by the kernel to represent absolute tick count value as well as relative timeouts. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976">TN_ObjId</link> { 
<link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976a48870592b9dc4186b8ea58b610029ccb">TN_ID_NONE</link> = (int)0x0, 
<link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976aae057379663876e55fed5e40fe5d4091">TN_ID_TASK</link> = (int)0x47ABCF69, 
<link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976af358c7d5cb01d76f5a5d2d1e546c98a4">TN_ID_SEMAPHORE</link> = (int)0x6FA173EB, 
<link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976a9e091dc80dfaa58fd26a6b144019195e">TN_ID_EVENTGRP</link> = (int)0x5E224F25, 

<link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976aaedaabfef8c2a7312d6b8ac2bbeb07a4">TN_ID_DATAQUEUE</link> = (int)0x0C8A6C89, 
<link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976a4a74d3b34e5ced2c4080e8da18115892">TN_ID_FSMEMORYPOOL</link> = (int)0x26B7CE8B, 
<link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976abf9427ac5b7701a4bd1b6cff3004e5a5">TN_ID_MUTEX</link> = (int)0x17129E45, 
<link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976a9695f4d7fb1f9f00a105db61fc43f153">TN_ID_TIMER</link> = (int)0x1A937FBC, 

<link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976a9f100287c81d46ab4a855587a120aa3c">TN_ID_EXCHANGE</link> = (int)0x32b7c072, 
<link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976a813677d511e672fec54cf2fea3433d5f">TN_ID_EXCHANGE_LINK</link> = (int)0x24d36f35
 }</para>

<para>Magic number for object validity verification. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> { 
<link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876afb291924237186f5765865256c75e639">TN_RC_OK</link> = 0, 
<link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a5b4d73fde6b5d1c9579c02e6aafce1fb">TN_RC_TIMEOUT</link> = -1, 
<link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a77ac7e9b81ba707565e7fe5d4c793dec">TN_RC_OVERFLOW</link> = -2, 
<link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a886368391507ae426bfdedc38284db9d">TN_RC_WCONTEXT</link> = -3, 

<link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a7b6d93374f52ba4b2fc01b38b783aa4c">TN_RC_WSTATE</link> = -4, 
<link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a89909a6426b477a38496a1be67590e68">TN_RC_WPARAM</link> = -5, 
<link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a2c83a60bf543df45b5045d6f7fbc7d0c">TN_RC_ILLEGAL_USE</link> = -6, 
<link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a2a2df8fecee990d279889924926bf101">TN_RC_INVALID_OBJ</link> = -7, 

<link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a3252967d2fdefcfbd4eb720ed4663d84">TN_RC_DELETED</link> = -8, 
<link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876ae5cbacb0fb01805c9003046c08bf4356">TN_RC_FORCED</link> = -9, 
<link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876adb7619ced1907316915b288dd4ae3c1a">TN_RC_INTERNAL</link> = -10
 }</para>

<para>Result code returned by kernel services. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_tn__common_8h_1a3f48380e8a624edc643319a81192d88e"/>    <section>
    <title>TN_MAKE_ALIG_SIZE</title>
<indexterm><primary>TN_MAKE_ALIG_SIZE</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_MAKE_ALIG_SIZE</secondary></indexterm>
<para><computeroutput>#define TN_MAKE_ALIG_SIZE( a)   (((a) + (sizeof(<link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link>) - 1)) &amp; (~(sizeof(<link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link>) - 1)))</computeroutput></para><para>

<para>Macro for making a number a multiple of <computeroutput>sizeof(#TN_UWord)</computeroutput>, should be used with fixed memory block pool. </para>
</para>

<para>See <computeroutput><link linkend="_tn__fmem_8h_1a56d47d4a1b6453d959336448a0ce96ac">tn_fmem_create()</link></computeroutput> for usage example. </para>
<para>
Definition at line 231 of file tn_common.h.</para>
    </section><anchor xml:id="_tn__common_8h_1acfab13cc4c9dbe07c9fd35202a736573"/>    <section>
    <title>_TN_UNUSED</title>
<indexterm><primary>_TN_UNUSED</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>_TN_UNUSED</secondary></indexterm>
<para><computeroutput>#define _TN_UNUSED( x)   (void)(x)</computeroutput></para><para>

<para>The same as <computeroutput>#TN_MAKE_ALIG_SIZE</computeroutput> but its behavior depends on the option <computeroutput>#TN_API_MAKE_ALIG_ARG</computeroutput> </para>
</para>

<para><caution><title>Attention</title>

<para>it is recommended to use <computeroutput>#TN_MAKE_ALIG_SIZE</computeroutput> macro instead of this one, in order to avoid confusion caused by various TNKernel ports: refer to the section <link linkend="_tnkernel_diff_1tnkernel_diff_make_alig">Macro MAKE_ALIG()</link> for details. Suppresses &quot;unused&quot; compiler warning for some particular symbol </para>
</caution>
</para>
<para>
Definition at line 263 of file tn_common.h.</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa"/>    <section>
    <title>TN_TickCnt</title>
<indexterm><primary>TN_TickCnt</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_TickCnt</secondary></indexterm>
<para><computeroutput>typedef unsigned long <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link></computeroutput></para><para>

<para>Type for system tick count, it is used by the kernel to represent absolute tick count value as well as relative timeouts. </para>
</para>

<para>When it is used as a timeout value, it represents the maximum number of system ticks to wait.</para>

<para>Assume user called some system function, and it can&apos;t perform its job immediately (say, it needs to lock mutex but it is already locked, etc).</para>

<para>So, function can wait or return an error. There are possible <computeroutput>timeout</computeroutput> values and appropriate behavior of the function:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>timeout</computeroutput> is set to <computeroutput>0</computeroutput>: function doesn&apos;t wait at all, no context switch is performed, <computeroutput>#TN_RC_TIMEOUT</computeroutput> is returned immediately.</para>
</listitem><listitem>
<para><computeroutput>timeout</computeroutput> is set to <computeroutput>#TN_WAIT_INFINITE</computeroutput>: function waits until it eventually <emphasis role="bold">can</emphasis> perform its job. Timeout is not taken in account, so <computeroutput>#TN_RC_TIMEOUT</computeroutput> is never returned.</para>
</listitem><listitem>
<para><computeroutput>timeout</computeroutput> is set to other value: function waits at most specified number of system ticks. Strictly speaking, it waits from <computeroutput>(timeout - 1)</computeroutput> to <computeroutput>timeout</computeroutput> ticks. So, if you specify that timeout is 1, be aware that it might actually don&apos;t wait at all: if <emphasis><link linkend="_time_ticks">system timer</link></emphasis> interrupt happens just while function is putting task to wait (with interrupts disabled), then ISR will be executed right after function puts task to wait. Then <computeroutput><link linkend="_tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing()</link></computeroutput> will immediately remove the task from wait queue and make it runnable again.</para>

<para>So, to guarantee that task waits <emphasis>at least</emphasis> 1 system tick, you should specify timeout value of <computeroutput>2</computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para><emphasis role="bold">Note</emphasis> also that there are other possible ways to make task runnable:</para>

<para><itemizedlist>
<listitem>
<para>if task waits because of call to <computeroutput><link linkend="_tn__tasks_8h_1ae768a72ca0efde5767796cc1770bd45e">tn_task_sleep()</link></computeroutput>, it may be woken up by some other task, by means of <computeroutput><link linkend="_tn__tasks_8h_1abb88bc8b1cec6b82e7b6e2e90d0e155a">tn_task_wakeup()</link></computeroutput>. In this case, <computeroutput><link linkend="_tn__tasks_8h_1ae768a72ca0efde5767796cc1770bd45e">tn_task_sleep()</link></computeroutput> returns <computeroutput>#TN_RC_OK</computeroutput>. 
<literallayout>&#160;&#xa;</literallayout>
</para>
</listitem><listitem>
<para>independently of the wait reason, task may be released from wait forcibly, by means of <computeroutput><link linkend="_tn__tasks_8h_1ae90ecdbd7d87d050c2c98ec775e6efc7">tn_task_release_wait()</link></computeroutput>. It this case, <computeroutput>#TN_RC_FORCED</computeroutput> is returned by the waiting function. (the usage of the <computeroutput><link linkend="_tn__tasks_8h_1ae90ecdbd7d87d050c2c98ec775e6efc7">tn_task_release_wait()</link></computeroutput> function is discouraged though) </para>
</listitem></itemizedlist>
</para>
<para>
Definition at line 188 of file tn_common.h.</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976"/>    <section>
    <title>TN_ObjId</title>
<indexterm><primary>TN_ObjId</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_ObjId</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976">TN_ObjId</link></computeroutput></para><para>

<para>Magic number for object validity verification. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>TN_ID_NONE</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_ID_NONE</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976a48870592b9dc4186b8ea58b610029ccb"/>TN_ID_NONE</entry><entry>
<para>id for invalid object </para>
</entry></row><row><entry><indexterm><primary>TN_ID_TASK</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_ID_TASK</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976aae057379663876e55fed5e40fe5d4091"/>TN_ID_TASK</entry><entry>
<para>id for tasks </para>
</entry></row><row><entry><indexterm><primary>TN_ID_SEMAPHORE</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_ID_SEMAPHORE</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976af358c7d5cb01d76f5a5d2d1e546c98a4"/>TN_ID_SEMAPHORE</entry><entry>
<para>id for semaphores </para>
</entry></row><row><entry><indexterm><primary>TN_ID_EVENTGRP</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_ID_EVENTGRP</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976a9e091dc80dfaa58fd26a6b144019195e"/>TN_ID_EVENTGRP</entry><entry>
<para>id for event groups </para>
</entry></row><row><entry><indexterm><primary>TN_ID_DATAQUEUE</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_ID_DATAQUEUE</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976aaedaabfef8c2a7312d6b8ac2bbeb07a4"/>TN_ID_DATAQUEUE</entry><entry>
<para>id for data queues </para>
</entry></row><row><entry><indexterm><primary>TN_ID_FSMEMORYPOOL</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_ID_FSMEMORYPOOL</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976a4a74d3b34e5ced2c4080e8da18115892"/>TN_ID_FSMEMORYPOOL</entry><entry>
<para>id for fixed memory pools </para>
</entry></row><row><entry><indexterm><primary>TN_ID_MUTEX</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_ID_MUTEX</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976abf9427ac5b7701a4bd1b6cff3004e5a5"/>TN_ID_MUTEX</entry><entry>
<para>id for mutexes </para>
</entry></row><row><entry><indexterm><primary>TN_ID_TIMER</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_ID_TIMER</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976a9695f4d7fb1f9f00a105db61fc43f153"/>TN_ID_TIMER</entry><entry>
<para>id for timers </para>
</entry></row><row><entry><indexterm><primary>TN_ID_EXCHANGE</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_ID_EXCHANGE</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976a9f100287c81d46ab4a855587a120aa3c"/>TN_ID_EXCHANGE</entry><entry>
<para>id for exchange objects </para>
</entry></row><row><entry><indexterm><primary>TN_ID_EXCHANGE_LINK</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_ID_EXCHANGE_LINK</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976a813677d511e672fec54cf2fea3433d5f"/>TN_ID_EXCHANGE_LINK</entry><entry>
<para>id for exchange link </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 65 of file tn_common.h.</para>
    </section><anchor xml:id="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876"/>    <section>
    <title>TN_RCode</title>
<indexterm><primary>TN_RCode</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_RCode</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link></computeroutput></para><para>

<para>Result code returned by kernel services. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>TN_RC_OK</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_RC_OK</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876afb291924237186f5765865256c75e639"/>TN_RC_OK</entry><entry>
<para>Successful operation. </para>
</entry></row><row><entry><indexterm><primary>TN_RC_TIMEOUT</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_RC_TIMEOUT</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a5b4d73fde6b5d1c9579c02e6aafce1fb"/>TN_RC_TIMEOUT</entry><entry>
<para>Timeout (consult <computeroutput>#TN_TickCnt</computeroutput> for details). </para>

<para><formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link></computeroutput> </para>
</formalpara>
</para>
</entry></row><row><entry><indexterm><primary>TN_RC_OVERFLOW</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_RC_OVERFLOW</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a77ac7e9b81ba707565e7fe5d4c793dec"/>TN_RC_OVERFLOW</entry><entry>
<para>This code is returned in the following cases: </para>

<para><itemizedlist>
<listitem>
<para>Trying to increment semaphore count more than its max count;</para>
</listitem><listitem>
<para>Trying to return extra memory block to fixed memory pool. <formalpara><title>See also</title>

<para><link linkend="_tn__sem_8h">tn_sem.h</link> </para>

<para><link linkend="_tn__fmem_8h">tn_fmem.h</link> </para>
</formalpara>
</para>
</listitem></itemizedlist>
</para>
</entry></row><row><entry><indexterm><primary>TN_RC_WCONTEXT</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_RC_WCONTEXT</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a886368391507ae426bfdedc38284db9d"/>TN_RC_WCONTEXT</entry><entry>
<para>Wrong context error: returned if function is called from non-acceptable context. </para>

<para>Required context suggested for every function by badges:</para>

<para><itemizedlist>
<listitem>
<para>  - function can be called from task;</para>
</listitem><listitem>
<para>  - function can be called from ISR.</para>
</listitem></itemizedlist>
</para>

<para><formalpara><title>See also</title>

<para><computeroutput><link linkend="_tn__sys_8h_1ac3233931746c9d8b84ebd34a2a3a468a">tn_sys_context_get()</link></computeroutput> </para>

<para><computeroutput>enum #<link linkend="_tn__sys_8h_1a54b0c697dfdb3b59e7bcc6eb7badda51">TN_Context</link></computeroutput> </para>
</formalpara>
</para>
</entry></row><row><entry><indexterm><primary>TN_RC_WSTATE</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_RC_WSTATE</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a7b6d93374f52ba4b2fc01b38b783aa4c"/>TN_RC_WSTATE</entry><entry>
<para>Wrong task state error: requested operation requires different task state. </para>
</entry></row><row><entry><indexterm><primary>TN_RC_WPARAM</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_RC_WPARAM</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a89909a6426b477a38496a1be67590e68"/>TN_RC_WPARAM</entry><entry>
<para>This code is returned by most of the kernel functions when wrong params were given to function. </para>

<para>This error code can be returned if only build-time option <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero <formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__cfg__default_8h_1a1f197294df3276fec431930545acafd5">TN_CHECK_PARAM</link></computeroutput> </para>
</formalpara>
</para>
</entry></row><row><entry><indexterm><primary>TN_RC_ILLEGAL_USE</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_RC_ILLEGAL_USE</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a2c83a60bf543df45b5045d6f7fbc7d0c"/>TN_RC_ILLEGAL_USE</entry><entry>
<para>Illegal usage. </para>

<para>Returned in the following cases:<itemizedlist>
<listitem>
<para>task tries to unlock or delete the mutex that is locked by different task,</para>
</listitem><listitem>
<para>task tries to lock mutex with priority ceiling whose priority is lower than task&apos;s priority <formalpara><title>See also</title>

<para><link linkend="_tn__mutex_8h">tn_mutex.h</link> </para>
</formalpara>
</para>
</listitem></itemizedlist>
</para>
</entry></row><row><entry><indexterm><primary>TN_RC_INVALID_OBJ</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_RC_INVALID_OBJ</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a2a2df8fecee990d279889924926bf101"/>TN_RC_INVALID_OBJ</entry><entry>
<para>Returned when user tries to perform some operation on invalid object (mutex, semaphore, etc). </para>

<para>Object validity is checked by comparing special <computeroutput>id_...</computeroutput> field value with the value from <computeroutput>enum #TN_ObjId</computeroutput> <formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__cfg__default_8h_1a1f197294df3276fec431930545acafd5">TN_CHECK_PARAM</link></computeroutput> </para>
</formalpara>
</para>
</entry></row><row><entry><indexterm><primary>TN_RC_DELETED</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_RC_DELETED</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a3252967d2fdefcfbd4eb720ed4663d84"/>TN_RC_DELETED</entry><entry>
<para>Object for whose event task was waiting is deleted. </para>
</entry></row><row><entry><indexterm><primary>TN_RC_FORCED</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_RC_FORCED</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876ae5cbacb0fb01805c9003046c08bf4356"/>TN_RC_FORCED</entry><entry>
<para>Task was released from waiting forcibly because some other task called <computeroutput><link linkend="_tn__tasks_8h_1ae90ecdbd7d87d050c2c98ec775e6efc7">tn_task_release_wait()</link></computeroutput> </para>
</entry></row><row><entry><indexterm><primary>TN_RC_INTERNAL</primary><secondary>tn_common.h</secondary></indexterm>
<indexterm><primary>tn_common.h</primary><secondary>TN_RC_INTERNAL</secondary></indexterm>
<anchor xml:id="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876adb7619ced1907316915b288dd4ae3c1a"/>TN_RC_INTERNAL</entry><entry>
<para>Internal kernel error, should never be returned by kernel services. </para>

<para>If it is returned, it&apos;s a bug in the kernel. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 81 of file tn_common.h.</para>
</section>
</section>
</section>
