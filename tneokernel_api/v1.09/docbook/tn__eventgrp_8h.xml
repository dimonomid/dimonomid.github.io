<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tn__eventgrp_8h">
<title>core/tn_eventgrp.h File Reference</title>
<indexterm><primary>core/tn_eventgrp.h</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>Event group.</para>

<para>An event group has an internal variable (of type <computeroutput>#TN_UWord</computeroutput>), which is interpreted as a bit pattern where each bit represents an event. An event group also has a wait queue for the tasks waiting on these events. A task may set specified bits when an event occurs and may clear specified bits when necessary.</para>

<para>The tasks waiting for an event(s) are placed in the event group&apos;s wait queue. An event group is a very suitable synchronization object for cases where (for some reasons) one task has to wait for many tasks, or vice versa, many tasks have to wait for one task.</para>
<section xml:id="_tn__eventgrp_8h_1eventgrp_connect">
<title>Connecting an event group to other system objects</title>

<para>Sometimes task needs to wait for different system events, the most common examples are:</para>

<para><itemizedlist>
<listitem>
<para>wait for a message from the queue(s) plus wait for some application-dependent event (such as a flag to finish the task, or whatever);</para>
</listitem><listitem>
<para>wait for messages from multiple queues.</para>
</listitem></itemizedlist>
</para>

<para>If the kernel doesn&apos;t offer a mechanism for that, programmer usually have to use polling services on these queues and sleep for a few system ticks. Obviously, this approach has serious drawbacks: we have a lot of useless context switches, and response for the message gets much slower. Actually, we lost the main goal of the preemptive kernel when we use polling services like that.</para>

<para>TNeo offers a solution: an event group can be connected to other kernel objects, and these objects will maintain certain flags inside that event group automatically.</para>

<para>So, in case of multiple queues, we can act as follows (assume we have two queues: Q1 and Q2) :</para>

<para><itemizedlist>
<listitem>
<para>create event group EG;</para>
</listitem><listitem>
<para>connect EG with flag 1 to Q1;</para>
</listitem><listitem>
<para>connect EG with flag 2 to Q2;</para>
</listitem><listitem>
<para>when task needs to receive a message from either Q1 or Q2, it just waits for the any of flags 1 or 2 in the EG, this is done in the single call to <computeroutput><link linkend="_tn__eventgrp_8h_1a16906b6c4633087a3865c8e732dcb958">tn_eventgrp_wait()</link></computeroutput>.</para>
</listitem><listitem>
<para>when that event happened, task checks which flag is set, and receive message from the appropriate queue.</para>
</listitem></itemizedlist>
</para>

<para>Please note that task waiting for the event should <emphasis role="bold">not</emphasis> clear the flag manually: this flag is maintained completely by the queue. If the queue is non-empty, the flag is set. If the queue becomes empty, the flag is cleared.</para>

<para>For the information on system services related to queue, refer to the <link linkend="_tn__dqueue_8h">queue reference</link>.</para>

<para>There is an example project available that demonstrates event group connection technique: <computeroutput>examples/queue_eventgrp_conn</computeroutput>. Be sure to examine the readme there. </para>
</section>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structTN__EventGrp">TN_EventGrp</link></para>

<para>Event group. </para>
</listitem>
            <listitem><para>struct <link linkend="_structTN__EGrpTaskWait">TN_EGrpTaskWait</link></para>

<para>EventGrp-specific fields related to waiting task, to be included in struct <link linkend="_structTN__Task">TN_Task</link>. </para>
</listitem>
            <listitem><para>struct <link linkend="_structTN__EGrpLink">TN_EGrpLink</link></para>

<para>A link to event group: used when event group can be connected to some kernel object, such as queue. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbd">TN_EGrpWaitMode</link> { <link linkend="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbdae5b489c071cb5e8807877526221de4b0">TN_EVENTGRP_WMODE_OR</link> = (1 &lt;&lt; 0), 
<link linkend="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbda8eff85a7369195424724af772dfcc8fa">TN_EVENTGRP_WMODE_AND</link> = (1 &lt;&lt; 1), 
<link linkend="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbdaf45098235d31f72a2b09e30792686573">TN_EVENTGRP_WMODE_AUTOCLR</link> = (1 &lt;&lt; 2)
 }</para>

<para>Events waiting mode that should be given to <computeroutput>#<link linkend="_tn__eventgrp_8h_1a16906b6c4633087a3865c8e732dcb958">tn_eventgrp_wait()</link></computeroutput> and friends. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__eventgrp_8h_1ac9a2c46d690feaf04505ed7b7459d335">TN_EGrpOp</link> { <link linkend="_tn__eventgrp_8h_1ac9a2c46d690feaf04505ed7b7459d335a99218a684d58413298b6b05a8e939eab">TN_EVENTGRP_OP_SET</link>, 
<link linkend="_tn__eventgrp_8h_1ac9a2c46d690feaf04505ed7b7459d335a96662be438016ecf6690ee4ab3b60c93">TN_EVENTGRP_OP_CLEAR</link>, 
<link linkend="_tn__eventgrp_8h_1ac9a2c46d690feaf04505ed7b7459d335a25a252a0fb358e51dd86cccafda33aa0">TN_EVENTGRP_OP_TOGGLE</link>
 }</para>

<para>Modify operation: set, clear or toggle. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__eventgrp_8h_1aca5ed3b60cdaa2e2db8b88f4b5e33d3f">TN_EGrpAttr</link> { <link linkend="_tn__eventgrp_8h_1aca5ed3b60cdaa2e2db8b88f4b5e33d3fa43efdb2745838e224c83a99b1b193c5f">TN_EVENTGRP_ATTR_SINGLE</link> = (1 &lt;&lt; 0), 
<link linkend="_tn__eventgrp_8h_1aca5ed3b60cdaa2e2db8b88f4b5e33d3fa259a30414ed85922670df476cb675683">TN_EVENTGRP_ATTR_MULTI</link> = (1 &lt;&lt; 1), 
<link linkend="_tn__eventgrp_8h_1aca5ed3b60cdaa2e2db8b88f4b5e33d3fae1c96dbad9879c7cf30b3d718a11292a">TN_EVENTGRP_ATTR_CLR</link> = (1 &lt;&lt; 2), 
<link linkend="_tn__eventgrp_8h_1aca5ed3b60cdaa2e2db8b88f4b5e33d3fa1adfe6cfcb1dee045f59b2025537fd5a">TN_EVENTGRP_ATTR_NONE</link> = (0)
 }</para>

<para>Attributes that could be given to the event group object. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__eventgrp_8h_1a772da8298e7d62ae5109c5dbe792f8f0">tn_eventgrp_create_wattr</link> (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> *eventgrp, enum <link linkend="_tn__eventgrp_8h_1aca5ed3b60cdaa2e2db8b88f4b5e33d3f">TN_EGrpAttr</link> attr, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> initial_pattern)</para>

<para>The same as <computeroutput>#<link linkend="_tn__eventgrp_8h_1ad30ec1eb30010b6a50b1705f5a4838bd">tn_eventgrp_create()</link></computeroutput>, but takes additional argument: <computeroutput>attr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_tn__arch__example_8h_1a39b8c7b5ae653ec71be6f5a821eec3f6">_TN_STATIC_INLINE</link> enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__eventgrp_8h_1ad30ec1eb30010b6a50b1705f5a4838bd">tn_eventgrp_create</link> (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> *eventgrp, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> initial_pattern)</para>

<para>Construct event group. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__eventgrp_8h_1a422ce1b22908602cee6fa8301948ab35">tn_eventgrp_delete</link> (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> *eventgrp)</para>

<para>Destruct event group. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__eventgrp_8h_1a16906b6c4633087a3865c8e732dcb958">tn_eventgrp_wait</link> (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> *eventgrp, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> wait_pattern, enum <link linkend="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbd">TN_EGrpWaitMode</link> wait_mode, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> *p_flags_pattern, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</para>

<para>Wait for specified event(s) in the event group. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__eventgrp_8h_1a787501b26f934aeb7a3a506805e253de">tn_eventgrp_wait_polling</link> (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> *eventgrp, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> wait_pattern, enum <link linkend="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbd">TN_EGrpWaitMode</link> wait_mode, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> *p_flags_pattern)</para>

<para>The same as <computeroutput><link linkend="_tn__eventgrp_8h_1a16906b6c4633087a3865c8e732dcb958">tn_eventgrp_wait()</link></computeroutput> with zero timeout. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__eventgrp_8h_1a1203b6dd58325c8a60513180ad6b538d">tn_eventgrp_iwait_polling</link> (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> *eventgrp, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> wait_pattern, enum <link linkend="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbd">TN_EGrpWaitMode</link> wait_mode, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> *p_flags_pattern)</para>

<para>The same as <computeroutput><link linkend="_tn__eventgrp_8h_1a16906b6c4633087a3865c8e732dcb958">tn_eventgrp_wait()</link></computeroutput> with zero timeout, but for using in the ISR. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__eventgrp_8h_1a259b92fc12d98a203cb58c2be1b07cad">tn_eventgrp_modify</link> (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> *eventgrp, enum <link linkend="_tn__eventgrp_8h_1ac9a2c46d690feaf04505ed7b7459d335">TN_EGrpOp</link> operation, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> pattern)</para>

<para>Modify current events bit pattern in the event group. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__eventgrp_8h_1a1a421a5ee44c2d619567656f52ea870f">tn_eventgrp_imodify</link> (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> *eventgrp, enum <link linkend="_tn__eventgrp_8h_1ac9a2c46d690feaf04505ed7b7459d335">TN_EGrpOp</link> operation, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> pattern)</para>

<para>The same as <computeroutput><link linkend="_tn__eventgrp_8h_1a259b92fc12d98a203cb58c2be1b07cad">tn_eventgrp_modify()</link></computeroutput>, but for using in the ISR. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbd"/>    <section>
    <title>TN_EGrpWaitMode</title>
<indexterm><primary>TN_EGrpWaitMode</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>TN_EGrpWaitMode</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbd">TN_EGrpWaitMode</link></computeroutput></para><para>

<para>Events waiting mode that should be given to <computeroutput>#<link linkend="_tn__eventgrp_8h_1a16906b6c4633087a3865c8e732dcb958">tn_eventgrp_wait()</link></computeroutput> and friends. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>TN_EVENTGRP_WMODE_OR</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>TN_EVENTGRP_WMODE_OR</secondary></indexterm>
<anchor xml:id="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbdae5b489c071cb5e8807877526221de4b0"/>TN_EVENTGRP_WMODE_OR</entry><entry>
<para>Task waits for <emphasis role="bold">any</emphasis> of the event bits from the <computeroutput>wait_pattern</computeroutput> to be set in the event group. </para>

<para>This flag is mutually exclusive with <computeroutput>#TN_EVENTGRP_WMODE_AND</computeroutput>. </para>
</entry></row><row><entry><indexterm><primary>TN_EVENTGRP_WMODE_AND</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>TN_EVENTGRP_WMODE_AND</secondary></indexterm>
<anchor xml:id="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbda8eff85a7369195424724af772dfcc8fa"/>TN_EVENTGRP_WMODE_AND</entry><entry>
<para>Task waits for <emphasis role="bold">all</emphasis> of the event bits from the <computeroutput>wait_pattern</computeroutput> to be set in the event group. </para>

<para>This flag is mutually exclusive with <computeroutput>#TN_EVENTGRP_WMODE_OR</computeroutput>. </para>
</entry></row><row><entry><indexterm><primary>TN_EVENTGRP_WMODE_AUTOCLR</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>TN_EVENTGRP_WMODE_AUTOCLR</secondary></indexterm>
<anchor xml:id="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbdaf45098235d31f72a2b09e30792686573"/>TN_EVENTGRP_WMODE_AUTOCLR</entry><entry>
<para>When a task <emphasis role="bold">successfully</emphasis> ends waiting for event bit(s), these bits get cleared atomically and automatically. </para>

<para>Other bits stay unchanged. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 124 of file tn_eventgrp.h.</para>
    </section><anchor xml:id="_tn__eventgrp_8h_1ac9a2c46d690feaf04505ed7b7459d335"/>    <section>
    <title>TN_EGrpOp</title>
<indexterm><primary>TN_EGrpOp</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>TN_EGrpOp</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__eventgrp_8h_1ac9a2c46d690feaf04505ed7b7459d335">TN_EGrpOp</link></computeroutput></para><para>

<para>Modify operation: set, clear or toggle. </para>
</para>

<para>To be used in <computeroutput><link linkend="_tn__eventgrp_8h_1a259b92fc12d98a203cb58c2be1b07cad">tn_eventgrp_modify()</link></computeroutput> / <computeroutput><link linkend="_tn__eventgrp_8h_1a1a421a5ee44c2d619567656f52ea870f">tn_eventgrp_imodify()</link></computeroutput> functions. </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>TN_EVENTGRP_OP_SET</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>TN_EVENTGRP_OP_SET</secondary></indexterm>
<anchor xml:id="_tn__eventgrp_8h_1ac9a2c46d690feaf04505ed7b7459d335a99218a684d58413298b6b05a8e939eab"/>TN_EVENTGRP_OP_SET</entry><entry>
<para>Set flags that are set in given <computeroutput>pattern</computeroutput> argument. </para>

<para>Note that this operation can lead to the context switch, since other high-priority task(s) might wait for the event. </para>
</entry></row><row><entry><indexterm><primary>TN_EVENTGRP_OP_CLEAR</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>TN_EVENTGRP_OP_CLEAR</secondary></indexterm>
<anchor xml:id="_tn__eventgrp_8h_1ac9a2c46d690feaf04505ed7b7459d335a96662be438016ecf6690ee4ab3b60c93"/>TN_EVENTGRP_OP_CLEAR</entry><entry>
<para>Clear flags that are set in the given <computeroutput>pattern</computeroutput> argument. </para>

<para>This operation can <emphasis role="bold">not</emphasis> lead to the context switch, since tasks can&apos;t wait for events to be cleared. </para>
</entry></row><row><entry><indexterm><primary>TN_EVENTGRP_OP_TOGGLE</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>TN_EVENTGRP_OP_TOGGLE</secondary></indexterm>
<anchor xml:id="_tn__eventgrp_8h_1ac9a2c46d690feaf04505ed7b7459d335a25a252a0fb358e51dd86cccafda33aa0"/>TN_EVENTGRP_OP_TOGGLE</entry><entry>
<para>Toggle flags that are set in the given <computeroutput>pattern</computeroutput> argument. </para>

<para>Note that this operation can lead to the context switch, since other high-priority task(s) might wait for the event that was just set (if any). </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 146 of file tn_eventgrp.h.</para>
    </section><anchor xml:id="_tn__eventgrp_8h_1aca5ed3b60cdaa2e2db8b88f4b5e33d3f"/>    <section>
    <title>TN_EGrpAttr</title>
<indexterm><primary>TN_EGrpAttr</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>TN_EGrpAttr</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__eventgrp_8h_1aca5ed3b60cdaa2e2db8b88f4b5e33d3f">TN_EGrpAttr</link></computeroutput></para><para>

<para>Attributes that could be given to the event group object. </para>
</para>

<para>Makes sense if only <computeroutput>#TN_OLD_EVENT_API</computeroutput> option is non-zero; otherwise, there&apos;s just one dummy attribute available: <computeroutput>#TN_EVENTGRP_ATTR_NONE</computeroutput>. </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>TN_EVENTGRP_ATTR_SINGLE</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>TN_EVENTGRP_ATTR_SINGLE</secondary></indexterm>
<anchor xml:id="_tn__eventgrp_8h_1aca5ed3b60cdaa2e2db8b88f4b5e33d3fa43efdb2745838e224c83a99b1b193c5f"/>TN_EVENTGRP_ATTR_SINGLE</entry><entry>
<para><caution><title>Attention</title>

<para>deprecated. Available if only <computeroutput>#TN_OLD_EVENT_API</computeroutput> option is non-zero.</para>
</caution>
Indicates that only one task could wait for events in this event group. This flag is mutually exclusive with <computeroutput>#TN_EVENTGRP_ATTR_MULTI</computeroutput> flag. </para>
</entry></row><row><entry><indexterm><primary>TN_EVENTGRP_ATTR_MULTI</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>TN_EVENTGRP_ATTR_MULTI</secondary></indexterm>
<anchor xml:id="_tn__eventgrp_8h_1aca5ed3b60cdaa2e2db8b88f4b5e33d3fa259a30414ed85922670df476cb675683"/>TN_EVENTGRP_ATTR_MULTI</entry><entry>
<para><caution><title>Attention</title>

<para>deprecated. Available if only <computeroutput>#TN_OLD_EVENT_API</computeroutput> option is non-zero.</para>
</caution>
Indicates that multiple tasks could wait for events in this event group. This flag is mutually exclusive with <computeroutput>#TN_EVENTGRP_ATTR_SINGLE</computeroutput> flag. </para>
</entry></row><row><entry><indexterm><primary>TN_EVENTGRP_ATTR_CLR</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>TN_EVENTGRP_ATTR_CLR</secondary></indexterm>
<anchor xml:id="_tn__eventgrp_8h_1aca5ed3b60cdaa2e2db8b88f4b5e33d3fae1c96dbad9879c7cf30b3d718a11292a"/>TN_EVENTGRP_ATTR_CLR</entry><entry>
<para><caution><title>Attention</title>

<para>strongly deprecated. Available if only <computeroutput>#TN_OLD_EVENT_API</computeroutput> option is non-zero. Use <computeroutput>#TN_EVENTGRP_WMODE_AUTOCLR</computeroutput> instead.</para>
</caution>
Can be specified only in conjunction with <computeroutput>#TN_EVENTGRP_ATTR_SINGLE</computeroutput> flag. Indicates that <emphasis role="bold">ALL</emphasis> flags in this event group should be cleared when task successfully waits for any event in it.</para>

<para>This actually makes little sense to clear ALL events, but this is what compatibility mode is for (see <computeroutput>#TN_OLD_EVENT_API</computeroutput>) </para>
</entry></row><row><entry><indexterm><primary>TN_EVENTGRP_ATTR_NONE</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>TN_EVENTGRP_ATTR_NONE</secondary></indexterm>
<anchor xml:id="_tn__eventgrp_8h_1aca5ed3b60cdaa2e2db8b88f4b5e33d3fa1adfe6cfcb1dee045f59b2025537fd5a"/>TN_EVENTGRP_ATTR_NONE</entry><entry>
<para>Dummy attribute that does not change anything. </para>

<para>It is needed only for the assistance of the events compatibility mode (see <computeroutput>#TN_OLD_EVENT_API</computeroutput>) </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 171 of file tn_eventgrp.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_tn__eventgrp_8h_1a772da8298e7d62ae5109c5dbe792f8f0"/>    <section>
    <title>tn_eventgrp_create_wattr()</title>
<indexterm><primary>tn_eventgrp_create_wattr</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>tn_eventgrp_create_wattr</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_eventgrp_create_wattr (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> * eventgrp, enum <link linkend="_tn__eventgrp_8h_1aca5ed3b60cdaa2e2db8b88f4b5e33d3f">TN_EGrpAttr</link> attr, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> initial_pattern)</computeroutput></para><para>

<para>The same as <computeroutput>#<link linkend="_tn__eventgrp_8h_1ad30ec1eb30010b6a50b1705f5a4838bd">tn_eventgrp_create()</link></computeroutput>, but takes additional argument: <computeroutput>attr</computeroutput>. </para>
</para>

<para>It makes sense if only <computeroutput>#TN_OLD_EVENT_API</computeroutput> option is non-zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>eventgrp</entry>
                                <entry>
<para>Pointer to already allocated struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> </para>
</entry>
                            </row>
                            <row>
                                <entry>attr</entry>
                                <entry>
<para>
<literallayout>&#160;&#xa;</literallayout>
 Attributes for that particular event group object, see <computeroutput>struct #TN_EGrpAttr</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>initial_pattern</entry>
                                <entry>
<para>Initial events pattern. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_tn__eventgrp_8h_1ad30ec1eb30010b6a50b1705f5a4838bd"/>    <section>
    <title>tn_eventgrp_create()</title>
<indexterm><primary>tn_eventgrp_create</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>tn_eventgrp_create</secondary></indexterm>
<para><computeroutput><link linkend="_tn__arch__example_8h_1a39b8c7b5ae653ec71be6f5a821eec3f6">_TN_STATIC_INLINE</link> enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_eventgrp_create (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> * eventgrp, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> initial_pattern)</computeroutput></para><para>

<para>Construct event group. </para>
</para>

<para><computeroutput>id_event</computeroutput> field should not contain <computeroutput>#TN_ID_EVENTGRP</computeroutput>, otherwise, <computeroutput>#TN_RC_WPARAM</computeroutput> is returned.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>eventgrp</entry>
                                <entry>
<para>Pointer to already allocated struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> </para>
</entry>
                            </row>
                            <row>
                                <entry>initial_pattern</entry>
                                <entry>
<para>Initial events pattern.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if event group was successfully created;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return code is available: <computeroutput>#TN_RC_WPARAM</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
<para>
Definition at line 314 of file tn_eventgrp.h.</para>
    </section><anchor xml:id="_tn__eventgrp_8h_1a422ce1b22908602cee6fa8301948ab35"/>    <section>
    <title>tn_eventgrp_delete()</title>
<indexterm><primary>tn_eventgrp_delete</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>tn_eventgrp_delete</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_eventgrp_delete (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> * eventgrp)</computeroutput></para><para>

<para>Destruct event group. </para>
</para>

<para>All tasks that wait for the event(s) become runnable with <computeroutput>#TN_RC_DELETED</computeroutput> code returned.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>eventgrp</entry>
                                <entry>
<para>Pointer to event groupt to be deleted.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if event group was successfully deleted;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__eventgrp_8h_1a16906b6c4633087a3865c8e732dcb958"/>    <section>
    <title>tn_eventgrp_wait()</title>
<indexterm><primary>tn_eventgrp_wait</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>tn_eventgrp_wait</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_eventgrp_wait (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> * eventgrp, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> wait_pattern, enum <link linkend="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbd">TN_EGrpWaitMode</link> wait_mode, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> * p_flags_pattern, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</computeroutput></para><para>

<para>Wait for specified event(s) in the event group. </para>
</para>

<para>If the specified event is already active, function returns <computeroutput>#TN_RC_OK</computeroutput> immediately. Otherwise, behavior depends on <computeroutput>timeout</computeroutput> value: refer to <computeroutput>#TN_TickCnt</computeroutput>.</para>

<para>      <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>eventgrp</entry>
                                <entry>
<para>Pointer to event group to wait events from </para>
</entry>
                            </row>
                            <row>
                                <entry>wait_pattern</entry>
                                <entry>
<para>Events bit pattern for which task should wait </para>
</entry>
                            </row>
                            <row>
                                <entry>wait_mode</entry>
                                <entry>
<para>Specifies whether task should wait for <emphasis role="bold">all</emphasis> the event bits from <computeroutput>wait_pattern</computeroutput> to be set, or for just <emphasis role="bold">any</emphasis> of them (see enum <computeroutput>#TN_EGrpWaitMode</computeroutput>) </para>
</entry>
                            </row>
                            <row>
                                <entry>p_flags_pattern</entry>
                                <entry>
<para>Pointer to the <computeroutput>TN_UWord</computeroutput> variable in which actual event pattern that caused task to stop waiting will be stored. May be <computeroutput>TN_NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>timeout</entry>
                                <entry>
<para>refer to <computeroutput>#TN_TickCnt</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if specified event is active (so the task can check variable pointed to by <computeroutput>p_flags_pattern</computeroutput> if it wasn&apos;t <computeroutput>TN_NULL</computeroutput>).</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>Other possible return codes depend on <computeroutput>timeout</computeroutput> value, refer to <computeroutput>#TN_TickCnt</computeroutput></para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__eventgrp_8h_1a787501b26f934aeb7a3a506805e253de"/>    <section>
    <title>tn_eventgrp_wait_polling()</title>
<indexterm><primary>tn_eventgrp_wait_polling</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>tn_eventgrp_wait_polling</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_eventgrp_wait_polling (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> * eventgrp, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> wait_pattern, enum <link linkend="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbd">TN_EGrpWaitMode</link> wait_mode, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> * p_flags_pattern)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__eventgrp_8h_1a16906b6c4633087a3865c8e732dcb958">tn_eventgrp_wait()</link></computeroutput> with zero timeout. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__eventgrp_8h_1a1203b6dd58325c8a60513180ad6b538d"/>    <section>
    <title>tn_eventgrp_iwait_polling()</title>
<indexterm><primary>tn_eventgrp_iwait_polling</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>tn_eventgrp_iwait_polling</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_eventgrp_iwait_polling (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> * eventgrp, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> wait_pattern, enum <link linkend="_tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbd">TN_EGrpWaitMode</link> wait_mode, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> * p_flags_pattern)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__eventgrp_8h_1a16906b6c4633087a3865c8e732dcb958">tn_eventgrp_wait()</link></computeroutput> with zero timeout, but for using in the ISR. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__eventgrp_8h_1a259b92fc12d98a203cb58c2be1b07cad"/>    <section>
    <title>tn_eventgrp_modify()</title>
<indexterm><primary>tn_eventgrp_modify</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>tn_eventgrp_modify</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_eventgrp_modify (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> * eventgrp, enum <link linkend="_tn__eventgrp_8h_1ac9a2c46d690feaf04505ed7b7459d335">TN_EGrpOp</link> operation, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> pattern)</computeroutput></para><para>

<para>Modify current events bit pattern in the event group. </para>
</para>

<para>Behavior depends on the given <computeroutput>operation</computeroutput>: refer to <computeroutput>enum #TN_EGrpOp</computeroutput></para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>eventgrp</entry>
                                <entry>
<para>Pointer to event group to modify events in </para>
</entry>
                            </row>
                            <row>
                                <entry>operation</entry>
                                <entry>
<para>Actual operation to perform: set, clear or toggle. Refer to <computeroutput>enum #TN_EGrpOp</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>pattern</entry>
                                <entry>
<para>Events pattern to be applied (depending on <computeroutput>operation</computeroutput> value)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> on success;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__eventgrp_8h_1a1a421a5ee44c2d619567656f52ea870f"/>    <section>
    <title>tn_eventgrp_imodify()</title>
<indexterm><primary>tn_eventgrp_imodify</primary><secondary>tn_eventgrp.h</secondary></indexterm>
<indexterm><primary>tn_eventgrp.h</primary><secondary>tn_eventgrp_imodify</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_eventgrp_imodify (struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> * eventgrp, enum <link linkend="_tn__eventgrp_8h_1ac9a2c46d690feaf04505ed7b7459d335">TN_EGrpOp</link> operation, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> pattern)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__eventgrp_8h_1a259b92fc12d98a203cb58c2be1b07cad">tn_eventgrp_modify()</link></computeroutput>, but for using in the ISR. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
</section>
</section>
</section>
