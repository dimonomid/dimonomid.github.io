<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tn__timer_8h">
<title>core/tn_timer.h File Reference</title>
<indexterm><primary>core/tn_timer.h</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>Timer is a kernel object that is used to ask the kernel to call some user-provided function at a particular time in the future, based on the <emphasis><link linkend="_time_ticks">system timer</link></emphasis> tick.</para>

<para>If you need to repeatedly wake up particular task, you can create semaphore which you should <link linkend="_tn__sem_8h_1acfed2a27719c87638d2eb6edfdeea150">wait for</link> in the task, and <link linkend="_tn__sem_8h_1a215fd97b86fc63192106bb30b0574d14">signal</link> in the timer callback (remember that you should use <computeroutput><link linkend="_tn__sem_8h_1a215fd97b86fc63192106bb30b0574d14">tn_sem_isignal()</link></computeroutput> in this callback, since it is called from an ISR).</para>

<para>If you need to perform rather fast action (such as toggle some pin, or the like), consider doing that right in the timer callback, in order to avoid context switch overhead.</para>

<para>The timer callback approach provides ultimate flexibility.</para>

<para>In the spirit of TNeo, timers are as lightweight as possible. That&apos;s why there is only one type of timer: the single-shot timer. If you need your timer to fire repeatedly, you can easily restart it from the timer function by the <computeroutput><link linkend="_tn__timer_8h_1adaf86b592cd5016416571b8088280ceb">tn_timer_start()</link></computeroutput>, so it&apos;s not a problem.</para>

<para>When timer fires, the user-provided function is called. Be aware of the following:</para>

<para><itemizedlist>
<listitem>
<para>Function is called from an ISR context (namely, from <emphasis><link linkend="_time_ticks">system timer</link></emphasis> ISR, by the <computeroutput><link linkend="_tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing()</link></computeroutput>);</para>
</listitem><listitem>
<para>Function is called with global interrupts enabled.</para>
</listitem></itemizedlist>
</para>

<para>Consequently:</para>

<para><itemizedlist>
<listitem>
<para>It&apos;s legal to call interrupt services from this function;</para>
</listitem><listitem>
<para>You should make sure that your interrupt stack is enough for this function;</para>
</listitem><listitem>
<para>The function should be as fast as possible;</para>
</listitem></itemizedlist>
</para>

<para>See <computeroutput>#TN_TimerFunc</computeroutput> for the prototype of the function that could be scheduled.</para>

<para>TNeo offers two implementations of timers: static and dynamic. Refer to the page <link linkend="_time_ticks">Time ticks</link> for details.</para>
<section xml:id="_tn__timer_8h_1timers_static_implementation">
<title>Implementation of static timers</title>

<para>Although you don&apos;t have to understand the implementation of timers to use them, it is probably worth knowing, particularly because the kernel have an option <computeroutput>#TN_TICK_LISTS_CNT</computeroutput> to customize the balance between performance of <computeroutput><link linkend="_tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing()</link></computeroutput> and memory occupied by timers.</para>

<para>The easiest implementation of timers could be something like this: we have just a single list with all active timers, and at every system tick we should walk through all the timers in this list, and do the following with each timer:</para>

<para><itemizedlist>
<listitem>
<para>Decrement timeout by 1</para>
</listitem><listitem>
<para>If new timeout is 0, then remove that timer from the list (i.e. make timer inactive), and fire the appropriate timer function.</para>
</listitem></itemizedlist>
</para>

<para>This approach has drawbacks:</para>

<para><itemizedlist>
<listitem>
<para>We can&apos;t manage timers from the function called by timer. If we do so (say, if we start new timer), then the timer list gets modified. But we are currently iterating through this list, so, it&apos;s quite easy to mix things up.</para>
</listitem><listitem>
<para>It is inefficient on rather large amount of timers and/or with large timeouts: we should iterate through all of them each system tick.</para>
</listitem></itemizedlist>
</para>

<para>The latter is probably not so critical in the embedded world since large amount of timers is unlikely there; whereas the former is actually notable.</para>

<para>So, different approach was applied. The main idea is taken from the mainline Linux kernel source, but the implementation was simplified much because (1) embedded systems have much less resources, and (2) the kernel doesn&apos;t need to scale as well as Linux does. You can read about Linux timers implementation in the book &quot;Linux Device Drivers&quot;, 3rd edition:</para>

<para><itemizedlist>
<listitem>
<para>Time, Delays, and Deferred Work<itemizedlist>
<listitem>
<para>Kernel Timers<itemizedlist>
<listitem>
<para>The Implementation of Kernel Timers</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>

<para>This book is freely available at <link xlink:href="http://lwn.net/Kernel/LDD3/">http://lwn.net/Kernel/LDD3/</link> .</para>

<para>So, TNeo&apos;s implementation:</para>

<para>We have configurable value <computeroutput>N</computeroutput> that is a power of two, typical values are <computeroutput>4</computeroutput>, <computeroutput>8</computeroutput> or <computeroutput>16</computeroutput>.</para>

<para>If the timer expires in the next <computeroutput>1</computeroutput> to <computeroutput>(N - 1)</computeroutput> system ticks, it is added to one of the <computeroutput>N</computeroutput> lists (the so-called &quot;tick&quot; lists) devoted to short-range timers using the least significant bits of the <computeroutput>timeout</computeroutput> value. If it expires farther in the future, it is added to the &quot;generic&quot; list.</para>

<para>Each <computeroutput>N</computeroutput>-th system tick, all the timers from &quot;generic&quot; list are walked through, and the following is performed with each timer:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>timeout</computeroutput> value decremented by <computeroutput>N</computeroutput></para>
</listitem><listitem>
<para>if resulting <computeroutput>timeout</computeroutput> is less than <computeroutput>N</computeroutput>, timer is moved to the appropriate &quot;tick&quot; list.</para>
</listitem></itemizedlist>
</para>

<para>At <emphasis>every</emphasis> system tick, all the timers from current &quot;tick&quot; list are fired unconditionally. This is an efficient and nice solution.</para>

<para>The attentive reader may want to ask why do we use <computeroutput>(N - 1)</computeroutput> &quot;tick&quot; lists if we actually have <computeroutput>N</computeroutput> lists. That&apos;s because, again, we want to be able to modify timers from the timer function. If we use <computeroutput>N</computeroutput> lists, and user wants to add new timer with <computeroutput>timeout</computeroutput> equal to <computeroutput>N</computeroutput>, then new timer will be added to the same list which is iterated through at the moment, and things will be mixed up.</para>

<para>If we use <computeroutput>(N - 1)</computeroutput> lists, we are guaranteed that new timers can&apos;t be added to the current &quot;tick&quot; list while we are iterating through it. (although timer can be deleted from that list, but it&apos;s ok)</para>

<para>The <computeroutput>N</computeroutput> in the TNeo is configured by the compile-time option <computeroutput>#TN_TICK_LISTS_CNT</computeroutput>. </para>
</section>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structTN__Timer">TN_Timer</link></para>

<para>Timer. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef void() <link linkend="_tn__timer_8h_1a3139b6e571f7bd3d304a7bb87b5b2459">TN_TimerFunc</link>(struct <link linkend="_structTN__Timer">TN_Timer</link> *timer, void *p_user_data)</para>

<para>Prototype of the function that should be called by timer. </para>
</listitem>
            <listitem><para>typedef void() <link linkend="_tn__timer_8h_1a8c64f098ee0fa587a985d149b81bfba9">TN_CBTickSchedule</link>(<link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</para>

<para><emphasis>Available if only <link linkend="_tn__cfg__default_8h_1aaee875834a86f961318c584095c366fe"><computeroutput>TN_DYNAMIC_TICK</computeroutput> </link> is <emphasis role="bold">set</emphasis>.</emphasis> </para>
</listitem>
            <listitem><para>typedef <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link>() <link linkend="_tn__timer_8h_1a4cc3440639e990e3a3015b95e805374a">TN_CBTickCntGet</link>(void)</para>

<para><emphasis>Available if only <link linkend="_tn__cfg__default_8h_1aaee875834a86f961318c584095c366fe"><computeroutput>TN_DYNAMIC_TICK</computeroutput> </link> is <emphasis role="bold">set</emphasis>.</emphasis> </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__timer_8h_1a13fe1c64d32f7e554ac48d4331e7f5a2">tn_timer_create</link> (struct <link linkend="_structTN__Timer">TN_Timer</link> *timer, <link linkend="_tn__timer_8h_1a3139b6e571f7bd3d304a7bb87b5b2459">TN_TimerFunc</link> *func, void *p_user_data)</para>

<para>Construct the timer. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__timer_8h_1af97725f0e7e3a92864846aee64e7a55f">tn_timer_delete</link> (struct <link linkend="_structTN__Timer">TN_Timer</link> *timer)</para>

<para>Destruct the timer. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__timer_8h_1adaf86b592cd5016416571b8088280ceb">tn_timer_start</link> (struct <link linkend="_structTN__Timer">TN_Timer</link> *timer, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</para>

<para>Start or restart the timer: that is, schedule the timer&apos;s function (given to <computeroutput><link linkend="_tn__timer_8h_1a13fe1c64d32f7e554ac48d4331e7f5a2">tn_timer_create()</link></computeroutput>) to be called later by the kernel. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__timer_8h_1adda7385799b66fd32a1d00927fcabcf9">tn_timer_cancel</link> (struct <link linkend="_structTN__Timer">TN_Timer</link> *timer)</para>

<para>If timer is active, cancel it. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__timer_8h_1aa81f018e8a8e511f288781acbf79af72">tn_timer_set_func</link> (struct <link linkend="_structTN__Timer">TN_Timer</link> *timer, <link linkend="_tn__timer_8h_1a3139b6e571f7bd3d304a7bb87b5b2459">TN_TimerFunc</link> *func, void *p_user_data)</para>

<para>Set user-provided function and pointer to user data for the timer. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__timer_8h_1a7688a2a0246ebbdf2524b321211fe6a4">tn_timer_is_active</link> (struct <link linkend="_structTN__Timer">TN_Timer</link> *timer, <link linkend="_tn__common_8h_1a9f76389d1506addfc7542f54e484a92c">TN_BOOL</link> *p_is_active)</para>

<para>Returns whether given timer is active or inactive. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__timer_8h_1a21cf3ec310ed334d062bd3134fe6fe24">tn_timer_time_left</link> (struct <link linkend="_structTN__Timer">TN_Timer</link> *timer, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> *p_time_left)</para>

<para>Returns how many <emphasis><link linkend="_time_ticks">system timer</link></emphasis> ticks (at most) is left for the timer to expire. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_tn__timer_8h_1a3139b6e571f7bd3d304a7bb87b5b2459"/>    <section>
    <title>TN_TimerFunc</title>
<indexterm><primary>TN_TimerFunc</primary><secondary>tn_timer.h</secondary></indexterm>
<indexterm><primary>tn_timer.h</primary><secondary>TN_TimerFunc</secondary></indexterm>
<para><computeroutput>typedef void() TN_TimerFunc(struct <link linkend="_structTN__Timer">TN_Timer</link> *timer, void *p_user_data)</computeroutput></para><para>

<para>Prototype of the function that should be called by timer. </para>
</para>

<para>When timer fires, the user-provided function is called. Be aware of the following:<itemizedlist>
<listitem>
<para>Function is called from ISR context (namely, from <emphasis><link linkend="_time_ticks">system timer</link></emphasis> ISR, by the <computeroutput><link linkend="_tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing()</link></computeroutput>);</para>
</listitem><listitem>
<para>Function is called with global interrupts enabled.</para>
</listitem></itemizedlist>
</para>

<para>Consequently:</para>

<para><itemizedlist>
<listitem>
<para>It&apos;s legal to call interrupt services from this function;</para>
</listitem><listitem>
<para>The function should be as fast as possible.</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>timer</entry>
                                <entry>
<para>Timer that caused function to be called </para>
</entry>
                            </row>
                            <row>
                                <entry>p_user_data</entry>
                                <entry>
<para>The user-provided pointer given to <computeroutput><link linkend="_tn__timer_8h_1a13fe1c64d32f7e554ac48d4331e7f5a2">tn_timer_create()</link></computeroutput>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 198 of file tn_timer.h.</para>
    </section><anchor xml:id="_tn__timer_8h_1a8c64f098ee0fa587a985d149b81bfba9"/>    <section>
    <title>TN_CBTickSchedule</title>
<indexterm><primary>TN_CBTickSchedule</primary><secondary>tn_timer.h</secondary></indexterm>
<indexterm><primary>tn_timer.h</primary><secondary>TN_CBTickSchedule</secondary></indexterm>
<para><computeroutput>typedef void() TN_CBTickSchedule(<link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</computeroutput></para><para>

<para><emphasis>Available if only <link linkend="_tn__cfg__default_8h_1aaee875834a86f961318c584095c366fe"><computeroutput>TN_DYNAMIC_TICK</computeroutput> </link> is <emphasis role="bold">set</emphasis>.</emphasis> </para>
</para>

<para>Prototype of callback function that should schedule next time to call <computeroutput><link linkend="_tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing()</link></computeroutput>.</para>

<para>See <computeroutput><link linkend="_tn__sys_8h_1ab4e879240635c8f73e20905b8e499c1c">tn_callback_dyn_tick_set()</link></computeroutput></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>timeout</entry>
                                <entry>
<para>Timeout after which <computeroutput><link linkend="_tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing()</link></computeroutput> should be called next time. Note the following:<itemizedlist>
<listitem>
<para>It might be <computeroutput>#TN_WAIT_INFINITE</computeroutput>, which means that there are no active timeouts, and so, there&apos;s no need for tick interrupt at all.</para>
</listitem><listitem>
<para>It might be <computeroutput>0</computeroutput>; in this case, it&apos;s <emphasis>already</emphasis> time to call <computeroutput><link linkend="_tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing()</link></computeroutput>. You might want to set interrupt request bit then, in order to get to it as soon as possible.</para>
</listitem><listitem>
<para>In other cases, the function should schedule next call to <computeroutput><link linkend="_tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing()</link></computeroutput> in the <computeroutput>timeout</computeroutput> tick periods. </para>
</listitem></itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 268 of file tn_timer.h.</para>
    </section><anchor xml:id="_tn__timer_8h_1a4cc3440639e990e3a3015b95e805374a"/>    <section>
    <title>TN_CBTickCntGet</title>
<indexterm><primary>TN_CBTickCntGet</primary><secondary>tn_timer.h</secondary></indexterm>
<indexterm><primary>tn_timer.h</primary><secondary>TN_CBTickCntGet</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link>() TN_CBTickCntGet(void)</computeroutput></para><para>

<para><emphasis>Available if only <link linkend="_tn__cfg__default_8h_1aaee875834a86f961318c584095c366fe"><computeroutput>TN_DYNAMIC_TICK</computeroutput> </link> is <emphasis role="bold">set</emphasis>.</emphasis> </para>
</para>

<para>Prototype of callback function that should return current system tick counter value.</para>

<para>See <computeroutput><link linkend="_tn__sys_8h_1ab4e879240635c8f73e20905b8e499c1c">tn_callback_dyn_tick_set()</link></computeroutput></para>

<para><formalpara><title>Returns</title>

<para>current system tick counter value. </para>
</formalpara>
</para>
<para>
Definition at line 280 of file tn_timer.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_tn__timer_8h_1a13fe1c64d32f7e554ac48d4331e7f5a2"/>    <section>
    <title>tn_timer_create()</title>
<indexterm><primary>tn_timer_create</primary><secondary>tn_timer.h</secondary></indexterm>
<indexterm><primary>tn_timer.h</primary><secondary>tn_timer_create</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_timer_create (struct <link linkend="_structTN__Timer">TN_Timer</link> * timer, <link linkend="_tn__timer_8h_1a3139b6e571f7bd3d304a7bb87b5b2459">TN_TimerFunc</link> * func, void * p_user_data)</computeroutput></para><para>

<para>Construct the timer. </para>
</para>

<para><computeroutput>id_timer</computeroutput> field should not contain <computeroutput>#TN_ID_TIMER</computeroutput>, otherwise, <computeroutput>#TN_RC_WPARAM</computeroutput> is returned.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>timer</entry>
                                <entry>
<para>Pointer to already allocated <computeroutput>struct <link linkend="_structTN__Timer">TN_Timer</link></computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>func</entry>
                                <entry>
<para>Function to be called by timer, can&apos;t be <computeroutput>TN_NULL</computeroutput>. See <computeroutput><link linkend="_tn__timer_8h_1a3139b6e571f7bd3d304a7bb87b5b2459">TN_TimerFunc()</link></computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>p_user_data</entry>
                                <entry>
<para>User data pointer that is given to user-provided <computeroutput>func</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if timer was successfully created;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WPARAM</computeroutput> if wrong params were given. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__timer_8h_1af97725f0e7e3a92864846aee64e7a55f"/>    <section>
    <title>tn_timer_delete()</title>
<indexterm><primary>tn_timer_delete</primary><secondary>tn_timer.h</secondary></indexterm>
<indexterm><primary>tn_timer.h</primary><secondary>tn_timer_delete</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_timer_delete (struct <link linkend="_structTN__Timer">TN_Timer</link> * timer)</computeroutput></para><para>

<para>Destruct the timer. </para>
</para>

<para>If the timer is active, it is cancelled first.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>timer</entry>
                                <entry>
<para>timer to destruct</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if timer was successfully deleted;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__timer_8h_1adaf86b592cd5016416571b8088280ceb"/>    <section>
    <title>tn_timer_start()</title>
<indexterm><primary>tn_timer_start</primary><secondary>tn_timer.h</secondary></indexterm>
<indexterm><primary>tn_timer.h</primary><secondary>tn_timer_start</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_timer_start (struct <link linkend="_structTN__Timer">TN_Timer</link> * timer, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</computeroutput></para><para>

<para>Start or restart the timer: that is, schedule the timer&apos;s function (given to <computeroutput><link linkend="_tn__timer_8h_1a13fe1c64d32f7e554ac48d4331e7f5a2">tn_timer_create()</link></computeroutput>) to be called later by the kernel. </para>
</para>

<para>See <computeroutput><link linkend="_tn__timer_8h_1a3139b6e571f7bd3d304a7bb87b5b2459">TN_TimerFunc()</link></computeroutput>.</para>

<para>It is legal to restart already active timer. In this case, the timer will be cancelled first.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>timer</entry>
                                <entry>
<para>Timer to start </para>
</entry>
                            </row>
                            <row>
                                <entry>timeout</entry>
                                <entry>
<para>Number of system ticks after which timer should fire (i.e. function should be called). <emphasis role="bold">Note</emphasis> that <computeroutput>timeout</computeroutput> can&apos;t be <computeroutput>#TN_WAIT_INFINITE</computeroutput> or <computeroutput>0</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if timer was successfully started;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WPARAM</computeroutput> if wrong params were given: say, <computeroutput>timeout</computeroutput> is either <computeroutput>#TN_WAIT_INFINITE</computeroutput> or <computeroutput>0</computeroutput>.</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return code is available: <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__timer_8h_1adda7385799b66fd32a1d00927fcabcf9"/>    <section>
    <title>tn_timer_cancel()</title>
<indexterm><primary>tn_timer_cancel</primary><secondary>tn_timer.h</secondary></indexterm>
<indexterm><primary>tn_timer.h</primary><secondary>tn_timer_cancel</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_timer_cancel (struct <link linkend="_structTN__Timer">TN_Timer</link> * timer)</computeroutput></para><para>

<para>If timer is active, cancel it. </para>
</para>

<para>If timer is already inactive, nothing is changed.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>timer</entry>
                                <entry>
<para>Timer to cancel</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if timer was successfully cancelled;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__timer_8h_1aa81f018e8a8e511f288781acbf79af72"/>    <section>
    <title>tn_timer_set_func()</title>
<indexterm><primary>tn_timer_set_func</primary><secondary>tn_timer.h</secondary></indexterm>
<indexterm><primary>tn_timer.h</primary><secondary>tn_timer_set_func</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_timer_set_func (struct <link linkend="_structTN__Timer">TN_Timer</link> * timer, <link linkend="_tn__timer_8h_1a3139b6e571f7bd3d304a7bb87b5b2459">TN_TimerFunc</link> * func, void * p_user_data)</computeroutput></para><para>

<para>Set user-provided function and pointer to user data for the timer. </para>
</para>

<para>Can be called if timer is either active or inactive.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>timer</entry>
                                <entry>
<para>Pointer to timer </para>
</entry>
                            </row>
                            <row>
                                <entry>func</entry>
                                <entry>
<para>Function to be called by timer, can&apos;t be <computeroutput>TN_NULL</computeroutput>. See <computeroutput><link linkend="_tn__timer_8h_1a3139b6e571f7bd3d304a7bb87b5b2459">TN_TimerFunc()</link></computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>p_user_data</entry>
                                <entry>
<para>User data pointer that is given to user-provided <computeroutput>func</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if operation was successfull;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WPARAM</computeroutput> if wrong params were given. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__timer_8h_1a7688a2a0246ebbdf2524b321211fe6a4"/>    <section>
    <title>tn_timer_is_active()</title>
<indexterm><primary>tn_timer_is_active</primary><secondary>tn_timer.h</secondary></indexterm>
<indexterm><primary>tn_timer.h</primary><secondary>tn_timer_is_active</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_timer_is_active (struct <link linkend="_structTN__Timer">TN_Timer</link> * timer, <link linkend="_tn__common_8h_1a9f76389d1506addfc7542f54e484a92c">TN_BOOL</link> * p_is_active)</computeroutput></para><para>

<para>Returns whether given timer is active or inactive. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>timer</entry>
                                <entry>
<para>Pointer to timer </para>
</entry>
                            </row>
                            <row>
                                <entry>p_is_active</entry>
                                <entry>
<para>Pointer to <computeroutput>#TN_BOOL</computeroutput> variable in which resulting value should be stored</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if operation was successfull;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WPARAM</computeroutput> if wrong params were given. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__timer_8h_1a21cf3ec310ed334d062bd3134fe6fe24"/>    <section>
    <title>tn_timer_time_left()</title>
<indexterm><primary>tn_timer_time_left</primary><secondary>tn_timer.h</secondary></indexterm>
<indexterm><primary>tn_timer.h</primary><secondary>tn_timer_time_left</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_timer_time_left (struct <link linkend="_structTN__Timer">TN_Timer</link> * timer, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> * p_time_left)</computeroutput></para><para>

<para>Returns how many <emphasis><link linkend="_time_ticks">system timer</link></emphasis> ticks (at most) is left for the timer to expire. </para>
</para>

<para>If timer is inactive, 0 is returned.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>timer</entry>
                                <entry>
<para>Pointer to timer </para>
</entry>
                            </row>
                            <row>
                                <entry>p_time_left</entry>
                                <entry>
<para>Pointer to <computeroutput>#TN_TickCnt</computeroutput> variable in which resulting value should be stored</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if operation was successfull;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WPARAM</computeroutput> if wrong params were given. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
</section>
</section>
</section>
