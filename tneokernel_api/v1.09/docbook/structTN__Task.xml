<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structTN__Task">
<title>TN_Task Struct Reference</title>
<indexterm><primary>TN_Task</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>Task. </para>
<para>
Definition at line 330 of file tn_tasks.h.</para>
<simplesect>
    <title>Data Fields    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_structTN__Task_1a9354fa4b328e10ee9f8adb032e643892"/><link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> * <link linkend="_structTN__Task_1a9354fa4b328e10ee9f8adb032e643892">stack_cur_pt</link></para>

<para>pointer to task&apos;s current top of the stack; Note that this field <emphasis role="bold">must</emphasis> be a first field in the struct, this fact is exploited by platform-specific routines. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976">TN_ObjId</link> <link linkend="_structTN__Task_1a014a0a70ae6a23d08b1571ac6b017abd">id_task</link></para>

<para>id for object validity verification. </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1a0772dfcd1f95d0ba10b9d2820fb9201b"/>struct <link linkend="_structTN__ListItem">TN_ListItem</link> <link linkend="_structTN__Task_1a0772dfcd1f95d0ba10b9d2820fb9201b">task_queue</link></para>

<para>queue is used to include task in ready/wait lists </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1ac394d7ba177bab077969e9d96cddd8fb"/>struct <link linkend="_structTN__Timer">TN_Timer</link> <link linkend="_structTN__Task_1ac394d7ba177bab077969e9d96cddd8fb">timer</link></para>

<para>timer object to implement task waiting for timeout </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1a971ab5689af53bed2548c62f3bcabdc5"/>struct <link linkend="_structTN__ListItem">TN_ListItem</link> * <link linkend="_structTN__Task_1a971ab5689af53bed2548c62f3bcabdc5">pwait_queue</link></para>

<para>pointer to object&apos;s (semaphore, mutex, event, etc) wait list in which task is included for waiting </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1aedb23df723d259530f10a122fec42334"/>struct <link linkend="_structTN__ListItem">TN_ListItem</link> <link linkend="_structTN__Task_1aedb23df723d259530f10a122fec42334">create_queue</link></para>

<para>queue is used to include task in creation list (currently, this list is used for statistics only) </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1ad4decd7355c95a5b60a6774c3ee19eb9"/>struct <link linkend="_structTN__ListItem">TN_ListItem</link> <link linkend="_structTN__Task_1ad4decd7355c95a5b60a6774c3ee19eb9">mutex_queue</link></para>

<para>list of all mutexes that are locked by task </para>
</listitem>
            <listitem><para>struct <link linkend="_structTN__ListItem">TN_ListItem</link> <link linkend="_structTN__Task_1a097e79851e01fb3c73f0346d99ea8b7e">deadlock_list</link></para>

<para>list of other tasks involved in deadlock. </para>
</listitem>
            <listitem><para><link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> * <link linkend="_structTN__Task_1a05cfde00b0cd82cda88a6698dc159e31">stack_low_addr</link></para>

<para>&#8211; lowest address of stack. </para>
</listitem>
            <listitem><para><link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> * <link linkend="_structTN__Task_1a4497d6972b9a7706608708847d29aa46">stack_high_addr</link></para>

<para>&#8211; Highest address of stack. </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1a69c06e09b4d2a8a258f0733b58324139"/><link linkend="_tn__common_8h_1a603cbe1ffdafc7e6813ef692bbd7d22f">TN_TaskBody</link> * <link linkend="_structTN__Task_1a69c06e09b4d2a8a258f0733b58324139">task_func_addr</link></para>

<para>pointer to task&apos;s body function given to <computeroutput><link linkend="_tn__tasks_8h_1a548d5adda09d1b4e393b5df0e9e1a7a5">tn_task_create()</link></computeroutput> </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1a55c62af79c5b4fdc2f1b414d409afe73"/>void * <link linkend="_structTN__Task_1a55c62af79c5b4fdc2f1b414d409afe73">task_func_param</link></para>

<para>pointer to task&apos;s parameter given to <computeroutput><link linkend="_tn__tasks_8h_1a548d5adda09d1b4e393b5df0e9e1a7a5">tn_task_create()</link></computeroutput> </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1a7775b785b3f0b57918e9a0c88491a069"/>int <link linkend="_structTN__Task_1a7775b785b3f0b57918e9a0c88491a069">base_priority</link></para>

<para>base priority of the task (actual current priority may be higher than base priority because of mutex) </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1a43c9c73249da8faa1177587786c40616"/>int <link linkend="_structTN__Task_1a43c9c73249da8faa1177587786c40616">priority</link></para>

<para>current task priority </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1a6a1ec466a27d43d68f21a62e2c6cf03d"/>enum <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6">TN_TaskState</link> <link linkend="_structTN__Task_1a6a1ec466a27d43d68f21a62e2c6cf03d">task_state</link></para>

<para>task state </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1a37d3c12db92b7dfc6c3bb661216f3c11"/>enum <link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7">TN_WaitReason</link> <link linkend="_structTN__Task_1a37d3c12db92b7dfc6c3bb661216f3c11">task_wait_reason</link></para>

<para>reason for waiting (relevant if only <computeroutput>task_state</computeroutput> is <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6aaa3dfaf2bb5992e0cef981618ce30d56"><computeroutput>WAIT</computeroutput></link> or <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6ad010070ccc16a5c706c286baf2e3ee2a"><computeroutput>WAIT+SUSPEND</computeroutput></link>) </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1a367b92b74248f8702ed428a695079903"/>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_structTN__Task_1a367b92b74248f8702ed428a695079903">task_wait_rc</link></para>

<para>waiting result code (reason why waiting finished) </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1ab3ca332d577071de47d85fb1371f6830"/>int <link linkend="_structTN__Task_1ab3ca332d577071de47d85fb1371f6830">tslice_count</link></para>

<para>time slice counter </para>
</listitem>
            <listitem><para>union {</para>
        <itemizedlist>
            <listitem><para>   struct <link linkend="_structTN__EGrpTaskWait">TN_EGrpTaskWait</link> <link linkend="_structTN__Task_1a22c8cfe2e95d6f891aa568cafdb95936">eventgrp</link></para>

<para>fields specific to <link linkend="_tn__eventgrp_8h">tn_eventgrp.h</link> </para>
</listitem>
            <listitem><para>   struct <link linkend="_structTN__DQueueTaskWait">TN_DQueueTaskWait</link> <link linkend="_structTN__Task_1aa536e1eba96904c006d1e61efc520378">dqueue</link></para>

<para>fields specific to <link linkend="_tn__dqueue_8h">tn_dqueue.h</link> </para>
</listitem>
            <listitem><para>   struct <link linkend="_structTN__FMemTaskWait">TN_FMemTaskWait</link> <link linkend="_structTN__Task_1a31921e5384127319bffd5ae09debac1e">fmem</link></para>

<para>fields specific to <link linkend="_tn__fmem_8h">tn_fmem.h</link> </para>
</listitem>
        </itemizedlist>
</listitem>
            <listitem><para>} <link linkend="_structTN__Task_1a61750bcacd8b0c25d16801df8ba8db57">subsys_wait</link></para>

<para>subsystem-specific fields that are used while task waits for something. </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1aed03c90906ffe2dcbcc49d8badc74147"/>const char * <link linkend="_structTN__Task_1aed03c90906ffe2dcbcc49d8badc74147">name</link></para>

<para>Task name for debug purposes, user may want to set it by hand. </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1a206bc3b05e1c660bb4ad9c032f1856b4"/>struct <link linkend="_struct__TN__TaskProfiler">_TN_TaskProfiler</link> <link linkend="_structTN__Task_1a206bc3b05e1c660bb4ad9c032f1856b4">profiler</link></para>

<para>Profiler data, available if only <computeroutput>#TN_PROFILER</computeroutput> is non-zero. </para>
</listitem>
            <listitem><para>unsigned <link linkend="_structTN__Task_1abb4d22974c7317dd610f646b9048656d">priority_already_updated</link>: 1</para>

<para>Internal flag used to optimize mutex priority algorithms. </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__Task_1a47c3a0a27be1ee526a1599a2ca8bb269"/>unsigned <link linkend="_structTN__Task_1a47c3a0a27be1ee526a1599a2ca8bb269">waited</link>: 1</para>

<para>Flag indicates that task waited for something This flag is set automatially in <computeroutput>_tn_task_set_waiting()</computeroutput> Must be cleared manually before calling any service that could sleep, if the caller is interested in the relevant value of this flag. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Field Documentation</title>
<anchor xml:id="_structTN__Task_1a014a0a70ae6a23d08b1571ac6b017abd"/>    <section>
    <title>id_task</title>
<indexterm><primary>id_task</primary><secondary>TN_Task</secondary></indexterm>
<indexterm><primary>TN_Task</primary><secondary>id_task</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976">TN_ObjId</link> TN_Task::id_task</computeroutput></para><para>

<para>id for object validity verification. </para>
</para>

<para>This field is in the beginning of the structure to make it easier to detect memory corruption. For <computeroutput>struct <link linkend="_structTN__Task">TN_Task</link></computeroutput>, we can&apos;t make it the very first field, since stack pointer should be there. </para>
<para>
Definition at line 341 of file tn_tasks.h.</para>
    </section><anchor xml:id="_structTN__Task_1a097e79851e01fb3c73f0346d99ea8b7e"/>    <section>
    <title>deadlock_list</title>
<indexterm><primary>deadlock_list</primary><secondary>TN_Task</secondary></indexterm>
<indexterm><primary>TN_Task</primary><secondary>deadlock_list</secondary></indexterm>
<para><computeroutput>struct <link linkend="_structTN__ListItem">TN_ListItem</link> TN_Task::deadlock_list</computeroutput></para><para>

<para>list of other tasks involved in deadlock. </para>
</para>

<para>This list is non-empty only in emergency cases, and it is here to help you fix your bug that led to deadlock.</para>

<para><formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__cfg__default_8h_1a6ed3ec7b0d4338e7f60dde86b7ea5fa4">TN_MUTEX_DEADLOCK_DETECT</link></computeroutput> </para>
</formalpara>
</para>
<para>
Definition at line 368 of file tn_tasks.h.</para>
    </section><anchor xml:id="_structTN__Task_1a05cfde00b0cd82cda88a6698dc159e31"/>    <section>
    <title>stack_low_addr</title>
<indexterm><primary>stack_low_addr</primary><secondary>TN_Task</secondary></indexterm>
<indexterm><primary>TN_Task</primary><secondary>stack_low_addr</secondary></indexterm>
<para><computeroutput><link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link>* TN_Task::stack_low_addr</computeroutput></para><para>

<para>&#8211; lowest address of stack. </para>
</para>

<para>It is independent of architecture: it&apos;s always the lowest address (which may be actually origin or end of stack, depending on the architecture) </para>
<para>
Definition at line 375 of file tn_tasks.h.</para>
    </section><anchor xml:id="_structTN__Task_1a4497d6972b9a7706608708847d29aa46"/>    <section>
    <title>stack_high_addr</title>
<indexterm><primary>stack_high_addr</primary><secondary>TN_Task</secondary></indexterm>
<indexterm><primary>TN_Task</primary><secondary>stack_high_addr</secondary></indexterm>
<para><computeroutput><link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link>* TN_Task::stack_high_addr</computeroutput></para><para>

<para>&#8211; Highest address of stack. </para>
</para>

<para>It is independent of architecture: it&apos;s always the highest address (which may be actually origin or end of stack, depending on the architecture) </para>
<para>
Definition at line 379 of file tn_tasks.h.</para>
    </section><anchor xml:id="_structTN__Task_1a61750bcacd8b0c25d16801df8ba8db57"/>    <section>
    <title>subsys_wait</title>
<indexterm><primary>subsys_wait</primary><secondary>TN_Task</secondary></indexterm>
<indexterm><primary>TN_Task</primary><secondary>subsys_wait</secondary></indexterm>
<para><computeroutput>union { ... }  TN_Task::subsys_wait</computeroutput></para><para>

<para>subsystem-specific fields that are used while task waits for something. </para>
</para>

<para>Do note that these fields are grouped by union, so, they must not interfere with each other. It&apos;s quite ok here because task can&apos;t wait for different things. </para>
    </section><anchor xml:id="_structTN__Task_1abb4d22974c7317dd610f646b9048656d"/>    <section>
    <title>priority_already_updated</title>
<indexterm><primary>priority_already_updated</primary><secondary>TN_Task</secondary></indexterm>
<indexterm><primary>TN_Task</primary><secondary>priority_already_updated</secondary></indexterm>
<para><computeroutput>unsigned TN_Task::priority_already_updated</computeroutput></para><para>

<para>Internal flag used to optimize mutex priority algorithms. </para>
</para>

<para>For the comments on it, see file tn_mutex.c, function <computeroutput>_mutex_do_unlock()</computeroutput>. </para>
<para>
Definition at line 441 of file tn_tasks.h.</para>
</section>
<para>
The documentation for this struct was generated from the following file:</para>
core/<link linkend="_tn__tasks_8h">tn_tasks.h</link></section>
</section>
