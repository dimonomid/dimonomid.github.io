<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tn__arch__example_8h">
<title>arch/example/tn_arch_example.h File Reference</title>
<indexterm><primary>arch/example/tn_arch_example.h</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>Example of architecture-dependent routines </para>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1ab25ff526f86c290ce100816c5078b7b8">_TN_FFS</link>(x)   (32 - __builtin_clz((x) &amp; (0 - (x))))</para>

<para>FFS - find first set bit. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1ac355ce66c30fd8e505a71e6170913121">_TN_FATAL_ERRORF</link>(error_msg, ...)   {__asm__ volatile(&quot; sdbbp 0&quot;); __asm__ volatile (&quot;nop&quot;);}</para>

<para>Used by the kernel as a signal that something really bad happened. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1ae245dddb19cd7c12b7038a62d576fafa">TN_ARCH_STK_ATTR_BEFORE</link></para>

<para>Compiler-specific attribute that should be placed <emphasis role="bold">before</emphasis> declaration of array used for stack. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1ab082613959b539182b8b47bc87d18d6a">TN_ARCH_STK_ATTR_AFTER</link>   __attribute__((aligned(0x8)))</para>

<para>Compiler-specific attribute that should be placed <emphasis role="bold">after</emphasis> declaration of array used for stack. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__arch__example_8h_1ad465f81e8ea15a530747b1147dbe4605"/>#define <link linkend="_tn__arch__example_8h_1ad465f81e8ea15a530747b1147dbe4605">TN_MIN_STACK_SIZE</link>   36</para>

<para>Minimum task&apos;s stack size, in words, not in bytes; includes a space for context plus for parameters passed to task&apos;s body function. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__arch__example_8h_1a9f340cc02023c595904228372b9e7d12"/>#define <link linkend="_tn__arch__example_8h_1a9f340cc02023c595904228372b9e7d12">TN_INT_WIDTH</link>   32</para>

<para>Width of <computeroutput>int</computeroutput> type. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1a9809516063a01ca2c2f5f009294839d3">TN_PRIORITIES_MAX_CNT</link>   <link linkend="_tn__arch__example_8h_1a9f340cc02023c595904228372b9e7d12">TN_INT_WIDTH</link></para>

<para>Maximum number of priorities available, this value usually matches <computeroutput>#TN_INT_WIDTH</computeroutput>. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__arch__example_8h_1a16909a2a05bc2bc628109d843208a76b"/>#define <link linkend="_tn__arch__example_8h_1a16909a2a05bc2bc628109d843208a76b">TN_WAIT_INFINITE</link>   (<link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link>)0xFFFFFFFF</para>

<para>Value for infinite waiting, usually matches <computeroutput>ULONG_MAX</computeroutput>, because <computeroutput>#TN_TickCnt</computeroutput> is declared as <computeroutput>unsigned long</computeroutput>. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__arch__example_8h_1a52a8b7006a0b8bfb051956c4528a812c"/>#define <link linkend="_tn__arch__example_8h_1a52a8b7006a0b8bfb051956c4528a812c">TN_FILL_STACK_VAL</link>   0xFEEDFACE</para>

<para>Value for initializing the unused space of task&apos;s stack. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1a58899c98640384b8a2cf7f9ba6f53a23">TN_INTSAVE_DATA</link>   int tn_save_status_reg = 0;</para>

<para>Declares variable that is used by macros <computeroutput><link linkend="_tn__arch__example_8h_1a213d605c9ff557fee2fe376e63cb559b">TN_INT_DIS_SAVE()</link></computeroutput> and <computeroutput><link linkend="_tn__arch__example_8h_1a727d4cdb7fb41f5fa5d15a676a4243b2">TN_INT_RESTORE()</link></computeroutput> for storing status register value. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1aa80a572e7b4874a2b281c6718f31809c">TN_INTSAVE_DATA_INT</link>   <link linkend="_tn__arch__example_8h_1a58899c98640384b8a2cf7f9ba6f53a23">TN_INTSAVE_DATA</link></para>

<para>The same as <computeroutput>#TN_INTSAVE_DATA</computeroutput> but for using in ISR together with <computeroutput><link linkend="_tn__arch__example_8h_1a3d03bcbee89062cd936b953843a9e381">TN_INT_IDIS_SAVE()</link></computeroutput>, <computeroutput><link linkend="_tn__arch__example_8h_1a256d532ba3fa1a0762d54e7933921206">TN_INT_IRESTORE()</link></computeroutput>. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1a213d605c9ff557fee2fe376e63cb559b">TN_INT_DIS_SAVE</link>()   tn_save_status_reg = <link linkend="_tn__arch_8h_1a7078b776570ca67a51b89d2746bdb6f7">tn_arch_sr_save_int_dis</link>()</para>

<para>Disable interrupts and return previous value of status register, atomically. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1a727d4cdb7fb41f5fa5d15a676a4243b2">TN_INT_RESTORE</link>()   <link linkend="_tn__arch_8h_1aa755327bd8c4e4303c87c2b0cbed0f17">tn_arch_sr_restore</link>(tn_save_status_reg)</para>

<para>Restore previously saved status register. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1a3d03bcbee89062cd936b953843a9e381">TN_INT_IDIS_SAVE</link>()   <link linkend="_tn__arch__example_8h_1a213d605c9ff557fee2fe376e63cb559b">TN_INT_DIS_SAVE</link>()</para>

<para>The same as <computeroutput><link linkend="_tn__arch__example_8h_1a213d605c9ff557fee2fe376e63cb559b">TN_INT_DIS_SAVE()</link></computeroutput> but for using in ISR. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1a256d532ba3fa1a0762d54e7933921206">TN_INT_IRESTORE</link>()   <link linkend="_tn__arch__example_8h_1a727d4cdb7fb41f5fa5d15a676a4243b2">TN_INT_RESTORE</link>()</para>

<para>The same as <computeroutput><link linkend="_tn__arch__example_8h_1a727d4cdb7fb41f5fa5d15a676a4243b2">TN_INT_RESTORE()</link></computeroutput> but for using in ISR. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__arch__example_8h_1a553f27305c21f230818a2329effb5bcc"/>#define <link linkend="_tn__arch__example_8h_1a553f27305c21f230818a2329effb5bcc">TN_IS_INT_DISABLED</link>()   ((__builtin_mfc0(12, 0) &amp; 1) == 0)</para>

<para>Returns nonzero if interrupts are disabled, zero otherwise. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__arch__example_8h_1ab0de88929634e7e719a7a50b9f5b3f5f"/>#define <link linkend="_tn__arch__example_8h_1ab0de88929634e7e719a7a50b9f5b3f5f">_TN_CONTEXT_SWITCH_IPEND_IF_NEEDED</link>()   _tn_context_switch_pend_if_needed()</para>

<para>Pend context switch from interrupt. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1af1305db9e9f6a4eb96957c3194f5e02f">_TN_SIZE_BYTES_TO_UWORDS</link>(size_in_bytes)   ((size_in_bytes) &gt;&gt; 2)</para>

<para>Converts size in bytes to size in <computeroutput>#TN_UWord</computeroutput>. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1ad7d8039ee539dd492556f83a7a27aba6">_TN_INLINE</link>   inline</para>

<para>If compiler does not conform to c99 standard, there&apos;s no inline keyword. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__arch__example_8h_1a39b8c7b5ae653ec71be6f5a821eec3f6"/>#define <link linkend="_tn__arch__example_8h_1a39b8c7b5ae653ec71be6f5a821eec3f6">_TN_STATIC_INLINE</link>   static <link linkend="_tn__arch__example_8h_1ad7d8039ee539dd492556f83a7a27aba6">_TN_INLINE</link></para>

<para>For some compilers, order of these qualifiers matters (at least when _TN_INLINE expands to some compiler-specific forced inline) </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__example_8h_1a5b7a7de42a2672517fa626d2b15de142">_TN_VOLATILE_WORKAROUND</link>   /* nothing */</para>

<para>Sometimes compilers are buggy in high-optimization modes, and these bugs are often could be worked around by adding the <computeroutput>volatile</computeroutput> keyword. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef unsigned int <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link></para>

<para>Unsigned integer type whose size is equal to the size of CPU register. </para>
</listitem>
            <listitem><para>typedef unsigned int <link linkend="_tn__arch__example_8h_1a8db91f8ae305eb6e2bf1f1866c3caf74">TN_UIntPtr</link></para>

<para>Unsigned integer type that is able to store pointers. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_tn__arch__example_8h_1ab25ff526f86c290ce100816c5078b7b8"/>    <section>
    <title>_TN_FFS</title>
<indexterm><primary>_TN_FFS</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>_TN_FFS</secondary></indexterm>
<para><computeroutput>#define _TN_FFS( x)   (32 - __builtin_clz((x) &amp; (0 - (x))))</computeroutput></para><para>

<para>FFS - find first set bit. </para>
</para>

<para>Used in <computeroutput>_find_next_task_to_run()</computeroutput> function. Say, for <computeroutput>0xa8</computeroutput> it should return <computeroutput>3</computeroutput>.</para>

<para>May be not defined: in this case, naive algorithm will be used. </para>
<para>
Definition at line 53 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1ac355ce66c30fd8e505a71e6170913121"/>    <section>
    <title>_TN_FATAL_ERRORF</title>
<indexterm><primary>_TN_FATAL_ERRORF</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>_TN_FATAL_ERRORF</secondary></indexterm>
<para><computeroutput>#define _TN_FATAL_ERRORF( error_msg,  ...)   {__asm__ volatile(&quot; sdbbp 0&quot;); __asm__ volatile (&quot;nop&quot;);}</computeroutput></para><para>

<para>Used by the kernel as a signal that something really bad happened. </para>
</para>

<para>Indicates TNeo bugs as well as illegal kernel usage, e.g. sleeping in the idle task callback or build-time configuration mismatch (see <computeroutput>#TN_CHECK_BUILD_CFG</computeroutput> for details on the last one)</para>

<para>Typically, set to assembler instruction that causes debugger to halt. </para>
<para>
Definition at line 63 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1ae245dddb19cd7c12b7038a62d576fafa"/>    <section>
    <title>TN_ARCH_STK_ATTR_BEFORE</title>
<indexterm><primary>TN_ARCH_STK_ATTR_BEFORE</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>TN_ARCH_STK_ATTR_BEFORE</secondary></indexterm>
<para><computeroutput>#define TN_ARCH_STK_ATTR_BEFORE</computeroutput></para><para>

<para>Compiler-specific attribute that should be placed <emphasis role="bold">before</emphasis> declaration of array used for stack. </para>
</para>

<para>It is needed because there are often additional restrictions applied to alignment of stack, so, to meet them, stack arrays need to be declared with these macros.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_tn__arch__example_8h_1ab082613959b539182b8b47bc87d18d6a">TN_ARCH_STK_ATTR_AFTER</link> </para>
</formalpara>
</para>
<para>
Definition at line 77 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1ab082613959b539182b8b47bc87d18d6a"/>    <section>
    <title>TN_ARCH_STK_ATTR_AFTER</title>
<indexterm><primary>TN_ARCH_STK_ATTR_AFTER</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>TN_ARCH_STK_ATTR_AFTER</secondary></indexterm>
<para><computeroutput>#define TN_ARCH_STK_ATTR_AFTER   __attribute__((aligned(0x8)))</computeroutput></para><para>

<para>Compiler-specific attribute that should be placed <emphasis role="bold">after</emphasis> declaration of array used for stack. </para>
</para>

<para>It is needed because there are often additional restrictions applied to alignment of stack, so, to meet them, stack arrays need to be declared with these macros.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_tn__arch__example_8h_1ae245dddb19cd7c12b7038a62d576fafa">TN_ARCH_STK_ATTR_BEFORE</link> </para>
</formalpara>
</para>
<para>
Definition at line 88 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1a9809516063a01ca2c2f5f009294839d3"/>    <section>
    <title>TN_PRIORITIES_MAX_CNT</title>
<indexterm><primary>TN_PRIORITIES_MAX_CNT</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>TN_PRIORITIES_MAX_CNT</secondary></indexterm>
<para><computeroutput>#define TN_PRIORITIES_MAX_CNT   <link linkend="_tn__arch__example_8h_1a9f340cc02023c595904228372b9e7d12">TN_INT_WIDTH</link></computeroutput></para><para>

<para>Maximum number of priorities available, this value usually matches <computeroutput>#TN_INT_WIDTH</computeroutput>. </para>
</para>

<para><formalpara><title>See also</title>

<para><link linkend="_tn__cfg__default_8h_1aad74a059c61567c68a1e9067ab47a256">TN_PRIORITIES_CNT</link> </para>
</formalpara>
</para>
<para>
Definition at line 120 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1a58899c98640384b8a2cf7f9ba6f53a23"/>    <section>
    <title>TN_INTSAVE_DATA</title>
<indexterm><primary>TN_INTSAVE_DATA</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>TN_INTSAVE_DATA</secondary></indexterm>
<para><computeroutput>#define TN_INTSAVE_DATA   int tn_save_status_reg = 0;</computeroutput></para><para>

<para>Declares variable that is used by macros <computeroutput><link linkend="_tn__arch__example_8h_1a213d605c9ff557fee2fe376e63cb559b">TN_INT_DIS_SAVE()</link></computeroutput> and <computeroutput><link linkend="_tn__arch__example_8h_1a727d4cdb7fb41f5fa5d15a676a4243b2">TN_INT_RESTORE()</link></computeroutput> for storing status register value. </para>
</para>

<para><formalpara><title>See also</title>

<para><computeroutput><link linkend="_tn__arch__example_8h_1a213d605c9ff557fee2fe376e63cb559b">TN_INT_DIS_SAVE()</link></computeroutput> </para>

<para><computeroutput><link linkend="_tn__arch__example_8h_1a727d4cdb7fb41f5fa5d15a676a4243b2">TN_INT_RESTORE()</link></computeroutput> </para>
</formalpara>
</para>
<para>
Definition at line 143 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1aa80a572e7b4874a2b281c6718f31809c"/>    <section>
    <title>TN_INTSAVE_DATA_INT</title>
<indexterm><primary>TN_INTSAVE_DATA_INT</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>TN_INTSAVE_DATA_INT</secondary></indexterm>
<para><computeroutput>#define TN_INTSAVE_DATA_INT   <link linkend="_tn__arch__example_8h_1a58899c98640384b8a2cf7f9ba6f53a23">TN_INTSAVE_DATA</link></computeroutput></para><para>

<para>The same as <computeroutput>#TN_INTSAVE_DATA</computeroutput> but for using in ISR together with <computeroutput><link linkend="_tn__arch__example_8h_1a3d03bcbee89062cd936b953843a9e381">TN_INT_IDIS_SAVE()</link></computeroutput>, <computeroutput><link linkend="_tn__arch__example_8h_1a256d532ba3fa1a0762d54e7933921206">TN_INT_IRESTORE()</link></computeroutput>. </para>
</para>

<para><formalpara><title>See also</title>

<para><computeroutput><link linkend="_tn__arch__example_8h_1a3d03bcbee89062cd936b953843a9e381">TN_INT_IDIS_SAVE()</link></computeroutput> </para>

<para><computeroutput><link linkend="_tn__arch__example_8h_1a256d532ba3fa1a0762d54e7933921206">TN_INT_IRESTORE()</link></computeroutput> </para>
</formalpara>
</para>
<para>
Definition at line 152 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1a213d605c9ff557fee2fe376e63cb559b"/>    <section>
    <title>TN_INT_DIS_SAVE</title>
<indexterm><primary>TN_INT_DIS_SAVE</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>TN_INT_DIS_SAVE</secondary></indexterm>
<para><computeroutput>#define TN_INT_DIS_SAVE( )   tn_save_status_reg = <link linkend="_tn__arch_8h_1a7078b776570ca67a51b89d2746bdb6f7">tn_arch_sr_save_int_dis</link>()</computeroutput></para><para>

<para>Disable interrupts and return previous value of status register, atomically. </para>
</para>

<para>Similar <computeroutput><link linkend="_tn__arch_8h_1a7078b776570ca67a51b89d2746bdb6f7">tn_arch_sr_save_int_dis()</link></computeroutput>, but implemented as a macro, so it is potentially faster.</para>

<para>Uses <computeroutput>#TN_INTSAVE_DATA</computeroutput> as a temporary storage.</para>

<para><formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__arch__example_8h_1a58899c98640384b8a2cf7f9ba6f53a23">TN_INTSAVE_DATA</link></computeroutput> </para>

<para><computeroutput><link linkend="_tn__arch_8h_1a7078b776570ca67a51b89d2746bdb6f7">tn_arch_sr_save_int_dis()</link></computeroutput> </para>
</formalpara>
</para>
<para>
Definition at line 164 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1a727d4cdb7fb41f5fa5d15a676a4243b2"/>    <section>
    <title>TN_INT_RESTORE</title>
<indexterm><primary>TN_INT_RESTORE</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>TN_INT_RESTORE</secondary></indexterm>
<para><computeroutput>#define TN_INT_RESTORE( )   <link linkend="_tn__arch_8h_1aa755327bd8c4e4303c87c2b0cbed0f17">tn_arch_sr_restore</link>(tn_save_status_reg)</computeroutput></para><para>

<para>Restore previously saved status register. </para>
</para>

<para>Similar to <computeroutput><link linkend="_tn__arch_8h_1aa755327bd8c4e4303c87c2b0cbed0f17">tn_arch_sr_restore()</link></computeroutput>, but implemented as a macro, so it is potentially faster.</para>

<para>Uses <computeroutput>#TN_INTSAVE_DATA</computeroutput> as a temporary storage.</para>

<para><formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__arch__example_8h_1a58899c98640384b8a2cf7f9ba6f53a23">TN_INTSAVE_DATA</link></computeroutput> </para>

<para><computeroutput><link linkend="_tn__arch_8h_1a7078b776570ca67a51b89d2746bdb6f7">tn_arch_sr_save_int_dis()</link></computeroutput> </para>
</formalpara>
</para>
<para>
Definition at line 176 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1a3d03bcbee89062cd936b953843a9e381"/>    <section>
    <title>TN_INT_IDIS_SAVE</title>
<indexterm><primary>TN_INT_IDIS_SAVE</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>TN_INT_IDIS_SAVE</secondary></indexterm>
<para><computeroutput>#define TN_INT_IDIS_SAVE( )   <link linkend="_tn__arch__example_8h_1a213d605c9ff557fee2fe376e63cb559b">TN_INT_DIS_SAVE</link>()</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__arch__example_8h_1a213d605c9ff557fee2fe376e63cb559b">TN_INT_DIS_SAVE()</link></computeroutput> but for using in ISR. </para>
</para>

<para>Uses <computeroutput>#TN_INTSAVE_DATA_INT</computeroutput> as a temporary storage.</para>

<para><formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__arch__example_8h_1aa80a572e7b4874a2b281c6718f31809c">TN_INTSAVE_DATA_INT</link></computeroutput> </para>
</formalpara>
</para>
<para>
Definition at line 185 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1a256d532ba3fa1a0762d54e7933921206"/>    <section>
    <title>TN_INT_IRESTORE</title>
<indexterm><primary>TN_INT_IRESTORE</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>TN_INT_IRESTORE</secondary></indexterm>
<para><computeroutput>#define TN_INT_IRESTORE( )   <link linkend="_tn__arch__example_8h_1a727d4cdb7fb41f5fa5d15a676a4243b2">TN_INT_RESTORE</link>()</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__arch__example_8h_1a727d4cdb7fb41f5fa5d15a676a4243b2">TN_INT_RESTORE()</link></computeroutput> but for using in ISR. </para>
</para>

<para>Uses <computeroutput>#TN_INTSAVE_DATA_INT</computeroutput> as a temporary storage.</para>

<para><formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__arch__example_8h_1aa80a572e7b4874a2b281c6718f31809c">TN_INTSAVE_DATA_INT</link></computeroutput> </para>
</formalpara>
</para>
<para>
Definition at line 194 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1af1305db9e9f6a4eb96957c3194f5e02f"/>    <section>
    <title>_TN_SIZE_BYTES_TO_UWORDS</title>
<indexterm><primary>_TN_SIZE_BYTES_TO_UWORDS</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>_TN_SIZE_BYTES_TO_UWORDS</secondary></indexterm>
<para><computeroutput>#define _TN_SIZE_BYTES_TO_UWORDS( size_in_bytes)   ((size_in_bytes) &gt;&gt; 2)</computeroutput></para><para>

<para>Converts size in bytes to size in <computeroutput>#TN_UWord</computeroutput>. </para>
</para>

<para>For 32-bit platforms, we should shift it by 2 bit to the right; for 16-bit platforms, we should shift it by 1 bit to the right. </para>
<para>
Definition at line 213 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1ad7d8039ee539dd492556f83a7a27aba6"/>    <section>
    <title>_TN_INLINE</title>
<indexterm><primary>_TN_INLINE</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>_TN_INLINE</secondary></indexterm>
<para><computeroutput>#define _TN_INLINE   inline</computeroutput></para><para>

<para>If compiler does not conform to c99 standard, there&apos;s no inline keyword. </para>
</para>

<para>So, there&apos;s a special macro for that. </para>
<para>
Definition at line 223 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1a5b7a7de42a2672517fa626d2b15de142"/>    <section>
    <title>_TN_VOLATILE_WORKAROUND</title>
<indexterm><primary>_TN_VOLATILE_WORKAROUND</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>_TN_VOLATILE_WORKAROUND</secondary></indexterm>
<para><computeroutput>#define _TN_VOLATILE_WORKAROUND   /* nothing */</computeroutput></para><para>

<para>Sometimes compilers are buggy in high-optimization modes, and these bugs are often could be worked around by adding the <computeroutput>volatile</computeroutput> keyword. </para>
</para>

<para>It is compiler-dependent, so, there&apos;s a special macro for that. </para>
<para>
Definition at line 238 of file tn_arch_example.h.</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4"/>    <section>
    <title>TN_UWord</title>
<indexterm><primary>TN_UWord</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>TN_UWord</secondary></indexterm>
<para><computeroutput>typedef unsigned int <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link></computeroutput></para><para>

<para>Unsigned integer type whose size is equal to the size of CPU register. </para>
</para>

<para>Typically it&apos;s plain <computeroutput>unsigned int</computeroutput>. </para>
<para>
Definition at line 105 of file tn_arch_example.h.</para>
    </section><anchor xml:id="_tn__arch__example_8h_1a8db91f8ae305eb6e2bf1f1866c3caf74"/>    <section>
    <title>TN_UIntPtr</title>
<indexterm><primary>TN_UIntPtr</primary><secondary>tn_arch_example.h</secondary></indexterm>
<indexterm><primary>tn_arch_example.h</primary><secondary>TN_UIntPtr</secondary></indexterm>
<para><computeroutput>typedef unsigned int <link linkend="_tn__arch__example_8h_1a8db91f8ae305eb6e2bf1f1866c3caf74">TN_UIntPtr</link></computeroutput></para><para>

<para>Unsigned integer type that is able to store pointers. </para>
</para>

<para>We need it because some platforms don&apos;t define <computeroutput>uintptr_t</computeroutput>. Typically it&apos;s <computeroutput>unsigned int</computeroutput>. </para>
<para>
Definition at line 112 of file tn_arch_example.h.</para>
</section>
</section>
</section>
