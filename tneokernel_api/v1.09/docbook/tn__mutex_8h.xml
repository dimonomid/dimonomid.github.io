<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tn__mutex_8h">
<title>core/tn_mutex.h File Reference</title>
<indexterm><primary>core/tn_mutex.h</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>A mutex is an object used to protect shared resources.</para>

<para>There is a lot of confusion about the differences between semaphores and mutexes, so, it&apos;s highly recommended that you read a small article by Michael Barr: <link xlink:href="http://goo.gl/YprPBW">Mutexes and Semaphores Demystified</link>.</para>

<para>Very short:</para>

<para>While a mutex is seemingly similar to a semaphore with a maximum count of <computeroutput>1</computeroutput> (the so-called binary semaphore), their usage is very different: the purpose of mutex is to protect a shared resource. A locked mutex is &quot;owned&quot; by the task that locked it, and only that same task may unlock it. This ownership allows you to implement algorithms to prevent priority inversion. So, a mutex is a <emphasis>locking mechanism</emphasis>.</para>

<para>A semaphore, on the other hand, is a <emphasis>signaling mechanism</emphasis>. It&apos;s quite legal and encouraged for a semaphore to be acquired in task A, and then signaled from task B or even from an ISR. It may be used in situations like &quot;producer
and consumer&quot;, etc.</para>

<para>In addition to the article mentioned above, you may want to look at the <link xlink:href="http://goo.gl/ZBReHK">related question on stackoverflow.com</link>.</para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
</para>

<para>Mutex features in TNeo:</para>

<para><itemizedlist>
<listitem>
<para>Recursive locking is supported (if option <computeroutput>#TN_MUTEX_REC</computeroutput> is non-zero);</para>
</listitem><listitem>
<para>Deadlock detection (if option <computeroutput>#TN_MUTEX_DEADLOCK_DETECT</computeroutput> is non-zero);</para>
</listitem><listitem>
<para>Two protocols available to avoid unbounded priority inversion: priority inheritance and priority ceiling.</para>
</listitem></itemizedlist>
</para>

<para>A discussion about the strengths and weaknesses of each protocol as well as the priority inversions problem is beyond the scope of this document.</para>

<para>The priority inheritance protocol solves the priority inversion problem, but doesn&apos;t prevent deadlocks. However, the kernel can notify you if a deadlock has occurred (see <computeroutput>#TN_MUTEX_DEADLOCK_DETECT</computeroutput>).</para>

<para>The priority ceiling protocol prevents deadlocks and chained blocking but it is slower than the priority inheritance protocol.</para>

<para><formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__cfg__default_8h_1a7ce674edab5345c4b8d2ec251eea18eb">TN_USE_MUTEXES</link></computeroutput> </para>
</formalpara>
</para>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structTN__Mutex">TN_Mutex</link></para>

<para>Mutex. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_tn__mutex_8h_1a11357f7bb31a3b380cbe94e0913a5b40">TN_MutexProtocol</link> { <link linkend="_tn__mutex_8h_1a11357f7bb31a3b380cbe94e0913a5b40a8edebcfa37593a4d2d541954ce3aea67">TN_MUTEX_PROT_CEILING</link> = 1, 
<link linkend="_tn__mutex_8h_1a11357f7bb31a3b380cbe94e0913a5b40ab3f7543f3177c575342d345010b58fa8">TN_MUTEX_PROT_INHERIT</link> = 2
 }</para>

<para>Mutex protocol for avoid priority inversion. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__mutex_8h_1a5ad69fd04d977538ac0d2c2a915e73ca">tn_mutex_create</link> (struct <link linkend="_structTN__Mutex">TN_Mutex</link> *mutex, enum <link linkend="_tn__mutex_8h_1a11357f7bb31a3b380cbe94e0913a5b40">TN_MutexProtocol</link> protocol, int ceil_priority)</para>

<para>Construct the mutex. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__mutex_8h_1a9c935ae470f1d36f8d88c254a4d513e4">tn_mutex_delete</link> (struct <link linkend="_structTN__Mutex">TN_Mutex</link> *mutex)</para>

<para>Destruct mutex. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__mutex_8h_1af52ee42e086af12f699ebfccd057aade">tn_mutex_lock</link> (struct <link linkend="_structTN__Mutex">TN_Mutex</link> *mutex, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</para>

<para>Lock mutex. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__mutex_8h_1ac5714615cc3623cc3efd404e3ad47787">tn_mutex_lock_polling</link> (struct <link linkend="_structTN__Mutex">TN_Mutex</link> *mutex)</para>

<para>The same as <computeroutput><link linkend="_tn__mutex_8h_1af52ee42e086af12f699ebfccd057aade">tn_mutex_lock()</link></computeroutput> with zero timeout. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__mutex_8h_1ae0a23d98c287786f8115020036a1fb72">tn_mutex_unlock</link> (struct <link linkend="_structTN__Mutex">TN_Mutex</link> *mutex)</para>

<para>Unlock mutex. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_tn__mutex_8h_1a11357f7bb31a3b380cbe94e0913a5b40"/>    <section>
    <title>TN_MutexProtocol</title>
<indexterm><primary>TN_MutexProtocol</primary><secondary>tn_mutex.h</secondary></indexterm>
<indexterm><primary>tn_mutex.h</primary><secondary>TN_MutexProtocol</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__mutex_8h_1a11357f7bb31a3b380cbe94e0913a5b40">TN_MutexProtocol</link></computeroutput></para><para>

<para>Mutex protocol for avoid priority inversion. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>TN_MUTEX_PROT_CEILING</primary><secondary>tn_mutex.h</secondary></indexterm>
<indexterm><primary>tn_mutex.h</primary><secondary>TN_MUTEX_PROT_CEILING</secondary></indexterm>
<anchor xml:id="_tn__mutex_8h_1a11357f7bb31a3b380cbe94e0913a5b40a8edebcfa37593a4d2d541954ce3aea67"/>TN_MUTEX_PROT_CEILING</entry><entry>
<para>Mutex uses priority ceiling protocol. </para>
</entry></row><row><entry><indexterm><primary>TN_MUTEX_PROT_INHERIT</primary><secondary>tn_mutex.h</secondary></indexterm>
<indexterm><primary>tn_mutex.h</primary><secondary>TN_MUTEX_PROT_INHERIT</secondary></indexterm>
<anchor xml:id="_tn__mutex_8h_1a11357f7bb31a3b380cbe94e0913a5b40ab3f7543f3177c575342d345010b58fa8"/>TN_MUTEX_PROT_INHERIT</entry><entry>
<para>Mutex uses priority inheritance protocol. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 109 of file tn_mutex.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_tn__mutex_8h_1a5ad69fd04d977538ac0d2c2a915e73ca"/>    <section>
    <title>tn_mutex_create()</title>
<indexterm><primary>tn_mutex_create</primary><secondary>tn_mutex.h</secondary></indexterm>
<indexterm><primary>tn_mutex.h</primary><secondary>tn_mutex_create</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_mutex_create (struct <link linkend="_structTN__Mutex">TN_Mutex</link> * mutex, enum <link linkend="_tn__mutex_8h_1a11357f7bb31a3b380cbe94e0913a5b40">TN_MutexProtocol</link> protocol, int ceil_priority)</computeroutput></para><para>

<para>Construct the mutex. </para>
</para>

<para>The field <computeroutput>id_mutex</computeroutput> should not contain <computeroutput>#TN_ID_MUTEX</computeroutput>, otherwise, <computeroutput>#TN_RC_WPARAM</computeroutput> is returned.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>mutex</entry>
                                <entry>
<para>Pointer to already allocated <computeroutput>struct <link linkend="_structTN__Mutex">TN_Mutex</link></computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>protocol</entry>
                                <entry>
<para>Mutex protocol: priority ceiling or priority inheritance. See <computeroutput>enum #TN_MutexProtocol</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>ceil_priority</entry>
                                <entry>
<para>Used if only <computeroutput>protocol</computeroutput> is <computeroutput>#TN_MUTEX_PROT_CEILING</computeroutput>: maximum priority of the task that may lock the mutex.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>
<literallayout>&#160;&#xa;</literallayout>
<itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if mutex was successfully created;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return code is available: <computeroutput>#TN_RC_WPARAM</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__mutex_8h_1a9c935ae470f1d36f8d88c254a4d513e4"/>    <section>
    <title>tn_mutex_delete()</title>
<indexterm><primary>tn_mutex_delete</primary><secondary>tn_mutex.h</secondary></indexterm>
<indexterm><primary>tn_mutex.h</primary><secondary>tn_mutex_delete</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_mutex_delete (struct <link linkend="_structTN__Mutex">TN_Mutex</link> * mutex)</computeroutput></para><para>

<para>Destruct mutex. </para>
</para>

<para>All tasks that wait for lock the mutex become runnable with <computeroutput>#TN_RC_DELETED</computeroutput> code returned.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>mutex</entry>
                                <entry>
<para>mutex to destruct</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if mutex was successfully destroyed;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__mutex_8h_1af52ee42e086af12f699ebfccd057aade"/>    <section>
    <title>tn_mutex_lock()</title>
<indexterm><primary>tn_mutex_lock</primary><secondary>tn_mutex.h</secondary></indexterm>
<indexterm><primary>tn_mutex.h</primary><secondary>tn_mutex_lock</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_mutex_lock (struct <link linkend="_structTN__Mutex">TN_Mutex</link> * mutex, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</computeroutput></para><para>

<para>Lock mutex. </para>
</para>

<para><itemizedlist>
<listitem>
<para>If the mutex is not locked, function immediately locks the mutex and returns <computeroutput>#TN_RC_OK</computeroutput>.</para>
</listitem><listitem>
<para>If the mutex is already locked by the same task, lock count is merely incremented and <computeroutput>#TN_RC_OK</computeroutput> is returned immediately.</para>
</listitem><listitem>
<para>If the mutex is locked by different task, behavior depends on <computeroutput>timeout</computeroutput> value: refer to <computeroutput>#TN_TickCnt</computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>      <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>mutex</entry>
                                <entry>
<para>mutex to lock </para>
</entry>
                            </row>
                            <row>
                                <entry>timeout</entry>
                                <entry>
<para>refer to <computeroutput>#TN_TickCnt</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if mutex is successfully locked or if lock count was merely incremented (this is possible if recursive locking is enabled, see <computeroutput>#TN_MUTEX_REC</computeroutput>)</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_ILLEGAL_USE</computeroutput><itemizedlist>
<listitem>
<para>if mutex protocol is <computeroutput>#TN_MUTEX_PROT_CEILING</computeroutput> and calling task&apos;s priority is higher than <computeroutput>ceil_priority</computeroutput> given to <computeroutput><link linkend="_tn__mutex_8h_1a5ad69fd04d977538ac0d2c2a915e73ca">tn_mutex_create()</link></computeroutput></para>
</listitem><listitem>
<para>if recursive locking is disabled (see <computeroutput>#TN_MUTEX_REC</computeroutput>) and the mutex is already locked by calling task</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para>Other possible return codes depend on <computeroutput>timeout</computeroutput> value, refer to <computeroutput>#TN_TickCnt</computeroutput></para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__mutex_8h_1a11357f7bb31a3b380cbe94e0913a5b40">TN_MutexProtocol</link></computeroutput> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__mutex_8h_1ac5714615cc3623cc3efd404e3ad47787"/>    <section>
    <title>tn_mutex_lock_polling()</title>
<indexterm><primary>tn_mutex_lock_polling</primary><secondary>tn_mutex.h</secondary></indexterm>
<indexterm><primary>tn_mutex.h</primary><secondary>tn_mutex_lock_polling</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_mutex_lock_polling (struct <link linkend="_structTN__Mutex">TN_Mutex</link> * mutex)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__mutex_8h_1af52ee42e086af12f699ebfccd057aade">tn_mutex_lock()</link></computeroutput> with zero timeout. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__mutex_8h_1ae0a23d98c287786f8115020036a1fb72"/>    <section>
    <title>tn_mutex_unlock()</title>
<indexterm><primary>tn_mutex_unlock</primary><secondary>tn_mutex.h</secondary></indexterm>
<indexterm><primary>tn_mutex.h</primary><secondary>tn_mutex_unlock</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_mutex_unlock (struct <link linkend="_structTN__Mutex">TN_Mutex</link> * mutex)</computeroutput></para><para>

<para>Unlock mutex. </para>
</para>

<para><itemizedlist>
<listitem>
<para>If mutex is not locked or locked by different task, <computeroutput>#TN_RC_ILLEGAL_USE</computeroutput> is returned.</para>
</listitem><listitem>
<para>If mutex is already locked by calling task, lock count is decremented. Now, if lock count is zero, mutex gets unlocked (and if there are task(s) waiting for mutex, the first one from the wait queue locks the mutex). Otherwise, mutex remains locked with lock count decremented and function returns <computeroutput>#TN_RC_OK</computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para><formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if mutex is unlocked of if lock count was merely decremented (this is possible if recursive locking is enabled, see <computeroutput>#TN_MUTEX_REC</computeroutput>)</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_ILLEGAL_USE</computeroutput> if mutex is either not locked or locked by different task</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
</section>
</section>
</section>
