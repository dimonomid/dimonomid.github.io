<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tn__dqueue_8h">
<title>core/tn_dqueue.h File Reference</title>
<indexterm><primary>core/tn_dqueue.h</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>A data queue is a FIFO that stores pointer (of type <computeroutput>void *</computeroutput>) in each cell, called (in uITRON style) a data element. A data queue also has an associated wait queue each for sending (<computeroutput>wait_send</computeroutput> queue) and for receiving (<computeroutput>wait_receive</computeroutput> queue). A task that sends a data element tries to put the data element into the FIFO. If there is no space left in the FIFO, the task is switched to the waiting state and placed in the data queue&apos;s <computeroutput>wait_send</computeroutput> queue until space appears (another task gets a data element from the data queue).</para>

<para>A task that receives a data element tries to get a data element from the FIFO. If the FIFO is empty (there is no data in the data queue), the task is switched to the waiting state and placed in the data queue&apos;s <computeroutput>wait_receive</computeroutput> queue until data element arrive (another task puts some data element into the data queue). To use a data queue just for the synchronous message passing, set size of the FIFO to 0. The data element to be sent and received can be interpreted as a pointer or an integer and may have value 0 (<computeroutput>TN_NULL</computeroutput>).</para>

<para>For the useful pattern on how to use queue together with <link linkend="_tn__fmem_8h">fixed memory pool</link>, refer to the example: <computeroutput>examples/queue</computeroutput>. Be sure to examine the readme there.</para>

<para>TNeo offers a way to wait for a message from multiple queues in just a single call, refer to the section <link linkend="_tn__eventgrp_8h_1eventgrp_connect">Connecting an event group to other system objects</link> for details. Related queue services:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput><link linkend="_tn__dqueue_8h_1ad5d94cf59bebcbf245249896751bd902">tn_queue_eventgrp_connect()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput><link linkend="_tn__dqueue_8h_1ac57589cd905f39a6c4a6c8279f073a4a">tn_queue_eventgrp_disconnect()</link></computeroutput></para>
</listitem></itemizedlist>
</para>

<para>There is an example project available that demonstrates event group connection technique: <computeroutput>examples/queue_eventgrp_conn</computeroutput>. Be sure to examine the readme there. </para>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structTN__DQueue">TN_DQueue</link></para>

<para>Structure representing data queue object. </para>
</listitem>
            <listitem><para>struct <link linkend="_structTN__DQueueTaskWait">TN_DQueueTaskWait</link></para>

<para>DQueue-specific fields related to waiting task, to be included in struct <link linkend="_structTN__Task">TN_Task</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__dqueue_8h_1a01cb0256d0a7a5010bbe8cb14dbd5cbb">tn_queue_create</link> (struct <link linkend="_structTN__DQueue">TN_DQueue</link> *dque, void **data_fifo, int items_cnt)</para>

<para>Construct data queue. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__dqueue_8h_1a22fb38f88c9184fee615f47dca12e85a">tn_queue_delete</link> (struct <link linkend="_structTN__DQueue">TN_DQueue</link> *dque)</para>

<para>Destruct data queue. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__dqueue_8h_1a043dd3133a57489d7d10f53be6939957">tn_queue_send</link> (struct <link linkend="_structTN__DQueue">TN_DQueue</link> *dque, void *p_data, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</para>

<para>Send the data element specified by the <computeroutput>p_data</computeroutput> to the data queue specified by the <computeroutput>dque</computeroutput>. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__dqueue_8h_1af60c61c12ed90f4bcc7d13ca4da8562b">tn_queue_send_polling</link> (struct <link linkend="_structTN__DQueue">TN_DQueue</link> *dque, void *p_data)</para>

<para>The same as <computeroutput><link linkend="_tn__dqueue_8h_1a043dd3133a57489d7d10f53be6939957">tn_queue_send()</link></computeroutput> with zero timeout. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__dqueue_8h_1ac059f15f07625ca25e4aac5790cce1ea">tn_queue_isend_polling</link> (struct <link linkend="_structTN__DQueue">TN_DQueue</link> *dque, void *p_data)</para>

<para>The same as <computeroutput><link linkend="_tn__dqueue_8h_1a043dd3133a57489d7d10f53be6939957">tn_queue_send()</link></computeroutput> with zero timeout, but for using in the ISR. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__dqueue_8h_1ab47ed49af7dffc5a71eaabd25422d0e4">tn_queue_receive</link> (struct <link linkend="_structTN__DQueue">TN_DQueue</link> *dque, void **pp_data, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</para>

<para>Receive the data element from the data queue specified by the <computeroutput>dque</computeroutput> and place it into the address specified by the <computeroutput>pp_data</computeroutput>. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__dqueue_8h_1a5759d8b6b487bbae486d766f88088247">tn_queue_receive_polling</link> (struct <link linkend="_structTN__DQueue">TN_DQueue</link> *dque, void **pp_data)</para>

<para>The same as <computeroutput><link linkend="_tn__dqueue_8h_1ab47ed49af7dffc5a71eaabd25422d0e4">tn_queue_receive()</link></computeroutput> with zero timeout. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__dqueue_8h_1a22bf1175e35229e5358427c20d7f91e9">tn_queue_ireceive_polling</link> (struct <link linkend="_structTN__DQueue">TN_DQueue</link> *dque, void **pp_data)</para>

<para>The same as <computeroutput><link linkend="_tn__dqueue_8h_1ab47ed49af7dffc5a71eaabd25422d0e4">tn_queue_receive()</link></computeroutput> with zero timeout, but for using in the ISR. </para>
</listitem>
            <listitem><para>int <link linkend="_tn__dqueue_8h_1af541f16598e13f980ddc2482e6af6044">tn_queue_free_items_cnt_get</link> (struct <link linkend="_structTN__DQueue">TN_DQueue</link> *dque)</para>

<para>Returns number of free items in the queue. </para>
</listitem>
            <listitem><para>int <link linkend="_tn__dqueue_8h_1aa17fd667cab2e4a41d9e89b8cba603cd">tn_queue_used_items_cnt_get</link> (struct <link linkend="_structTN__DQueue">TN_DQueue</link> *dque)</para>

<para>Returns number of used (non-free) items in the queue. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__dqueue_8h_1ad5d94cf59bebcbf245249896751bd902">tn_queue_eventgrp_connect</link> (struct <link linkend="_structTN__DQueue">TN_DQueue</link> *dque, struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> *eventgrp, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> pattern)</para>

<para>Connect an event group to the queue. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__dqueue_8h_1ac57589cd905f39a6c4a6c8279f073a4a">tn_queue_eventgrp_disconnect</link> (struct <link linkend="_structTN__DQueue">TN_DQueue</link> *dque)</para>

<para>Disconnect a connected event group from the queue. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_tn__dqueue_8h_1a01cb0256d0a7a5010bbe8cb14dbd5cbb"/>    <section>
    <title>tn_queue_create()</title>
<indexterm><primary>tn_queue_create</primary><secondary>tn_dqueue.h</secondary></indexterm>
<indexterm><primary>tn_dqueue.h</primary><secondary>tn_queue_create</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_queue_create (struct <link linkend="_structTN__DQueue">TN_DQueue</link> * dque, void ** data_fifo, int items_cnt)</computeroutput></para><para>

<para>Construct data queue. </para>
</para>

<para><computeroutput>id_dque</computeroutput> member should not contain <computeroutput>#TN_ID_DATAQUEUE</computeroutput>, otherwise, <computeroutput>#TN_RC_WPARAM</computeroutput> is returned.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dque</entry>
                                <entry>
<para>pointer to already allocated struct <link linkend="_structTN__DQueue">TN_DQueue</link>. </para>
</entry>
                            </row>
                            <row>
                                <entry>data_fifo</entry>
                                <entry>
<para>pointer to already allocated array of <computeroutput>void *</computeroutput> to store data queue items. Can be <computeroutput>#TN_NULL</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>items_cnt</entry>
                                <entry>
<para>capacity of queue (count of elements in the <computeroutput>data_fifo</computeroutput> array) Can be 0.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if queue was successfully created;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return code is available: <computeroutput>#TN_RC_WPARAM</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__dqueue_8h_1a22fb38f88c9184fee615f47dca12e85a"/>    <section>
    <title>tn_queue_delete()</title>
<indexterm><primary>tn_queue_delete</primary><secondary>tn_dqueue.h</secondary></indexterm>
<indexterm><primary>tn_dqueue.h</primary><secondary>tn_queue_delete</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_queue_delete (struct <link linkend="_structTN__DQueue">TN_DQueue</link> * dque)</computeroutput></para><para>

<para>Destruct data queue. </para>
</para>

<para>All tasks that wait for writing to or reading from the queue become runnable with <computeroutput>#TN_RC_DELETED</computeroutput> code returned.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dque</entry>
                                <entry>
<para>pointer to data queue to be deleted</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if queue was successfully deleted;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__dqueue_8h_1a043dd3133a57489d7d10f53be6939957"/>    <section>
    <title>tn_queue_send()</title>
<indexterm><primary>tn_queue_send</primary><secondary>tn_dqueue.h</secondary></indexterm>
<indexterm><primary>tn_dqueue.h</primary><secondary>tn_queue_send</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_queue_send (struct <link linkend="_structTN__DQueue">TN_DQueue</link> * dque, void * p_data, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</computeroutput></para><para>

<para>Send the data element specified by the <computeroutput>p_data</computeroutput> to the data queue specified by the <computeroutput>dque</computeroutput>. </para>
</para>

<para>If there are tasks in the data queue&apos;s <computeroutput>wait_receive</computeroutput> list already, the function releases the task from the head of the <computeroutput>wait_receive</computeroutput> list, makes this task runnable and transfers the parameter <computeroutput>p_data</computeroutput> to task&apos;s function, that caused it to wait.</para>

<para>If there are no tasks in the data queue&apos;s <computeroutput>wait_receive</computeroutput> list, parameter <computeroutput>p_data</computeroutput> is placed to the tail of data FIFO. If the data FIFO is full, behavior depends on the <computeroutput>timeout</computeroutput> value: refer to <computeroutput>#TN_TickCnt</computeroutput>.</para>

<para>      <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dque</entry>
                                <entry>
<para>pointer to data queue to send data to </para>
</entry>
                            </row>
                            <row>
                                <entry>p_data</entry>
                                <entry>
<para>value to send </para>
</entry>
                            </row>
                            <row>
                                <entry>timeout</entry>
                                <entry>
<para>refer to <computeroutput>#TN_TickCnt</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>
<literallayout>&#160;&#xa;</literallayout>
<itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if data was successfully sent;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>Other possible return codes depend on <computeroutput>timeout</computeroutput> value, refer to <computeroutput>#TN_TickCnt</computeroutput></para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link></computeroutput> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__dqueue_8h_1af60c61c12ed90f4bcc7d13ca4da8562b"/>    <section>
    <title>tn_queue_send_polling()</title>
<indexterm><primary>tn_queue_send_polling</primary><secondary>tn_dqueue.h</secondary></indexterm>
<indexterm><primary>tn_dqueue.h</primary><secondary>tn_queue_send_polling</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_queue_send_polling (struct <link linkend="_structTN__DQueue">TN_DQueue</link> * dque, void * p_data)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__dqueue_8h_1a043dd3133a57489d7d10f53be6939957">tn_queue_send()</link></computeroutput> with zero timeout. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__dqueue_8h_1ac059f15f07625ca25e4aac5790cce1ea"/>    <section>
    <title>tn_queue_isend_polling()</title>
<indexterm><primary>tn_queue_isend_polling</primary><secondary>tn_dqueue.h</secondary></indexterm>
<indexterm><primary>tn_dqueue.h</primary><secondary>tn_queue_isend_polling</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_queue_isend_polling (struct <link linkend="_structTN__DQueue">TN_DQueue</link> * dque, void * p_data)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__dqueue_8h_1a043dd3133a57489d7d10f53be6939957">tn_queue_send()</link></computeroutput> with zero timeout, but for using in the ISR. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__dqueue_8h_1ab47ed49af7dffc5a71eaabd25422d0e4"/>    <section>
    <title>tn_queue_receive()</title>
<indexterm><primary>tn_queue_receive</primary><secondary>tn_dqueue.h</secondary></indexterm>
<indexterm><primary>tn_dqueue.h</primary><secondary>tn_queue_receive</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_queue_receive (struct <link linkend="_structTN__DQueue">TN_DQueue</link> * dque, void ** pp_data, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</computeroutput></para><para>

<para>Receive the data element from the data queue specified by the <computeroutput>dque</computeroutput> and place it into the address specified by the <computeroutput>pp_data</computeroutput>. </para>
</para>

<para>If the FIFO already has data, function removes an entry from the end of the data queue FIFO and returns it into the <computeroutput>pp_data</computeroutput> function parameter.</para>

<para>If there are task(s) in the data queue&apos;s <computeroutput>wait_send</computeroutput> list, first one gets removed from the head of <computeroutput>wait_send</computeroutput> list, becomes runnable and puts the data entry, stored in this task, to the tail of data FIFO. If there are no entries in the data FIFO and there are no tasks in the wait_send list, behavior depends on the <computeroutput>timeout</computeroutput> value: refer to <computeroutput>#TN_TickCnt</computeroutput>.</para>

<para>      <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dque</entry>
                                <entry>
<para>pointer to data queue to receive data from </para>
</entry>
                            </row>
                            <row>
                                <entry>pp_data</entry>
                                <entry>
<para>pointer to location to store the value </para>
</entry>
                            </row>
                            <row>
                                <entry>timeout</entry>
                                <entry>
<para>refer to <computeroutput>#TN_TickCnt</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>
<literallayout>&#160;&#xa;</literallayout>
<itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if data was successfully received;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>Other possible return codes depend on <computeroutput>timeout</computeroutput> value, refer to <computeroutput>#TN_TickCnt</computeroutput></para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link></computeroutput> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__dqueue_8h_1a5759d8b6b487bbae486d766f88088247"/>    <section>
    <title>tn_queue_receive_polling()</title>
<indexterm><primary>tn_queue_receive_polling</primary><secondary>tn_dqueue.h</secondary></indexterm>
<indexterm><primary>tn_dqueue.h</primary><secondary>tn_queue_receive_polling</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_queue_receive_polling (struct <link linkend="_structTN__DQueue">TN_DQueue</link> * dque, void ** pp_data)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__dqueue_8h_1ab47ed49af7dffc5a71eaabd25422d0e4">tn_queue_receive()</link></computeroutput> with zero timeout. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__dqueue_8h_1a22bf1175e35229e5358427c20d7f91e9"/>    <section>
    <title>tn_queue_ireceive_polling()</title>
<indexterm><primary>tn_queue_ireceive_polling</primary><secondary>tn_dqueue.h</secondary></indexterm>
<indexterm><primary>tn_dqueue.h</primary><secondary>tn_queue_ireceive_polling</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_queue_ireceive_polling (struct <link linkend="_structTN__DQueue">TN_DQueue</link> * dque, void ** pp_data)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__dqueue_8h_1ab47ed49af7dffc5a71eaabd25422d0e4">tn_queue_receive()</link></computeroutput> with zero timeout, but for using in the ISR. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__dqueue_8h_1af541f16598e13f980ddc2482e6af6044"/>    <section>
    <title>tn_queue_free_items_cnt_get()</title>
<indexterm><primary>tn_queue_free_items_cnt_get</primary><secondary>tn_dqueue.h</secondary></indexterm>
<indexterm><primary>tn_dqueue.h</primary><secondary>tn_queue_free_items_cnt_get</secondary></indexterm>
<para><computeroutput>int tn_queue_free_items_cnt_get (struct <link linkend="_structTN__DQueue">TN_DQueue</link> * dque)</computeroutput></para><para>

<para>Returns number of free items in the queue. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dque</entry>
                                <entry>
<para>Pointer to queue.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Number of free items in the queue, or -1 if wrong params were given (the check is performed if only <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero) </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__dqueue_8h_1aa17fd667cab2e4a41d9e89b8cba603cd"/>    <section>
    <title>tn_queue_used_items_cnt_get()</title>
<indexterm><primary>tn_queue_used_items_cnt_get</primary><secondary>tn_dqueue.h</secondary></indexterm>
<indexterm><primary>tn_dqueue.h</primary><secondary>tn_queue_used_items_cnt_get</secondary></indexterm>
<para><computeroutput>int tn_queue_used_items_cnt_get (struct <link linkend="_structTN__DQueue">TN_DQueue</link> * dque)</computeroutput></para><para>

<para>Returns number of used (non-free) items in the queue. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dque</entry>
                                <entry>
<para>Pointer to queue.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Number of used (non-free) items in the queue, or -1 if wrong params were given (the check is performed if only <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero) </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__dqueue_8h_1ad5d94cf59bebcbf245249896751bd902"/>    <section>
    <title>tn_queue_eventgrp_connect()</title>
<indexterm><primary>tn_queue_eventgrp_connect</primary><secondary>tn_dqueue.h</secondary></indexterm>
<indexterm><primary>tn_dqueue.h</primary><secondary>tn_queue_eventgrp_connect</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_queue_eventgrp_connect (struct <link linkend="_structTN__DQueue">TN_DQueue</link> * dque, struct <link linkend="_structTN__EventGrp">TN_EventGrp</link> * eventgrp, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> pattern)</computeroutput></para><para>

<para>Connect an event group to the queue. </para>
</para>

<para>Refer to the section <link linkend="_tn__eventgrp_8h_1eventgrp_connect">Connecting an event group to other system objects</link> for details.</para>

<para>Only one event group can be connected to the queue at a time. If you connect event group while another event group is already connected, the old link is discarded.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dque</entry>
                                <entry>
<para>queue to which event group should be connected </para>
</entry>
                            </row>
                            <row>
                                <entry>eventgrp</entry>
                                <entry>
<para>event groupt to connect </para>
</entry>
                            </row>
                            <row>
                                <entry>pattern</entry>
                                <entry>
<para>flags pattern that should be managed by the queue automatically</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__dqueue_8h_1ac57589cd905f39a6c4a6c8279f073a4a"/>    <section>
    <title>tn_queue_eventgrp_disconnect()</title>
<indexterm><primary>tn_queue_eventgrp_disconnect</primary><secondary>tn_dqueue.h</secondary></indexterm>
<indexterm><primary>tn_dqueue.h</primary><secondary>tn_queue_eventgrp_disconnect</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_queue_eventgrp_disconnect (struct <link linkend="_structTN__DQueue">TN_DQueue</link> * dque)</computeroutput></para><para>

<para>Disconnect a connected event group from the queue. </para>
</para>

<para>Refer to the section <link linkend="_tn__eventgrp_8h_1eventgrp_connect">Connecting an event group to other system objects</link> for details.</para>

<para>If there is no event group connected, nothing is changed.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dque</entry>
                                <entry>
<para>queue from which event group should be disconnected</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
</section>
</section>
</section>
