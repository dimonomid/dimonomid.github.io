<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tn__fmem_8h">
<title>core/tn_fmem.h File Reference</title>
<indexterm><primary>core/tn_fmem.h</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>Fixed memory blocks pool.</para>

<para>A fixed-sized memory blocks pool is used for managing fixed-sized memory blocks dynamically. A pool has a memory area where fixed-sized memory blocks are allocated and the wait queue for acquiring a memory block. If there are no free memory blocks, a task trying to acquire a memory block will be placed into the wait queue until a free memory block arrives (another task returns it to the memory pool).</para>

<para>The operations of getting the block from memory pool and releasing it back take O(1) time independently of number or size of the blocks.</para>

<para>For the useful pattern on how to use fixed memory pool together with <link linkend="_tn__dqueue_8h">queue</link>, refer to the example: <computeroutput>examples/queue</computeroutput>. Be sure to examine the readme there. </para>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structTN__FMem">TN_FMem</link></para>

<para>Fixed memory blocks pool. </para>
</listitem>
            <listitem><para>struct <link linkend="_structTN__FMemTaskWait">TN_FMemTaskWait</link></para>

<para>FMem-specific fields related to waiting task, to be included in struct <link linkend="_structTN__Task">TN_Task</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_tn__fmem_8h_1ab45e9c2ad4a64345214f9a912bf76fc3">TN_FMEM_BUF_DEF</link>(name,  item_type,  size)</para>

<para>Convenience macro for the definition of buffer for memory pool. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__fmem_8h_1a56d47d4a1b6453d959336448a0ce96ac">tn_fmem_create</link> (struct <link linkend="_structTN__FMem">TN_FMem</link> *fmem, void *start_addr, unsigned int block_size, int blocks_cnt)</para>

<para>Construct fixed memory blocks pool. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__fmem_8h_1ac9b8243577c7a14ce442879e9e68d98c">tn_fmem_delete</link> (struct <link linkend="_structTN__FMem">TN_FMem</link> *fmem)</para>

<para>Destruct fixed memory blocks pool. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__fmem_8h_1a2ecd094041dbd0e92d61b852b7952444">tn_fmem_get</link> (struct <link linkend="_structTN__FMem">TN_FMem</link> *fmem, void **p_data, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</para>

<para>Get memory block from the pool. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__fmem_8h_1affea42ad41734fadfe8170b4234ca567">tn_fmem_get_polling</link> (struct <link linkend="_structTN__FMem">TN_FMem</link> *fmem, void **p_data)</para>

<para>The same as <computeroutput><link linkend="_tn__fmem_8h_1a2ecd094041dbd0e92d61b852b7952444">tn_fmem_get()</link></computeroutput> with zero timeout. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__fmem_8h_1a24ef67ab8567f6dd4d08946711f756df">tn_fmem_iget_polling</link> (struct <link linkend="_structTN__FMem">TN_FMem</link> *fmem, void **p_data)</para>

<para>The same as <computeroutput><link linkend="_tn__fmem_8h_1a2ecd094041dbd0e92d61b852b7952444">tn_fmem_get()</link></computeroutput> with zero timeout, but for using in the ISR. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__fmem_8h_1adc5dfb589f4ef2347021c727cd4cc030">tn_fmem_release</link> (struct <link linkend="_structTN__FMem">TN_FMem</link> *fmem, void *p_data)</para>

<para>Release memory block back to the pool. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__fmem_8h_1a061edcb30a486dba289aa136af7b68f6">tn_fmem_irelease</link> (struct <link linkend="_structTN__FMem">TN_FMem</link> *fmem, void *p_data)</para>

<para>The same as <computeroutput><link linkend="_tn__fmem_8h_1a2ecd094041dbd0e92d61b852b7952444">tn_fmem_get()</link></computeroutput>, but for using in the ISR. </para>
</listitem>
            <listitem><para>int <link linkend="_tn__fmem_8h_1ae8b80e0a0a8b07e11acbc4f15f3ef32d">tn_fmem_free_blocks_cnt_get</link> (struct <link linkend="_structTN__FMem">TN_FMem</link> *fmem)</para>

<para>Returns number of free blocks in the memory pool. </para>
</listitem>
            <listitem><para>int <link linkend="_tn__fmem_8h_1a2f23f2cdb3e6f3f2a1c1f9ebc4e6e8cb">tn_fmem_used_blocks_cnt_get</link> (struct <link linkend="_structTN__FMem">TN_FMem</link> *fmem)</para>

<para>Returns number of used (non-free) blocks in the memory pool. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_tn__fmem_8h_1ab45e9c2ad4a64345214f9a912bf76fc3"/>    <section>
    <title>TN_FMEM_BUF_DEF</title>
<indexterm><primary>TN_FMEM_BUF_DEF</primary><secondary>tn_fmem.h</secondary></indexterm>
<indexterm><primary>tn_fmem.h</primary><secondary>TN_FMEM_BUF_DEF</secondary></indexterm>
<para><computeroutput>#define TN_FMEM_BUF_DEF( name,  item_type,  size)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;<link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link>&#32;name[&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(size)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;*&#32;(<link linkend="_tn__common_8h_1a3f48380e8a624edc643319a81192d88e">TN_MAKE_ALIG_SIZE</link>(<emphasis role="keyword">sizeof</emphasis>(item_type))&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link>))&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;]
</programlisting><para>

<para>Convenience macro for the definition of buffer for memory pool. </para>
</para>

<para>See <computeroutput><link linkend="_tn__fmem_8h_1a56d47d4a1b6453d959336448a0ce96ac">tn_fmem_create()</link></computeroutput> for usage example.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>C variable name of the buffer array (this name should be given to the <computeroutput><link linkend="_tn__fmem_8h_1a56d47d4a1b6453d959336448a0ce96ac">tn_fmem_create()</link></computeroutput> function as the <computeroutput>start_addr</computeroutput> argument) </para>
</entry>
                            </row>
                            <row>
                                <entry>item_type</entry>
                                <entry>
<para>Type of item in the memory pool, like <computeroutput>struct MyMemoryItem</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>size</entry>
                                <entry>
<para>Number of items in the memory pool. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 146 of file tn_fmem.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_tn__fmem_8h_1a56d47d4a1b6453d959336448a0ce96ac"/>    <section>
    <title>tn_fmem_create()</title>
<indexterm><primary>tn_fmem_create</primary><secondary>tn_fmem.h</secondary></indexterm>
<indexterm><primary>tn_fmem.h</primary><secondary>tn_fmem_create</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_fmem_create (struct <link linkend="_structTN__FMem">TN_FMem</link> * fmem, void * start_addr, unsigned int block_size, int blocks_cnt)</computeroutput></para><para>

<para>Construct fixed memory blocks pool. </para>
</para>

<para><computeroutput>id_fmp</computeroutput> field should not contain <computeroutput>#TN_ID_FSMEMORYPOOL</computeroutput>, otherwise, <computeroutput>#TN_RC_WPARAM</computeroutput> is returned.</para>

<para>Note that <computeroutput>start_addr</computeroutput> and <computeroutput>block_size</computeroutput> should be a multiple of <computeroutput>sizeof(#TN_UWord)</computeroutput>.</para>

<para>For the definition of buffer, convenience macro <computeroutput><link linkend="_tn__fmem_8h_1ab45e9c2ad4a64345214f9a912bf76fc3">TN_FMEM_BUF_DEF()</link></computeroutput> was invented.</para>

<para>Typical definition looks as follows:</para>

<para><literallayout><computeroutput>//--&#32;number&#32;of&#32;blocks&#32;in&#32;the&#32;pool
#define&#32;MY_MEMORY_BUF_SIZE&#32;&#32;&#32;&#32;8

//--&#32;type&#32;for&#32;memory&#32;block
struct&#32;MyMemoryItem&#32;{
&#32;&#32;&#32;//&#32;...&#32;arbitrary&#32;fields&#32;...
};

//--&#32;define&#32;buffer&#32;for&#32;memory&#32;pool
TN_FMEM_BUF_DEF(my_fmem_buf,&#32;struct&#32;MyMemoryItem,&#32;MY_MEMORY_BUF_SIZE);

//--&#32;define&#32;memory&#32;pool&#32;structure
struct&#32;TN_FMem&#32;my_fmem;
</computeroutput></literallayout></para>

<para>And then, construct your <computeroutput>my_fmem</computeroutput> as follows:</para>

<para><literallayout><computeroutput>enum&#32;TN_RCode&#32;rc;
rc&#32;=&#32;tn_fmem_create(&#32;&amp;my_fmem,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;my_fmem_buf,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TN_MAKE_ALIG_SIZE(sizeof(struct&#32;MyMemoryItem)),
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MY_MEMORY_BUF_SIZE&#32;);
if&#32;(rc&#32;!=&#32;TN_RC_OK){
&#32;&#32;&#32;//--&#32;handle&#32;error
}
</computeroutput></literallayout></para>

<para>If given <computeroutput>start_addr</computeroutput> and/or <computeroutput>block_size</computeroutput> aren&apos;t aligned properly, <computeroutput>#TN_RC_WPARAM</computeroutput> is returned.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>fmem</entry>
                                <entry>
<para>pointer to already allocated <computeroutput>struct <link linkend="_structTN__FMem">TN_FMem</link></computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>start_addr</entry>
                                <entry>
<para>pointer to start of the array; should be aligned properly, see example above </para>
</entry>
                            </row>
                            <row>
                                <entry>block_size</entry>
                                <entry>
<para>size of memory block; should be a multiple of <computeroutput>sizeof(#TN_UWord)</computeroutput>, see example above </para>
</entry>
                            </row>
                            <row>
                                <entry>blocks_cnt</entry>
                                <entry>
<para>capacity (total number of blocks in the memory pool)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if memory pool was successfully created;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return code is available: <computeroutput>#TN_RC_WPARAM</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_tn__common_8h_1a3f48380e8a624edc643319a81192d88e">TN_MAKE_ALIG_SIZE</link> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__fmem_8h_1ac9b8243577c7a14ce442879e9e68d98c"/>    <section>
    <title>tn_fmem_delete()</title>
<indexterm><primary>tn_fmem_delete</primary><secondary>tn_fmem.h</secondary></indexterm>
<indexterm><primary>tn_fmem.h</primary><secondary>tn_fmem_delete</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_fmem_delete (struct <link linkend="_structTN__FMem">TN_FMem</link> * fmem)</computeroutput></para><para>

<para>Destruct fixed memory blocks pool. </para>
</para>

<para>All tasks that wait for free memory block become runnable with <computeroutput>#TN_RC_DELETED</computeroutput> code returned.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>fmem</entry>
                                <entry>
<para>pointer to memory pool to be deleted</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if memory pool is successfully deleted;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__fmem_8h_1a2ecd094041dbd0e92d61b852b7952444"/>    <section>
    <title>tn_fmem_get()</title>
<indexterm><primary>tn_fmem_get</primary><secondary>tn_fmem.h</secondary></indexterm>
<indexterm><primary>tn_fmem.h</primary><secondary>tn_fmem_get</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_fmem_get (struct <link linkend="_structTN__FMem">TN_FMem</link> * fmem, void ** p_data, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</computeroutput></para><para>

<para>Get memory block from the pool. </para>
</para>

<para>Start address of the memory block is returned through the <computeroutput>p_data</computeroutput> argument. The content of memory block is undefined. If there is no free block in the pool, behavior depends on <computeroutput>timeout</computeroutput> value: refer to <computeroutput>#TN_TickCnt</computeroutput>.</para>

<para>      <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>fmem</entry>
                                <entry>
<para>Pointer to memory pool </para>
</entry>
                            </row>
                            <row>
                                <entry>p_data</entry>
                                <entry>
<para>Address of the <computeroutput>(void *)</computeroutput> to which received block address will be saved </para>
</entry>
                            </row>
                            <row>
                                <entry>timeout</entry>
                                <entry>
<para>
<literallayout>&#160;&#xa;</literallayout>
 Refer to <computeroutput>#TN_TickCnt</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if block was successfully returned through <computeroutput>p_data</computeroutput>;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>Other possible return codes depend on <computeroutput>timeout</computeroutput> value, refer to <computeroutput>#TN_TickCnt</computeroutput></para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__fmem_8h_1affea42ad41734fadfe8170b4234ca567"/>    <section>
    <title>tn_fmem_get_polling()</title>
<indexterm><primary>tn_fmem_get_polling</primary><secondary>tn_fmem.h</secondary></indexterm>
<indexterm><primary>tn_fmem.h</primary><secondary>tn_fmem_get_polling</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_fmem_get_polling (struct <link linkend="_structTN__FMem">TN_FMem</link> * fmem, void ** p_data)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__fmem_8h_1a2ecd094041dbd0e92d61b852b7952444">tn_fmem_get()</link></computeroutput> with zero timeout. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__fmem_8h_1a24ef67ab8567f6dd4d08946711f756df"/>    <section>
    <title>tn_fmem_iget_polling()</title>
<indexterm><primary>tn_fmem_iget_polling</primary><secondary>tn_fmem.h</secondary></indexterm>
<indexterm><primary>tn_fmem.h</primary><secondary>tn_fmem_iget_polling</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_fmem_iget_polling (struct <link linkend="_structTN__FMem">TN_FMem</link> * fmem, void ** p_data)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__fmem_8h_1a2ecd094041dbd0e92d61b852b7952444">tn_fmem_get()</link></computeroutput> with zero timeout, but for using in the ISR. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__fmem_8h_1adc5dfb589f4ef2347021c727cd4cc030"/>    <section>
    <title>tn_fmem_release()</title>
<indexterm><primary>tn_fmem_release</primary><secondary>tn_fmem.h</secondary></indexterm>
<indexterm><primary>tn_fmem.h</primary><secondary>tn_fmem_release</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_fmem_release (struct <link linkend="_structTN__FMem">TN_FMem</link> * fmem, void * p_data)</computeroutput></para><para>

<para>Release memory block back to the pool. </para>
</para>

<para>The kernel does not check the validity of the membership of given block in the memory pool. If all the memory blocks in the pool are free already, <computeroutput>#TN_RC_OVERFLOW</computeroutput> is returned.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>fmem</entry>
                                <entry>
<para>Pointer to memory pool. </para>
</entry>
                            </row>
                            <row>
                                <entry>p_data</entry>
                                <entry>
<para>Address of the memory block to release.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> on success</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__fmem_8h_1a061edcb30a486dba289aa136af7b68f6"/>    <section>
    <title>tn_fmem_irelease()</title>
<indexterm><primary>tn_fmem_irelease</primary><secondary>tn_fmem.h</secondary></indexterm>
<indexterm><primary>tn_fmem.h</primary><secondary>tn_fmem_irelease</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_fmem_irelease (struct <link linkend="_structTN__FMem">TN_FMem</link> * fmem, void * p_data)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__fmem_8h_1a2ecd094041dbd0e92d61b852b7952444">tn_fmem_get()</link></computeroutput>, but for using in the ISR. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__fmem_8h_1ae8b80e0a0a8b07e11acbc4f15f3ef32d"/>    <section>
    <title>tn_fmem_free_blocks_cnt_get()</title>
<indexterm><primary>tn_fmem_free_blocks_cnt_get</primary><secondary>tn_fmem.h</secondary></indexterm>
<indexterm><primary>tn_fmem.h</primary><secondary>tn_fmem_free_blocks_cnt_get</secondary></indexterm>
<para><computeroutput>int tn_fmem_free_blocks_cnt_get (struct <link linkend="_structTN__FMem">TN_FMem</link> * fmem)</computeroutput></para><para>

<para>Returns number of free blocks in the memory pool. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>fmem</entry>
                                <entry>
<para>Pointer to memory pool.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Number of free blocks in the memory pool, or -1 if wrong params were given (the check is performed if only <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero) </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__fmem_8h_1a2f23f2cdb3e6f3f2a1c1f9ebc4e6e8cb"/>    <section>
    <title>tn_fmem_used_blocks_cnt_get()</title>
<indexterm><primary>tn_fmem_used_blocks_cnt_get</primary><secondary>tn_fmem.h</secondary></indexterm>
<indexterm><primary>tn_fmem.h</primary><secondary>tn_fmem_used_blocks_cnt_get</secondary></indexterm>
<para><computeroutput>int tn_fmem_used_blocks_cnt_get (struct <link linkend="_structTN__FMem">TN_FMem</link> * fmem)</computeroutput></para><para>

<para>Returns number of used (non-free) blocks in the memory pool. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>fmem</entry>
                                <entry>
<para>Pointer to memory pool.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Number of used (non-free) blocks in the memory pool, or -1 if wrong params were given (the check is performed if only <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero) </para>
</formalpara>
</para>
</section>
</section>
</section>
