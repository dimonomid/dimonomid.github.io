<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tn__cfg__default_8h">
<title>tn_cfg_default.h File Reference</title>
<indexterm><primary>tn_cfg_default.h</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>TNeo default configuration file, to be copied as <computeroutput>tn_cfg.h</computeroutput>.</para>

<para>This project is intended to be built as a library, separately from main project (although nothing prevents you from bundling things together, if you want to).</para>

<para>There are various options available which affects API and behavior of the kernel. But these options are specific for particular project, and aren&apos;t related to the kernel itself, so we need to keep them separately.</para>

<para>To this end, file <computeroutput><link linkend="_tn_8h">tn.h</link></computeroutput> (the main kernel header file) includes <computeroutput>tn_cfg.h</computeroutput>, which isn&apos;t included in the repository (even more, it is added to <computeroutput>.hgignore</computeroutput> list actually). Instead, default configuration file <computeroutput><link linkend="_tn__cfg__default_8h">tn_cfg_default.h</link></computeroutput> is provided, and when you just cloned the repository, you might want to copy it as <computeroutput>tn_cfg.h</computeroutput>. Or even better, if your filesystem supports symbolic links, copy it somewhere to your main project&apos;s directory (so that you can add it to your VCS there), and create symlink to it named <computeroutput>tn_cfg.h</computeroutput> in the TNeo source directory, like this: <literallayout><computeroutput>$ cd /path/to/tneo/src
$ cp ./tn_cfg_default.h /path/to/main/project/lib_cfg/tn_cfg.h
$ ln -s /path/to/main/project/lib_cfg/tn_cfg.h ./tn_cfg.h
</computeroutput></literallayout></para>

<para>Default configuration file contains detailed comments, so you can read them and configure behavior as you like. </para>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1aacdc913eb66492cf69cf02a5de73578e">TN_CHECK_BUILD_CFG</link>   1</para>

<para>This option enables run-time check which ensures that build-time options for the kernel match ones for the application. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1aad74a059c61567c68a1e9067ab47a256">TN_PRIORITIES_CNT</link>   <link linkend="_tn__arch__example_8h_1a9809516063a01ca2c2f5f009294839d3">TN_PRIORITIES_MAX_CNT</link></para>

<para>Number of priorities that can be used by application, plus one for idle task (which has the lowest priority). </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1a1f197294df3276fec431930545acafd5">TN_CHECK_PARAM</link>   1</para>

<para>Enables additional param checking for most of the system functions. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1a9d2b6d902efdbc56094bb913413aa69c">TN_DEBUG</link>   0</para>

<para>Allows additional internal self-checking, useful to catch internal TNeo bugs as well as illegal kernel usage (e.g. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1ae9854c723c6a823c9126aa8390977d39">TN_OLD_TNKERNEL_NAMES</link>   1</para>

<para>Whether old TNKernel names (definitions, functions, etc) should be available. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__cfg__default_8h_1a7ce674edab5345c4b8d2ec251eea18eb"/>#define <link linkend="_tn__cfg__default_8h_1a7ce674edab5345c4b8d2ec251eea18eb">TN_USE_MUTEXES</link>   1</para>

<para>Whether mutexes API should be available. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__cfg__default_8h_1a2557da78508c4241aceee92475df3581"/>#define <link linkend="_tn__cfg__default_8h_1a2557da78508c4241aceee92475df3581">TN_MUTEX_REC</link>   1</para>

<para>Whether mutexes should allow recursive locking/unlocking. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1a6ed3ec7b0d4338e7f60dde86b7ea5fa4">TN_MUTEX_DEADLOCK_DETECT</link>   1</para>

<para>Whether RTOS should detect deadlocks and notify user about them via callback. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1afef2a6ec1baa81edaa979024af0c924a">TN_TICK_LISTS_CNT</link>   8</para>

<para><emphasis>Takes effect if only <computeroutput>#TN_DYNAMIC_TICK</computeroutput> is <emphasis role="bold">not set</emphasis></emphasis>. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1a2a1148efc6a74131cc83ee50cbc386cd">TN_API_MAKE_ALIG_ARG</link>   <link linkend="_tn__cfg__dispatch_8h_1a4972bf0cbc72e51a7463cf7d786d2b64">TN_API_MAKE_ALIG_ARG__SIZE</link></para>

<para>API option for <computeroutput><link linkend="_tn__oldsymbols_8h_1aa42d2e6b5b7ff37bd485803fa2cb70a8">MAKE_ALIG()</link></computeroutput> macro. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1a49a546b18cc1f75b51d4cf8b290634dd">TN_PROFILER</link>   0</para>

<para>Whether profiler functionality should be enabled. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1a1c04db5457adb54f7cc38d42b29a5ad7">TN_PROFILER_WAIT_TIME</link>   0</para>

<para>Whether profiler should store wait time for each wait reason. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1aab948a5a8178594322f364800e0e53ee">TN_INIT_INTERRUPT_STACK_SPACE</link>   1</para>

<para>Whether interrupt stack space should be initialized with <computeroutput>#TN_FILL_STACK_VAL</computeroutput> on system start. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1ac6a9bbac3b3b25d9b5bc8c21d2e09955">TN_STACK_OVERFLOW_CHECK</link>   1</para>

<para>Whether software stack overflow check is enabled. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__cfg__default_8h_1aaee875834a86f961318c584095c366fe"/>#define <link linkend="_tn__cfg__default_8h_1aaee875834a86f961318c584095c366fe">TN_DYNAMIC_TICK</link>   0</para>

<para>Whether the kernel should use <link linkend="_time_ticks_1time_ticks__dynamic_tick">Dynamic tick</link> scheme instead of <link linkend="_time_ticks_1time_ticks__static_tick">Static tick</link>. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1ac61d5f6a716cdcab205a2c8afbde4242">TN_OLD_EVENT_API</link>   0</para>

<para>Whether the old TNKernel events API compatibility mode is active. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__cfg__default_8h_1a55cf98b6d6de554b433f497f62c2b363"/>#define <link linkend="_tn__cfg__default_8h_1a55cf98b6d6de554b433f497f62c2b363">TN_FORCED_INLINE</link>   1</para>

<para>Whether the kernel should use compiler-specific forced inline qualifiers (if possible) instead of &quot;usual&quot; <computeroutput>inline</computeroutput>, which is just a hint for the compiler. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1a50a44e397e61bf00e33ebb25ac417c56">TN_MAX_INLINE</link>   0</para>

<para>Whether a maximum of reasonable functions should be inlined. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__cfg__default_8h_1a4feb7eb34fc2f175167b7496b63c398a">TN_P24_SYS_IPL</link>   4</para>

<para>Maximum system interrupt priority. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_tn__cfg__default_8h_1aacdc913eb66492cf69cf02a5de73578e"/>    <section>
    <title>TN_CHECK_BUILD_CFG</title>
<indexterm><primary>TN_CHECK_BUILD_CFG</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_CHECK_BUILD_CFG</secondary></indexterm>
<para><computeroutput>#define TN_CHECK_BUILD_CFG   1</computeroutput></para><para>

<para>This option enables run-time check which ensures that build-time options for the kernel match ones for the application. </para>
</para>

<para>Without this check, it is possible that you change your <computeroutput>tn_cfg.h</computeroutput> file, and just rebuild your application without rebuilding the kernel. Then, application would assume that kernel behaves accordingly to <computeroutput>tn_cfg.h</computeroutput> which was included in the application, but this is actually not true: you need to rebuild the kernel for changes to take effect.</para>

<para>With this option turned on, if build-time configurations don&apos;t match, you will get run-time error (<computeroutput>_TN_FATAL_ERROR()</computeroutput>) inside <computeroutput><link linkend="_tn__sys_8h_1a62ab25d9d8ca01c02d368968f19e49bf">tn_sys_start()</link></computeroutput>, which is much more informative than weird bugs caused by configuration mismatch.</para>

<para><emphasis role="bold">Note</emphasis>: turning this option on makes sense if only you use TNeo as a separate library. If you build TNeo together with the application, both the kernel and the application always use the same <computeroutput>tn_cfg.h</computeroutput> file, therefore this option is useless.</para>

<para><caution><title>Attention</title>

<para>If this option is on, your application must include the file <computeroutput><link linkend="_tn__app__check_8c">tn_app_check.c</link></computeroutput>. </para>
</caution>
</para>
<para>
Definition at line 107 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1aad74a059c61567c68a1e9067ab47a256"/>    <section>
    <title>TN_PRIORITIES_CNT</title>
<indexterm><primary>TN_PRIORITIES_CNT</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_PRIORITIES_CNT</secondary></indexterm>
<para><computeroutput>#define TN_PRIORITIES_CNT   <link linkend="_tn__arch__example_8h_1a9809516063a01ca2c2f5f009294839d3">TN_PRIORITIES_MAX_CNT</link></computeroutput></para><para>

<para>Number of priorities that can be used by application, plus one for idle task (which has the lowest priority). </para>
</para>

<para>This value can&apos;t be higher than architecture-dependent value <computeroutput>#TN_PRIORITIES_MAX_CNT</computeroutput>, which typically equals to width of <computeroutput>int</computeroutput> type. So, for 32-bit systems, max number of priorities is 32.</para>

<para>But usually, application needs much less: I can imagine <emphasis role="bold">at most</emphasis> 4-5 different priorities, plus one for the idle task.</para>

<para>Do note also that each possible priority level takes RAM: two pointers for linked list and one <computeroutput>short</computeroutput> for time slice value, so on 32-bit system it takes 10 bytes. So, with default value of 32 priorities available, it takes 320 bytes. If you set it, say, to 5, you save <computeroutput>270</computeroutput> bytes, which might be notable.</para>

<para>Default: <computeroutput>#TN_PRIORITIES_MAX_CNT</computeroutput>. </para>
<para>
Definition at line 130 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1a1f197294df3276fec431930545acafd5"/>    <section>
    <title>TN_CHECK_PARAM</title>
<indexterm><primary>TN_CHECK_PARAM</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_CHECK_PARAM</secondary></indexterm>
<para><computeroutput>#define TN_CHECK_PARAM   1</computeroutput></para><para>

<para>Enables additional param checking for most of the system functions. </para>
</para>

<para>It&apos;s surely useful for debug, but probably better to remove in release. If it is set, most of the system functions are able to return two additional codes:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_WPARAM</computeroutput> if wrong params were given;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_INVALID_OBJ</computeroutput> if given pointer doesn&apos;t point to a valid object. Object validity is checked by means of the special ID field of type <computeroutput>enum #TN_ObjId</computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para><formalpara><title>See also</title>

<para><computeroutput>enum #<link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976">TN_ObjId</link></computeroutput> </para>
</formalpara>
</para>
<para>
Definition at line 147 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1a9d2b6d902efdbc56094bb913413aa69c"/>    <section>
    <title>TN_DEBUG</title>
<indexterm><primary>TN_DEBUG</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_DEBUG</secondary></indexterm>
<para><computeroutput>#define TN_DEBUG   0</computeroutput></para><para>

<para>Allows additional internal self-checking, useful to catch internal TNeo bugs as well as illegal kernel usage (e.g. </para>
</para>

<para>sleeping in the idle task callback). Produces a couple of extra instructions which usually just causes debugger to stop if something goes wrong. </para>
<para>
Definition at line 157 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1ae9854c723c6a823c9126aa8390977d39"/>    <section>
    <title>TN_OLD_TNKERNEL_NAMES</title>
<indexterm><primary>TN_OLD_TNKERNEL_NAMES</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_OLD_TNKERNEL_NAMES</secondary></indexterm>
<para><computeroutput>#define TN_OLD_TNKERNEL_NAMES   1</computeroutput></para><para>

<para>Whether old TNKernel names (definitions, functions, etc) should be available. </para>
</para>

<para>If you&apos;re porting your existing application written for TNKernel, it is definitely worth enabling. If you start new project with TNeo from scratch, it&apos;s better to avoid old names. </para>
<para>
Definition at line 167 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1a6ed3ec7b0d4338e7f60dde86b7ea5fa4"/>    <section>
    <title>TN_MUTEX_DEADLOCK_DETECT</title>
<indexterm><primary>TN_MUTEX_DEADLOCK_DETECT</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_MUTEX_DEADLOCK_DETECT</secondary></indexterm>
<para><computeroutput>#define TN_MUTEX_DEADLOCK_DETECT   1</computeroutput></para><para>

<para>Whether RTOS should detect deadlocks and notify user about them via callback. </para>
</para>

<para><formalpara><title>See also</title>

<para>see <computeroutput><link linkend="_tn__sys_8h_1aaa4a5c2feb4a0db5993b81dde496edc3">tn_callback_deadlock_set()</link></computeroutput> </para>

<para>see <computeroutput>#<link linkend="_tn__sys_8h_1a3a0439b7ba640754949f6d2c8e4ccc06">TN_CBDeadlock</link></computeroutput> </para>
</formalpara>
</para>
<para>
Definition at line 192 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1afef2a6ec1baa81edaa979024af0c924a"/>    <section>
    <title>TN_TICK_LISTS_CNT</title>
<indexterm><primary>TN_TICK_LISTS_CNT</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_TICK_LISTS_CNT</secondary></indexterm>
<para><computeroutput>#define TN_TICK_LISTS_CNT   8</computeroutput></para><para>

<para><emphasis>Takes effect if only <computeroutput>#TN_DYNAMIC_TICK</computeroutput> is <emphasis role="bold">not set</emphasis></emphasis>. </para>
</para>

<para>Number of &quot;tick&quot; lists of timers, must be a power or two; minimum value: <computeroutput>2</computeroutput>; typical values: <computeroutput>4</computeroutput>, <computeroutput>8</computeroutput> or <computeroutput>16</computeroutput>.</para>

<para>Refer to the <link linkend="_tn__timer_8h_1timers_static_implementation">Implementation of static timers</link> for details.</para>

<para>Shortly: this value represents number of elements in the array of <computeroutput>struct <link linkend="_structTN__ListItem">TN_ListItem</link></computeroutput>, on 32-bit system each element takes 8 bytes.</para>

<para>The larger value, the more memory is needed, and the faster <emphasis><link linkend="_time_ticks">system timer</link></emphasis> ISR works. If your application has a lot of timers and/or sleeping tasks, consider incrementing this value; otherwise, default value should work for you. </para>
<para>
Definition at line 213 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1a2a1148efc6a74131cc83ee50cbc386cd"/>    <section>
    <title>TN_API_MAKE_ALIG_ARG</title>
<indexterm><primary>TN_API_MAKE_ALIG_ARG</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_API_MAKE_ALIG_ARG</secondary></indexterm>
<para><computeroutput>#define TN_API_MAKE_ALIG_ARG   <link linkend="_tn__cfg__dispatch_8h_1a4972bf0cbc72e51a7463cf7d786d2b64">TN_API_MAKE_ALIG_ARG__SIZE</link></computeroutput></para><para>

<para>API option for <computeroutput><link linkend="_tn__oldsymbols_8h_1aa42d2e6b5b7ff37bd485803fa2cb70a8">MAKE_ALIG()</link></computeroutput> macro. </para>
</para>

<para>There is a terrible mess with <computeroutput><link linkend="_tn__oldsymbols_8h_1aa42d2e6b5b7ff37bd485803fa2cb70a8">MAKE_ALIG()</link></computeroutput> macro: original TNKernel docs specify that the argument of it should be the size to align, but almost all ports, including &quot;original&quot; one, defined it so that it takes type, not size.</para>

<para>But the port by AlexB implemented it differently (i.e. accordingly to the docs)</para>

<para>When I was moving from the port by AlexB to another one, do you have any idea how much time it took me to figure out why do I have rare weird bug? :)</para>

<para>So, available options:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_API_MAKE_ALIG_ARG__TYPE</computeroutput>: In this case, you should use macro like this: <computeroutput>TN_MAKE_ALIG(struct my_struct)</computeroutput> This way is used in the majority of TNKernel ports. (actually, in all ports except the one by AlexB)</para>
</listitem><listitem>
<para><computeroutput>#TN_API_MAKE_ALIG_ARG__SIZE</computeroutput>: In this case, you should use macro like this: <computeroutput>TN_MAKE_ALIG(sizeof(struct my_struct))</computeroutput> This way is stated in TNKernel docs and used in the port for dsPIC/PIC24/PIC32 by AlexB. </para>
</listitem></itemizedlist>
</para>
<para>
Definition at line 245 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1a49a546b18cc1f75b51d4cf8b290634dd"/>    <section>
    <title>TN_PROFILER</title>
<indexterm><primary>TN_PROFILER</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_PROFILER</secondary></indexterm>
<para><computeroutput>#define TN_PROFILER   0</computeroutput></para><para>

<para>Whether profiler functionality should be enabled. </para>
</para>

<para>Enabling this option adds overhead to context switching and increases the size of <computeroutput>#<link linkend="_structTN__Task">TN_Task</link></computeroutput> structure by about 20 bytes.</para>

<para><formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__cfg__default_8h_1a1c04db5457adb54f7cc38d42b29a5ad7">TN_PROFILER_WAIT_TIME</link></computeroutput> </para>

<para><computeroutput>#<link linkend="_tn__tasks_8h_1a8f90a88f54d2d49bb1de00886241edfe">tn_task_profiler_timing_get()</link></computeroutput> </para>

<para><computeroutput>struct #<link linkend="_structTN__TaskTiming">TN_TaskTiming</link></computeroutput> </para>
</formalpara>
</para>
<para>
Definition at line 259 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1a1c04db5457adb54f7cc38d42b29a5ad7"/>    <section>
    <title>TN_PROFILER_WAIT_TIME</title>
<indexterm><primary>TN_PROFILER_WAIT_TIME</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_PROFILER_WAIT_TIME</secondary></indexterm>
<para><computeroutput>#define TN_PROFILER_WAIT_TIME   0</computeroutput></para><para>

<para>Whether profiler should store wait time for each wait reason. </para>
</para>

<para>Enabling this option bumps the size of <computeroutput>#<link linkend="_structTN__Task">TN_Task</link></computeroutput> structure by more than 100 bytes, see <computeroutput>struct #<link linkend="_structTN__TaskTiming">TN_TaskTiming</link></computeroutput>.</para>

<para>Relevant if only <computeroutput>#TN_PROFILER</computeroutput> is non-zero. </para>
<para>
Definition at line 270 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1aab948a5a8178594322f364800e0e53ee"/>    <section>
    <title>TN_INIT_INTERRUPT_STACK_SPACE</title>
<indexterm><primary>TN_INIT_INTERRUPT_STACK_SPACE</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_INIT_INTERRUPT_STACK_SPACE</secondary></indexterm>
<para><computeroutput>#define TN_INIT_INTERRUPT_STACK_SPACE   1</computeroutput></para><para>

<para>Whether interrupt stack space should be initialized with <computeroutput>#TN_FILL_STACK_VAL</computeroutput> on system start. </para>
</para>

<para>It is useful to disable this option if you don&apos;t want to allocate separate array for interrupt stack, but use initialization stack for it. </para>
<para>
Definition at line 280 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1ac6a9bbac3b3b25d9b5bc8c21d2e09955"/>    <section>
    <title>TN_STACK_OVERFLOW_CHECK</title>
<indexterm><primary>TN_STACK_OVERFLOW_CHECK</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_STACK_OVERFLOW_CHECK</secondary></indexterm>
<para><computeroutput>#define TN_STACK_OVERFLOW_CHECK   1</computeroutput></para><para>

<para>Whether software stack overflow check is enabled. </para>
</para>

<para>Enabling this option adds small overhead to context switching and system tick processing (<computeroutput>#<link linkend="_tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing()</link></computeroutput>), it also reduces the payload of task stacks by just one word (<computeroutput>#TN_UWord</computeroutput>) for each stack.</para>

<para>When stack overflow happens, the kernel calls user-provided callback (see <computeroutput>#<link linkend="_tn__sys_8h_1ab40a7069739439d7b70cc4e19d0b9fe3">tn_callback_stack_overflow_set()</link></computeroutput>); if this callback is undefined, the kernel calls <computeroutput>#_TN_FATAL_ERROR()</computeroutput>.</para>

<para>This option is on by default for all architectures except PIC24/dsPIC, since this architecture has hardware stack pointer limit, unlike the others.</para>

<para><caution><title>Attention</title>

<para>It is not an absolute guarantee that the kernel will detect any stack overflow. The kernel tries to detect stack overflow by checking the latest address of stack, which should have special value <computeroutput>#TN_FILL_STACK_VAL</computeroutput>.</para>

<para>So stack overflow is detected if only the overflow caused this value to corrupt, which isn&apos;t always the case.</para>

<para>More, the check is performed only at context switch and timer tick processing, which may be too late.</para>
</caution>
Nevertheless, from my personal experience, it helps to catch stack overflow bugs a lot. </para>
<para>
Definition at line 324 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1ac61d5f6a716cdcab205a2c8afbde4242"/>    <section>
    <title>TN_OLD_EVENT_API</title>
<indexterm><primary>TN_OLD_EVENT_API</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_OLD_EVENT_API</secondary></indexterm>
<para><computeroutput>#define TN_OLD_EVENT_API   0</computeroutput></para><para>

<para>Whether the old TNKernel events API compatibility mode is active. </para>
</para>

<para><warning><title>Warning</title>

<para>Use it if only you&apos;re porting your existing TNKernel project on TNeo. Otherwise, usage of this option is strongly discouraged.</para>
</warning>
Actually, events are the most incompatible thing between TNeo and TNKernel (for some details, refer to the section <link linkend="_tnkernel_diff_1tnkernel_diff_event">Events API is changed almost completely</link>)</para>

<para>This option is quite useful when you&apos;re porting your existing TNKernel app to TNeo. When it is non-zero, old events symbols are available and behave just like they do in TNKernel.</para>

<para>The full list of what becomes available:</para>

<para><itemizedlist>
<listitem>
<para>Event group attributes:<itemizedlist>
<listitem>
<para><computeroutput>#TN_EVENT_ATTR_SINGLE</computeroutput></para>
</listitem><listitem>
<para><computeroutput>#TN_EVENT_ATTR_MULTI</computeroutput></para>
</listitem><listitem>
<para><computeroutput>#TN_EVENT_ATTR_CLR</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para>Functions:<itemizedlist>
<listitem>
<para><computeroutput>#<link linkend="_tn__oldsymbols_8h_1a9075b3bb952784d0b9475374e81a84a1">tn_event_create()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>#<link linkend="_tn__oldsymbols_8h_1ab8f8d838af61a8401613713bf7e1c536">tn_event_delete()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>#<link linkend="_tn__oldsymbols_8h_1ad94618f35aab0b7fe7e1a535028f3dcb">tn_event_wait()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>#<link linkend="_tn__oldsymbols_8h_1a3b1227dba38faec60177cdf9a703aaf3">tn_event_wait_polling()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>#<link linkend="_tn__oldsymbols_8h_1a6bc94c9208712a5fcb1b741f6d1a5f05">tn_event_iwait()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>#<link linkend="_tn__oldsymbols_8h_1a9fd4bd291c0b07c3b82f8dec4ae182ea">tn_event_set()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>#<link linkend="_tn__oldsymbols_8h_1a9fef9c4242f57eb8369ddcd6856c4c66">tn_event_iset()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>#<link linkend="_tn__oldsymbols_8h_1aee4d9866fcfb8b9b6a96066b288150dc">tn_event_clear()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>#<link linkend="_tn__oldsymbols_8h_1af74af0e32983b49f2fe101868195853e">tn_event_iclear()</link></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para>
Definition at line 370 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1a50a44e397e61bf00e33ebb25ac417c56"/>    <section>
    <title>TN_MAX_INLINE</title>
<indexterm><primary>TN_MAX_INLINE</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_MAX_INLINE</secondary></indexterm>
<para><computeroutput>#define TN_MAX_INLINE   0</computeroutput></para><para>

<para>Whether a maximum of reasonable functions should be inlined. </para>
</para>

<para>Depending of the configuration this may increase the size of the kernel, but it will also improve the performance. </para>
<para>
Definition at line 389 of file tn_cfg_default.h.</para>
    </section><anchor xml:id="_tn__cfg__default_8h_1a4feb7eb34fc2f175167b7496b63c398a"/>    <section>
    <title>TN_P24_SYS_IPL</title>
<indexterm><primary>TN_P24_SYS_IPL</primary><secondary>tn_cfg_default.h</secondary></indexterm>
<indexterm><primary>tn_cfg_default.h</primary><secondary>TN_P24_SYS_IPL</secondary></indexterm>
<para><computeroutput>#define TN_P24_SYS_IPL   4</computeroutput></para><para>

<para>Maximum system interrupt priority. </para>
</para>

<para>For details on system interrupts on PIC24/dsPIC, refer to the section <link linkend="_arch_specific_1pic24_interrupts">PIC24/dsPIC interrupts</link>.</para>

<para>Should be &gt;= 1 and &lt;= 6. Default: 4. </para>
<para>
Definition at line 408 of file tn_cfg_default.h.</para>
</section>
</section>
</section>
