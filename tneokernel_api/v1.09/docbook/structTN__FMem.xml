<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structTN__FMem">
<title>TN_FMem Struct Reference</title>
<indexterm><primary>TN_FMem</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>Fixed memory blocks pool. </para>
<para>
Definition at line 80 of file tn_fmem.h.</para>
<simplesect>
    <title>Data Fields    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976">TN_ObjId</link> <link linkend="_structTN__FMem_1aee1235a605f90d80ec16547ea647eaff">id_fmp</link></para>

<para>id for object validity verification. </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__FMem_1a63b47b05e191f4339509eef97027ca1c"/>struct <link linkend="_structTN__ListItem">TN_ListItem</link> <link linkend="_structTN__FMem_1a63b47b05e191f4339509eef97027ca1c">wait_queue</link></para>

<para>list of tasks waiting for free memory block </para>
</listitem>
            <listitem><para>unsigned int <link linkend="_structTN__FMem_1a101e3e0eeb2774309a55ed1d6cad8e3f">block_size</link></para>

<para>block size (in bytes); note that it should be a multiple of <computeroutput>sizeof(#TN_UWord})</computeroutput>, use a macro <computeroutput><link linkend="_tn__common_8h_1a3f48380e8a624edc643319a81192d88e">TN_MAKE_ALIG_SIZE()</link></computeroutput> for that. </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__FMem_1a8c8bb7a3ac8228a865bbbea1edde9ea0"/>int <link linkend="_structTN__FMem_1a8c8bb7a3ac8228a865bbbea1edde9ea0">blocks_cnt</link></para>

<para>capacity (total blocks count) </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__FMem_1abf2618d6322b1339d7b3d60c6e080cb1"/>int <link linkend="_structTN__FMem_1abf2618d6322b1339d7b3d60c6e080cb1">free_blocks_cnt</link></para>

<para>free blocks count </para>
</listitem>
            <listitem><para><anchor xml:id="_structTN__FMem_1a7eac768da37c99efd90ae56ebde527cf"/>void * <link linkend="_structTN__FMem_1a7eac768da37c99efd90ae56ebde527cf">start_addr</link></para>

<para>memory pool start address; note that it should be a multiple of <computeroutput>sizeof(#TN_UWord)</computeroutput>. </para>
</listitem>
            <listitem><para>void * <link linkend="_structTN__FMem_1a00ffa3c416a57946d95ab8814168eedb">free_list</link></para>

<para>Pointer to the first free memory block. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Field Documentation</title>
<anchor xml:id="_structTN__FMem_1aee1235a605f90d80ec16547ea647eaff"/>    <section>
    <title>id_fmp</title>
<indexterm><primary>id_fmp</primary><secondary>TN_FMem</secondary></indexterm>
<indexterm><primary>TN_FMem</primary><secondary>id_fmp</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1ae779dd1f6735f6e139fb70acd004d976">TN_ObjId</link> TN_FMem::id_fmp</computeroutput></para><para>

<para>id for object validity verification. </para>
</para>

<para>This field is in the beginning of the structure to make it easier to detect memory corruption. </para>
<para>
Definition at line 89 of file tn_fmem.h.</para>
    </section><anchor xml:id="_structTN__FMem_1a101e3e0eeb2774309a55ed1d6cad8e3f"/>    <section>
    <title>block_size</title>
<indexterm><primary>block_size</primary><secondary>TN_FMem</secondary></indexterm>
<indexterm><primary>TN_FMem</primary><secondary>block_size</secondary></indexterm>
<para><computeroutput>unsigned int TN_FMem::block_size</computeroutput></para><para>

<para>block size (in bytes); note that it should be a multiple of <computeroutput>sizeof(#TN_UWord})</computeroutput>, use a macro <computeroutput><link linkend="_tn__common_8h_1a3f48380e8a624edc643319a81192d88e">TN_MAKE_ALIG_SIZE()</link></computeroutput> for that. </para>
</para>

<para><formalpara><title>See also</title>

<para><computeroutput><link linkend="_tn__common_8h_1a3f48380e8a624edc643319a81192d88e">TN_MAKE_ALIG_SIZE()</link></computeroutput> </para>
</formalpara>
</para>
<para>
Definition at line 99 of file tn_fmem.h.</para>
    </section><anchor xml:id="_structTN__FMem_1a00ffa3c416a57946d95ab8814168eedb"/>    <section>
    <title>free_list</title>
<indexterm><primary>free_list</primary><secondary>TN_FMem</secondary></indexterm>
<indexterm><primary>TN_FMem</primary><secondary>free_list</secondary></indexterm>
<para><computeroutput>void* TN_FMem::free_list</computeroutput></para><para>

<para>Pointer to the first free memory block. </para>
</para>

<para>Each free block contains the pointer to the next free memory block as the first word, or <computeroutput>NULL</computeroutput> if this is the last block. </para>
<para>
Definition at line 114 of file tn_fmem.h.</para>
</section>
<para>
The documentation for this struct was generated from the following file:</para>
core/<link linkend="_tn__fmem_8h">tn_fmem.h</link></section>
</section>
