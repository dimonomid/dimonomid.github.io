<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tn__tasks_8h">
<title>core/tn_tasks.h File Reference</title>
<indexterm><primary>core/tn_tasks.h</primary></indexterm>
<section>
<title>Detailed Description</title>
<section xml:id="_tn__tasks_8h_1tn_tasks__tasks">
<title>Task</title>

<para>In TNeo, a task is a branch of code that runs concurrently with other tasks from the programmer&apos;s point of view. Indeed, tasks are actually executed using processor time sharing. Each task can be considered to be an independed program, which executes in its own context (processor registers, stack pointer, etc.).</para>

<para>Actually, the term <emphasis>thread</emphasis> is more accurate than <emphasis>task</emphasis>, but the term <emphasis>task</emphasis> historically was used in TNKernel, so TNeo keeps this convention.</para>

<para>When kernel decides that it&apos;s time to run another task, it performs <emphasis>context switch</emphasis>: current context (at least, values of all registers) gets saved to the preempted task&apos;s stack, pointer to currently running task is altered as well as stack pointer, and context gets restored from the stack of newly running task.</para>
</section>
<section xml:id="_tn__tasks_8h_1tn_tasks__states">
<title>Task states</title>

<para>For list of task states and their description, refer to <computeroutput>enum #TN_TaskState</computeroutput>.</para>
</section>
<section xml:id="_tn__tasks_8h_1tn_tasks__creating">
<title>Creating/starting tasks</title>

<para>Create task and start task are two separate actions; although you can perform both of them in one step by passing <computeroutput>#TN_TASK_CREATE_OPT_START</computeroutput> flag to the <computeroutput><link linkend="_tn__tasks_8h_1a548d5adda09d1b4e393b5df0e9e1a7a5">tn_task_create()</link></computeroutput> function.</para>
</section>
<section xml:id="_tn__tasks_8h_1tn_tasks__stopping">
<title>Stopping/deleting tasks</title>

<para>Stop task and delete task are two separate actions. If task was just stopped but not deleted, it can be just restarted again by calling <computeroutput><link linkend="_tn__tasks_8h_1a3c14832fe7dfd2c44678608767f40230">tn_task_activate()</link></computeroutput>. If task was deleted, it can&apos;t be just activated: it should be re-created by <computeroutput><link linkend="_tn__tasks_8h_1a548d5adda09d1b4e393b5df0e9e1a7a5">tn_task_create()</link></computeroutput> first.</para>

<para>Task stops execution when:</para>

<para><itemizedlist>
<listitem>
<para>it calls <computeroutput><link linkend="_tn__tasks_8h_1a23e562731e616f01e325bc9830bcc021">tn_task_exit()</link></computeroutput>;</para>
</listitem><listitem>
<para>it returns from its task body function (it is the equivalent to <computeroutput>tn_task_exit(0)</computeroutput>)</para>
</listitem><listitem>
<para>some other task calls <computeroutput><link linkend="_tn__tasks_8h_1a8ae6615de7022a327bdcd4c37a0f5b90">tn_task_terminate()</link></computeroutput> passing appropriate pointer to <computeroutput>struct #<link linkend="_structTN__Task">TN_Task</link></computeroutput>.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_tn__tasks_8h_1tn_tasks__scheduling">
<title>Scheduling rules</title>

<para>TNeo always runs the most privileged task in state <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a02783ac7808aeda318a6f506b7a276dc"><computeroutput>RUNNABLE</computeroutput></link>. In no circumstances can task run while there is at least one task is in the <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a02783ac7808aeda318a6f506b7a276dc"><computeroutput>RUNNABLE</computeroutput></link> state with higher priority. Task will run until:</para>

<para><itemizedlist>
<listitem>
<para>It becomes non-runnable (say, it may wait for something, etc)</para>
</listitem><listitem>
<para>Some other task with higher priority becomes runnable.</para>
</listitem></itemizedlist>
</para>

<para>Tasks with the same priority may be scheduled in round robin fashion by getting a predetermined time slice for each task with this priority. Time slice is set separately for each priority. By default, round robin is turned off for all priorities.</para>
</section>
<section xml:id="_tn__tasks_8h_1tn_tasks__idle">
<title>Idle task</title>

<para>TNeo has one system task: an idle task, which has lowest priority. It is always in the state <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a02783ac7808aeda318a6f506b7a276dc"><computeroutput>RUNNABLE</computeroutput></link>, and it runs only when there are no other runnable tasks.</para>

<para>User can provide a callback function to be called from idle task, see <link linkend="_tn__sys_8h_1ac3811d563ff671cb7bd1519735e20fd1">TN_CBIdle</link>. It is useful to bring the processor to some kind of real idle state, so that device draws less current. </para>
</section>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structTN__TaskTiming">TN_TaskTiming</link></para>

<para>Timing structure that is managed by profiler and can be read by <computeroutput>#<link linkend="_tn__tasks_8h_1a8f90a88f54d2d49bb1de00886241edfe">tn_task_profiler_timing_get()</link></computeroutput> function. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct__TN__TaskProfiler">_TN_TaskProfiler</link></para>

<para>Internal kernel structure for profiling data of task. </para>
</listitem>
            <listitem><para>struct <link linkend="_structTN__Task">TN_Task</link></para>

<para>Task. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6">TN_TaskState</link> { 
<link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a8d5e0658feb4dce26cfc008bc5f9303d">TN_TASK_STATE_NONE</link> = 0, 
<link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a02783ac7808aeda318a6f506b7a276dc">TN_TASK_STATE_RUNNABLE</link> = (1 &lt;&lt; 0), 
<link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6aaa3dfaf2bb5992e0cef981618ce30d56">TN_TASK_STATE_WAIT</link> = (1 &lt;&lt; 1), 
<link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6adcf21b28920038f38cccc50fda12ba58">TN_TASK_STATE_SUSPEND</link> = (1 &lt;&lt; 2), 

<link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6ad010070ccc16a5c706c286baf2e3ee2a">TN_TASK_STATE_WAITSUSP</link> = (TN_TASK_STATE_WAIT | TN_TASK_STATE_SUSPEND), 
<link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a46ec35f78d82d1b14f1dd35b3e762b3b">TN_TASK_STATE_DORMANT</link> = (1 &lt;&lt; 3)
 }</para>

<para>Task state. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7">TN_WaitReason</link> { 
<link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a91327db45e01ddc873b4030e5638a4a4">TN_WAIT_REASON_NONE</link>, 
<link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7ac6d257af77c2e0d77bbbdf7a135e297e">TN_WAIT_REASON_SLEEP</link>, 
<link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a991bba7e03ed24d60f58032e8e2f32f0">TN_WAIT_REASON_SEM</link>, 
<link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7ae29d8cf36a5aef0397127a6bacb87788">TN_WAIT_REASON_EVENT</link>, 

<link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a4e1933798d7e1ec62d0ad78de771763f">TN_WAIT_REASON_DQUE_WSEND</link>, 
<link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7ace5abb1294b936e62bf5940ab369cafa">TN_WAIT_REASON_DQUE_WRECEIVE</link>, 
<link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a2bacdbdbd4c3436b752e4b6e07710d47">TN_WAIT_REASON_MUTEX_C</link>, 
<link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a7e9f9bbeea45338617a5d988fc2f4875">TN_WAIT_REASON_MUTEX_I</link>, 

<link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a1354382bc3c908aed3a719ea24c7504c">TN_WAIT_REASON_WFIXMEM</link>, 
<link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a54de9b2b340a9d3f444aaeccda0764ea">TN_WAIT_REASONS_CNT</link>
 }</para>

<para>Task wait reason. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__tasks_8h_1a8fa2ef577d6bd159b3fae559839f98d5">TN_TaskCreateOpt</link> { <link linkend="_tn__tasks_8h_1a8fa2ef577d6bd159b3fae559839f98d5a0c9352496e4465eb7e1b29dab7544acc">TN_TASK_CREATE_OPT_START</link> = (1 &lt;&lt; 0), 
<link linkend="_tn__tasks_8h_1a8fa2ef577d6bd159b3fae559839f98d5a25687fab8eea9b039692307594b82fdc">_TN_TASK_CREATE_OPT_IDLE</link> = (1 &lt;&lt; 1)
 }</para>

<para>Options for <computeroutput><link linkend="_tn__tasks_8h_1a548d5adda09d1b4e393b5df0e9e1a7a5">tn_task_create()</link></computeroutput> </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__tasks_8h_1a467b60e4dccb0e225a4d65b4b1aaea49">TN_TaskExitOpt</link> { <link linkend="_tn__tasks_8h_1a467b60e4dccb0e225a4d65b4b1aaea49adc9e81b172d91a4b11ed80143a08015e">TN_TASK_EXIT_OPT_DELETE</link> = (1 &lt;&lt; 0)
 }</para>

<para>Options for <computeroutput><link linkend="_tn__tasks_8h_1a23e562731e616f01e325bc9830bcc021">tn_task_exit()</link></computeroutput> </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1a548d5adda09d1b4e393b5df0e9e1a7a5">tn_task_create</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task, <link linkend="_tn__common_8h_1a603cbe1ffdafc7e6813ef692bbd7d22f">TN_TaskBody</link> *task_func, int priority, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> *task_stack_low_addr, int task_stack_size, void *param, enum <link linkend="_tn__tasks_8h_1a8fa2ef577d6bd159b3fae559839f98d5">TN_TaskCreateOpt</link> opts)</para>

<para>Construct task and probably start it (depends on options, see below). </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__tasks_8h_1a15a1b4e06dcfeb749de885d5959ab431"/>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1a15a1b4e06dcfeb749de885d5959ab431">tn_task_create_wname</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task, <link linkend="_tn__common_8h_1a603cbe1ffdafc7e6813ef692bbd7d22f">TN_TaskBody</link> *task_func, int priority, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> *task_stack_low_addr, int task_stack_size, void *param, enum <link linkend="_tn__tasks_8h_1a8fa2ef577d6bd159b3fae559839f98d5">TN_TaskCreateOpt</link> opts, const char *name)</para>

<para>The same as <computeroutput><link linkend="_tn__tasks_8h_1a548d5adda09d1b4e393b5df0e9e1a7a5">tn_task_create()</link></computeroutput> but with additional argument <computeroutput>name</computeroutput>, which could be very useful for debug. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1ab8b3066e63fec2d796dc6989f4a87f23">tn_task_suspend</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task)</para>

<para>If the task is <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a02783ac7808aeda318a6f506b7a276dc"><computeroutput>RUNNABLE</computeroutput></link>, it is moved to the <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6adcf21b28920038f38cccc50fda12ba58"><computeroutput>SUSPEND</computeroutput></link> state. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1af30b605f6debaeb66686c525ab0ff553">tn_task_resume</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task)</para>

<para>Release task from <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6adcf21b28920038f38cccc50fda12ba58"><computeroutput>SUSPEND</computeroutput></link> state. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1ae768a72ca0efde5767796cc1770bd45e">tn_task_sleep</link> (<link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</para>

<para>Put current task to sleep for at most timeout ticks. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1abb88bc8b1cec6b82e7b6e2e90d0e155a">tn_task_wakeup</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task)</para>

<para>Wake up task from sleep. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1a94e6a0312013e53cf08bcf871e6f4172">tn_task_iwakeup</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task)</para>

<para>The same as <computeroutput><link linkend="_tn__tasks_8h_1abb88bc8b1cec6b82e7b6e2e90d0e155a">tn_task_wakeup()</link></computeroutput> but for using in the ISR. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1a3c14832fe7dfd2c44678608767f40230">tn_task_activate</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task)</para>

<para>Activate task that is in <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a46ec35f78d82d1b14f1dd35b3e762b3b"><computeroutput>DORMANT</computeroutput></link> state, that is, it was either just created by <computeroutput><link linkend="_tn__tasks_8h_1a548d5adda09d1b4e393b5df0e9e1a7a5">tn_task_create()</link></computeroutput> without <computeroutput>#TN_TASK_CREATE_OPT_START</computeroutput> option, or terminated. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1a46c30078ae437c75121965f70c9d7b4c">tn_task_iactivate</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task)</para>

<para>The same as <computeroutput><link linkend="_tn__tasks_8h_1a3c14832fe7dfd2c44678608767f40230">tn_task_activate()</link></computeroutput> but for using in the ISR. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1ae90ecdbd7d87d050c2c98ec775e6efc7">tn_task_release_wait</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task)</para>

<para>Release task from <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6aaa3dfaf2bb5992e0cef981618ce30d56"><computeroutput>WAIT</computeroutput></link> state, independently of the reason of waiting. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1aee0ef296af18733f64269386adf8a2d7">tn_task_irelease_wait</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task)</para>

<para>The same as <computeroutput><link linkend="_tn__tasks_8h_1ae90ecdbd7d87d050c2c98ec775e6efc7">tn_task_release_wait()</link></computeroutput> but for using in the ISR. </para>
</listitem>
            <listitem><para>void <link linkend="_tn__tasks_8h_1a23e562731e616f01e325bc9830bcc021">tn_task_exit</link> (enum <link linkend="_tn__tasks_8h_1a467b60e4dccb0e225a4d65b4b1aaea49">TN_TaskExitOpt</link> opts)</para>

<para>This function terminates the currently running task. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1a8ae6615de7022a327bdcd4c37a0f5b90">tn_task_terminate</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task)</para>

<para>This function is similar to <computeroutput><link linkend="_tn__tasks_8h_1a23e562731e616f01e325bc9830bcc021">tn_task_exit()</link></computeroutput> but it terminates any task other than currently running one. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1adbc4dbbd4a57b73642b76550a0c7c83f">tn_task_delete</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task)</para>

<para>This function deletes the task specified by the task. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1a18408d825c0dab03511f3aaeeb3ffbb3">tn_task_state_get</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task, enum <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6">TN_TaskState</link> *p_state)</para>

<para>Get current state of the task; note that returned state is a bitmask, that is, states could be combined with each other. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1a8f90a88f54d2d49bb1de00886241edfe">tn_task_profiler_timing_get</link> (const struct <link linkend="_structTN__Task">TN_Task</link> *task, struct <link linkend="_structTN__TaskTiming">TN_TaskTiming</link> *tgt)</para>

<para>Read profiler timing data of the task. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__tasks_8h_1a2ddad9d6dc0e611a7f09c878463aea41">tn_task_change_priority</link> (struct <link linkend="_structTN__Task">TN_Task</link> *task, int new_priority)</para>

<para>Set new priority for task. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6"/>    <section>
    <title>TN_TaskState</title>
<indexterm><primary>TN_TaskState</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_TaskState</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6">TN_TaskState</link></computeroutput></para><para>

<para>Task state. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>TN_TASK_STATE_NONE</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_TASK_STATE_NONE</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a8d5e0658feb4dce26cfc008bc5f9303d"/>TN_TASK_STATE_NONE</entry><entry>
<para>This state should never be publicly available. </para>

<para>It may be stored in task_state only temporarily, while some system service is in progress. </para>
</entry></row><row><entry><indexterm><primary>TN_TASK_STATE_RUNNABLE</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_TASK_STATE_RUNNABLE</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a02783ac7808aeda318a6f506b7a276dc"/>TN_TASK_STATE_RUNNABLE</entry><entry>
<para>Task is ready to run (it doesn&apos;t mean that it is running at the moment) </para>
</entry></row><row><entry><indexterm><primary>TN_TASK_STATE_WAIT</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_TASK_STATE_WAIT</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6aaa3dfaf2bb5992e0cef981618ce30d56"/>TN_TASK_STATE_WAIT</entry><entry>
<para>Task is waiting. </para>

<para>The reason of waiting can be obtained from <computeroutput>task_wait_reason</computeroutput> field of the <computeroutput>struct <link linkend="_structTN__Task">TN_Task</link></computeroutput>.</para>

<para><formalpara><title>See also</title>

<para><computeroutput>enum #<link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7">TN_WaitReason</link></computeroutput> </para>
</formalpara>
</para>
</entry></row><row><entry><indexterm><primary>TN_TASK_STATE_SUSPEND</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_TASK_STATE_SUSPEND</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6adcf21b28920038f38cccc50fda12ba58"/>TN_TASK_STATE_SUSPEND</entry><entry>
<para>Task is suspended (by some other task) </para>
</entry></row><row><entry><indexterm><primary>TN_TASK_STATE_WAITSUSP</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_TASK_STATE_WAITSUSP</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6ad010070ccc16a5c706c286baf2e3ee2a"/>TN_TASK_STATE_WAITSUSP</entry><entry>
<para>Task was previously waiting, and after this it was suspended. </para>
</entry></row><row><entry><indexterm><primary>TN_TASK_STATE_DORMANT</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_TASK_STATE_DORMANT</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a46ec35f78d82d1b14f1dd35b3e762b3b"/>TN_TASK_STATE_DORMANT</entry><entry>
<para>Task isn&apos;t yet activated or it was terminated by <computeroutput><link linkend="_tn__tasks_8h_1a8ae6615de7022a327bdcd4c37a0f5b90">tn_task_terminate()</link></computeroutput>. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 141 of file tn_tasks.h.</para>
    </section><anchor xml:id="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7"/>    <section>
    <title>TN_WaitReason</title>
<indexterm><primary>TN_WaitReason</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_WaitReason</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7">TN_WaitReason</link></computeroutput></para><para>

<para>Task wait reason. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>TN_WAIT_REASON_NONE</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_WAIT_REASON_NONE</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a91327db45e01ddc873b4030e5638a4a4"/>TN_WAIT_REASON_NONE</entry><entry>
<para>Task isn&apos;t waiting for anything. </para>
</entry></row><row><entry><indexterm><primary>TN_WAIT_REASON_SLEEP</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_WAIT_REASON_SLEEP</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7ac6d257af77c2e0d77bbbdf7a135e297e"/>TN_WAIT_REASON_SLEEP</entry><entry>
<para>Task has called <computeroutput><link linkend="_tn__tasks_8h_1ae768a72ca0efde5767796cc1770bd45e">tn_task_sleep()</link></computeroutput> </para>
</entry></row><row><entry><indexterm><primary>TN_WAIT_REASON_SEM</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_WAIT_REASON_SEM</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a991bba7e03ed24d60f58032e8e2f32f0"/>TN_WAIT_REASON_SEM</entry><entry>
<para>Task waits to acquire a semaphore. </para>

<para><formalpara><title>See also</title>

<para><link linkend="_tn__sem_8h">tn_sem.h</link> </para>
</formalpara>
</para>
</entry></row><row><entry><indexterm><primary>TN_WAIT_REASON_EVENT</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_WAIT_REASON_EVENT</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7ae29d8cf36a5aef0397127a6bacb87788"/>TN_WAIT_REASON_EVENT</entry><entry>
<para>Task waits for some event in the event group to be set. </para>

<para><formalpara><title>See also</title>

<para><link linkend="_tn__eventgrp_8h">tn_eventgrp.h</link> </para>
</formalpara>
</para>
</entry></row><row><entry><indexterm><primary>TN_WAIT_REASON_DQUE_WSEND</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_WAIT_REASON_DQUE_WSEND</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a4e1933798d7e1ec62d0ad78de771763f"/>TN_WAIT_REASON_DQUE_WSEND</entry><entry>
<para>Task wants to put some data to the data queue, and there&apos;s no space in the queue. </para>

<para><formalpara><title>See also</title>

<para><link linkend="_tn__dqueue_8h">tn_dqueue.h</link> </para>
</formalpara>
</para>
</entry></row><row><entry><indexterm><primary>TN_WAIT_REASON_DQUE_WRECEIVE</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_WAIT_REASON_DQUE_WRECEIVE</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7ace5abb1294b936e62bf5940ab369cafa"/>TN_WAIT_REASON_DQUE_WRECEIVE</entry><entry>
<para>Task wants to receive some data to the data queue, and there&apos;s no data in the queue. </para>

<para><formalpara><title>See also</title>

<para><link linkend="_tn__dqueue_8h">tn_dqueue.h</link> </para>
</formalpara>
</para>
</entry></row><row><entry><indexterm><primary>TN_WAIT_REASON_MUTEX_C</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_WAIT_REASON_MUTEX_C</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a2bacdbdbd4c3436b752e4b6e07710d47"/>TN_WAIT_REASON_MUTEX_C</entry><entry>
<para>Task wants to lock a mutex with priority ceiling. </para>

<para><formalpara><title>See also</title>

<para><link linkend="_tn__mutex_8h">tn_mutex.h</link> </para>
</formalpara>
</para>
</entry></row><row><entry><indexterm><primary>TN_WAIT_REASON_MUTEX_I</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_WAIT_REASON_MUTEX_I</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a7e9f9bbeea45338617a5d988fc2f4875"/>TN_WAIT_REASON_MUTEX_I</entry><entry>
<para>Task wants to lock a mutex with priority inheritance. </para>

<para><formalpara><title>See also</title>

<para><link linkend="_tn__mutex_8h">tn_mutex.h</link> </para>
</formalpara>
</para>
</entry></row><row><entry><indexterm><primary>TN_WAIT_REASON_WFIXMEM</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_WAIT_REASON_WFIXMEM</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a1354382bc3c908aed3a719ea24c7504c"/>TN_WAIT_REASON_WFIXMEM</entry><entry>
<para>Task wants to get memory block from memory pool, and there&apos;s no free memory blocks. </para>

<para><formalpara><title>See also</title>

<para><link linkend="_tn__fmem_8h">tn_fmem.h</link> </para>
</formalpara>
</para>
</entry></row><row><entry><indexterm><primary>TN_WAIT_REASONS_CNT</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_WAIT_REASONS_CNT</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a343b0332013c15d6e878c2f60ed2c9b7a54de9b2b340a9d3f444aaeccda0764ea"/>TN_WAIT_REASONS_CNT</entry><entry>
<para>Wait reasons count. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 173 of file tn_tasks.h.</para>
    </section><anchor xml:id="_tn__tasks_8h_1a8fa2ef577d6bd159b3fae559839f98d5"/>    <section>
    <title>TN_TaskCreateOpt</title>
<indexterm><primary>TN_TaskCreateOpt</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_TaskCreateOpt</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__tasks_8h_1a8fa2ef577d6bd159b3fae559839f98d5">TN_TaskCreateOpt</link></computeroutput></para><para>

<para>Options for <computeroutput><link linkend="_tn__tasks_8h_1a548d5adda09d1b4e393b5df0e9e1a7a5">tn_task_create()</link></computeroutput> </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>TN_TASK_CREATE_OPT_START</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_TASK_CREATE_OPT_START</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a8fa2ef577d6bd159b3fae559839f98d5a0c9352496e4465eb7e1b29dab7544acc"/>TN_TASK_CREATE_OPT_START</entry><entry>
<para>whether task should be activated right after it is created. </para>

<para>If this flag is not set, user must activate task manually by calling <computeroutput><link linkend="_tn__tasks_8h_1a3c14832fe7dfd2c44678608767f40230">tn_task_activate()</link></computeroutput>. </para>
</entry></row><row><entry><indexterm><primary>_TN_TASK_CREATE_OPT_IDLE</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>_TN_TASK_CREATE_OPT_IDLE</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a8fa2ef577d6bd159b3fae559839f98d5a25687fab8eea9b039692307594b82fdc"/>_TN_TASK_CREATE_OPT_IDLE</entry><entry>
<para>for internal kernel usage only: this option must be provided when creating idle task </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 221 of file tn_tasks.h.</para>
    </section><anchor xml:id="_tn__tasks_8h_1a467b60e4dccb0e225a4d65b4b1aaea49"/>    <section>
    <title>TN_TaskExitOpt</title>
<indexterm><primary>TN_TaskExitOpt</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_TaskExitOpt</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__tasks_8h_1a467b60e4dccb0e225a4d65b4b1aaea49">TN_TaskExitOpt</link></computeroutput></para><para>

<para>Options for <computeroutput><link linkend="_tn__tasks_8h_1a23e562731e616f01e325bc9830bcc021">tn_task_exit()</link></computeroutput> </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>TN_TASK_EXIT_OPT_DELETE</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>TN_TASK_EXIT_OPT_DELETE</secondary></indexterm>
<anchor xml:id="_tn__tasks_8h_1a467b60e4dccb0e225a4d65b4b1aaea49adc9e81b172d91a4b11ed80143a08015e"/>TN_TASK_EXIT_OPT_DELETE</entry><entry>
<para>whether task should be deleted right after it is exited. </para>

<para>If this flag is not set, user must either delete it manually by calling <computeroutput><link linkend="_tn__tasks_8h_1adbc4dbbd4a57b73642b76550a0c7c83f">tn_task_delete()</link></computeroutput> or re-activate it by calling <computeroutput><link linkend="_tn__tasks_8h_1a3c14832fe7dfd2c44678608767f40230">tn_task_activate()</link></computeroutput>. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 236 of file tn_tasks.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_tn__tasks_8h_1a548d5adda09d1b4e393b5df0e9e1a7a5"/>    <section>
    <title>tn_task_create()</title>
<indexterm><primary>tn_task_create</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_create</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_create (struct <link linkend="_structTN__Task">TN_Task</link> * task, <link linkend="_tn__common_8h_1a603cbe1ffdafc7e6813ef692bbd7d22f">TN_TaskBody</link> * task_func, int priority, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> * task_stack_low_addr, int task_stack_size, void * param, enum <link linkend="_tn__tasks_8h_1a8fa2ef577d6bd159b3fae559839f98d5">TN_TaskCreateOpt</link> opts)</computeroutput></para><para>

<para>Construct task and probably start it (depends on options, see below). </para>
</para>

<para><computeroutput>id_task</computeroutput> member should not contain <computeroutput>#TN_ID_TASK</computeroutput>, otherwise, <computeroutput>#TN_RC_WPARAM</computeroutput> is returned.</para>

<para>Usage example:</para>

<para><literallayout><computeroutput>#define&#32;MY_TASK_STACK_SIZE&#32;&#32;&#32;(TN_MIN_STACK_SIZE&#32;+&#32;200)
#define&#32;MY_TASK_PRIORITY&#32;&#32;&#32;&#32;&#32;5

struct&#32;TN_Task&#32;my_task;

//--&#32;define&#32;stack&#32;array,&#32;we&#32;use&#32;convenience&#32;macro&#32;TN_STACK_ARR_DEF()
//&#32;&#32;&#32;for&#32;that
TN_STACK_ARR_DEF(my_task_stack,&#32;MY_TASK_STACK_SIZE);

void&#32;my_task_body(void&#32;*param)
{
&#32;&#32;&#32;//--&#32;an&#32;endless&#32;loop
&#32;&#32;&#32;for&#32;(;;){
&#32;&#32;&#32;&#32;&#32;&#32;tn_task_sleep(1);

&#32;&#32;&#32;&#32;&#32;&#32;//--&#32;probably&#32;do&#32;something&#32;useful
&#32;&#32;&#32;}
}
</computeroutput></literallayout></para>

<para>And then, somewhere from other task or from the callback <computeroutput>#TN_CBUserTaskCreate</computeroutput> given to <computeroutput><link linkend="_tn__sys_8h_1a62ab25d9d8ca01c02d368968f19e49bf">tn_sys_start()</link></computeroutput> : <literallayout><computeroutput>enum&#32;TN_RCode&#32;rc&#32;=&#32;tn_task_create(
&#32;&#32;&#32;&#32;&#32;&#32;&amp;my_task,
&#32;&#32;&#32;&#32;&#32;&#32;my_task_body,
&#32;&#32;&#32;&#32;&#32;&#32;MY_TASK_PRIORITY,
&#32;&#32;&#32;&#32;&#32;&#32;my_task_stack,
&#32;&#32;&#32;&#32;&#32;&#32;MY_TASK_STACK_SIZE,
&#32;&#32;&#32;&#32;&#32;&#32;TN_NULL,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//--&#32;parameter&#32;isn&apos;t&#32;used
&#32;&#32;&#32;&#32;&#32;&#32;TN_TASK_CREATE_OPT_START&#32;&#32;//--&#32;start&#32;task&#32;on&#32;creation
&#32;&#32;&#32;&#32;&#32;&#32;);

if&#32;(rc&#32;!=&#32;TN_RC_OK){
&#32;&#32;&#32;//--&#32;handle&#32;error
}
</computeroutput></literallayout></para>

<para>  <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>task</entry>
                                <entry>
<para>Ready-allocated <computeroutput>struct <link linkend="_structTN__Task">TN_Task</link></computeroutput> structure. <computeroutput>id_task</computeroutput> member should not contain <computeroutput>#TN_ID_TASK</computeroutput>, otherwise <computeroutput>#TN_RC_WPARAM</computeroutput> is returned. </para>
</entry>
                            </row>
                            <row>
                                <entry>task_func</entry>
                                <entry>
<para>
<literallayout>&#160;&#xa;</literallayout>
 Pointer to task body function. </para>
</entry>
                            </row>
                            <row>
                                <entry>priority</entry>
                                <entry>
<para>Priority for new task. <emphasis role="bold">NOTE</emphasis>: the lower value, the higher priority. Must be &gt; <computeroutput>0</computeroutput> and &lt; <computeroutput>(#TN_PRIORITIES_CNT - 1)</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>task_stack_low_addr</entry>
                                <entry>
<para>
<literallayout>&#160;&#xa;</literallayout>
 Pointer to the stack for task. User must either use the macro <computeroutput><link linkend="_tn__sys_8h_1ad61af0f0e9ab96bdf1ac1bf1e03e3c75">TN_STACK_ARR_DEF()</link></computeroutput> for the definition of stack array, or allocate it manually as an array of <computeroutput>#TN_UWord</computeroutput> with <computeroutput>#TN_ARCH_STK_ATTR_BEFORE</computeroutput> and <computeroutput>#TN_ARCH_STK_ATTR_AFTER</computeroutput> macros. </para>
</entry>
                            </row>
                            <row>
                                <entry>task_stack_size</entry>
                                <entry>
<para>Size of task stack array, in words (<computeroutput>#TN_UWord</computeroutput>), not in bytes. </para>
</entry>
                            </row>
                            <row>
                                <entry>param</entry>
                                <entry>
<para>Parameter that is passed to <computeroutput>task_func</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>opts</entry>
                                <entry>
<para>Options for task creation, refer to <computeroutput>enum #TN_TaskCreateOpt</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> on success;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WPARAM</computeroutput> if wrong params were given;</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__tasks_8h_1a15a1b4e06dcfeb749de885d5959ab431">tn_task_create_wname()</link></computeroutput> </para>

<para><computeroutput>#<link linkend="_tn__arch__example_8h_1ae245dddb19cd7c12b7038a62d576fafa">TN_ARCH_STK_ATTR_BEFORE</link></computeroutput> </para>

<para><computeroutput>#<link linkend="_tn__arch__example_8h_1ab082613959b539182b8b47bc87d18d6a">TN_ARCH_STK_ATTR_AFTER</link></computeroutput> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__tasks_8h_1ab8b3066e63fec2d796dc6989f4a87f23"/>    <section>
    <title>tn_task_suspend()</title>
<indexterm><primary>tn_task_suspend</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_suspend</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_suspend (struct <link linkend="_structTN__Task">TN_Task</link> * task)</computeroutput></para><para>

<para>If the task is <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a02783ac7808aeda318a6f506b7a276dc"><computeroutput>RUNNABLE</computeroutput></link>, it is moved to the <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6adcf21b28920038f38cccc50fda12ba58"><computeroutput>SUSPEND</computeroutput></link> state. </para>
</para>

<para>If the task is in the <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6aaa3dfaf2bb5992e0cef981618ce30d56"><computeroutput>WAIT</computeroutput></link> state, it is moved to the <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6ad010070ccc16a5c706c286baf2e3ee2a"><computeroutput>WAIT+SUSPEND</computeroutput></link> state. (waiting + suspended)</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>task</entry>
                                <entry>
<para>Task to suspend</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> on success;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WSTATE</computeroutput> if task is already suspended or dormant;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara><title>See also</title>

<para><computeroutput>enum #<link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6">TN_TaskState</link></computeroutput> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__tasks_8h_1af30b605f6debaeb66686c525ab0ff553"/>    <section>
    <title>tn_task_resume()</title>
<indexterm><primary>tn_task_resume</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_resume</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_resume (struct <link linkend="_structTN__Task">TN_Task</link> * task)</computeroutput></para><para>

<para>Release task from <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6adcf21b28920038f38cccc50fda12ba58"><computeroutput>SUSPEND</computeroutput></link> state. </para>
</para>

<para>If the given task is in the <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6adcf21b28920038f38cccc50fda12ba58"><computeroutput>SUSPEND</computeroutput></link> state, it is moved to <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a02783ac7808aeda318a6f506b7a276dc"><computeroutput>RUNNABLE</computeroutput></link> state; afterwards it has the lowest precedence among runnable tasks with the same priority. If the task is in <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6ad010070ccc16a5c706c286baf2e3ee2a"><computeroutput>WAIT+SUSPEND</computeroutput></link> state, it is moved to <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6aaa3dfaf2bb5992e0cef981618ce30d56"><computeroutput>WAIT</computeroutput></link> state.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>task</entry>
                                <entry>
<para>Task to release from suspended state</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> on success;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WSTATE</computeroutput> if task is not suspended;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara><title>See also</title>

<para>enum <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6">TN_TaskState</link> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__tasks_8h_1ae768a72ca0efde5767796cc1770bd45e"/>    <section>
    <title>tn_task_sleep()</title>
<indexterm><primary>tn_task_sleep</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_sleep</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_sleep (<link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</computeroutput></para><para>

<para>Put current task to sleep for at most timeout ticks. </para>
</para>

<para>When the timeout expires and the task was not suspended during the sleep, it is switched to runnable state. If the timeout value is <computeroutput>#TN_WAIT_INFINITE</computeroutput> and the task was not suspended during the sleep, the task will sleep until another function call (like <computeroutput><link linkend="_tn__tasks_8h_1abb88bc8b1cec6b82e7b6e2e90d0e155a">tn_task_wakeup()</link></computeroutput> or similar) will make it runnable.</para>

<para>      <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>timeout</entry>
                                <entry>
<para>Refer to <computeroutput>#TN_TickCnt</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_TIMEOUT</computeroutput> if task has slept specified timeout;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if task was woken up from other task by <computeroutput><link linkend="_tn__tasks_8h_1abb88bc8b1cec6b82e7b6e2e90d0e155a">tn_task_wakeup()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>#TN_RC_FORCED</computeroutput> if task was released from wait forcibly by <computeroutput><link linkend="_tn__tasks_8h_1ae90ecdbd7d87d050c2c98ec775e6efc7">tn_task_release_wait()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__tasks_8h_1abb88bc8b1cec6b82e7b6e2e90d0e155a"/>    <section>
    <title>tn_task_wakeup()</title>
<indexterm><primary>tn_task_wakeup</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_wakeup</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_wakeup (struct <link linkend="_structTN__Task">TN_Task</link> * task)</computeroutput></para><para>

<para>Wake up task from sleep. </para>
</para>

<para>Task is woken up if only it sleeps because of call to <computeroutput><link linkend="_tn__tasks_8h_1ae768a72ca0efde5767796cc1770bd45e">tn_task_sleep()</link></computeroutput>. If task sleeps for some another reason, task won&apos;t be woken up, and <computeroutput><link linkend="_tn__tasks_8h_1abb88bc8b1cec6b82e7b6e2e90d0e155a">tn_task_wakeup()</link></computeroutput> returns <computeroutput>#TN_RC_WSTATE</computeroutput>.</para>

<para>After this call, <computeroutput><link linkend="_tn__tasks_8h_1ae768a72ca0efde5767796cc1770bd45e">tn_task_sleep()</link></computeroutput> returns <computeroutput>#TN_RC_OK</computeroutput>.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>task</entry>
                                <entry>
<para>sleeping task to wake up</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if successful</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WSTATE</computeroutput> if task is not sleeping, or it is sleeping for some reason other than <computeroutput><link linkend="_tn__tasks_8h_1ae768a72ca0efde5767796cc1770bd45e">tn_task_sleep()</link></computeroutput> call.</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__tasks_8h_1a94e6a0312013e53cf08bcf871e6f4172"/>    <section>
    <title>tn_task_iwakeup()</title>
<indexterm><primary>tn_task_iwakeup</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_iwakeup</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_iwakeup (struct <link linkend="_structTN__Task">TN_Task</link> * task)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__tasks_8h_1abb88bc8b1cec6b82e7b6e2e90d0e155a">tn_task_wakeup()</link></computeroutput> but for using in the ISR. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__tasks_8h_1a3c14832fe7dfd2c44678608767f40230"/>    <section>
    <title>tn_task_activate()</title>
<indexterm><primary>tn_task_activate</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_activate</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_activate (struct <link linkend="_structTN__Task">TN_Task</link> * task)</computeroutput></para><para>

<para>Activate task that is in <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a46ec35f78d82d1b14f1dd35b3e762b3b"><computeroutput>DORMANT</computeroutput></link> state, that is, it was either just created by <computeroutput><link linkend="_tn__tasks_8h_1a548d5adda09d1b4e393b5df0e9e1a7a5">tn_task_create()</link></computeroutput> without <computeroutput>#TN_TASK_CREATE_OPT_START</computeroutput> option, or terminated. </para>
</para>

<para>Task is moved from <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a46ec35f78d82d1b14f1dd35b3e762b3b"><computeroutput>DORMANT</computeroutput></link> state to the <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a02783ac7808aeda318a6f506b7a276dc"><computeroutput>RUNNABLE</computeroutput></link> state.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>task</entry>
                                <entry>
<para>dormant task to activate</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if successful</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WSTATE</computeroutput> if task is not dormant</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6">TN_TaskState</link> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__tasks_8h_1a46c30078ae437c75121965f70c9d7b4c"/>    <section>
    <title>tn_task_iactivate()</title>
<indexterm><primary>tn_task_iactivate</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_iactivate</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_iactivate (struct <link linkend="_structTN__Task">TN_Task</link> * task)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__tasks_8h_1a3c14832fe7dfd2c44678608767f40230">tn_task_activate()</link></computeroutput> but for using in the ISR. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__tasks_8h_1ae90ecdbd7d87d050c2c98ec775e6efc7"/>    <section>
    <title>tn_task_release_wait()</title>
<indexterm><primary>tn_task_release_wait</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_release_wait</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_release_wait (struct <link linkend="_structTN__Task">TN_Task</link> * task)</computeroutput></para><para>

<para>Release task from <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6aaa3dfaf2bb5992e0cef981618ce30d56"><computeroutput>WAIT</computeroutput></link> state, independently of the reason of waiting. </para>
</para>

<para>If task is in <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6aaa3dfaf2bb5992e0cef981618ce30d56"><computeroutput>WAIT</computeroutput></link> state, it is moved to <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a02783ac7808aeda318a6f506b7a276dc"><computeroutput>RUNNABLE</computeroutput></link> state. If task is in <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6ad010070ccc16a5c706c286baf2e3ee2a"><computeroutput>WAIT+SUSPEND</computeroutput></link> state, it is moved to <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6adcf21b28920038f38cccc50fda12ba58"><computeroutput>SUSPEND</computeroutput></link> state.</para>

<para><computeroutput>#TN_RC_FORCED</computeroutput> is returned to the waiting task.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para><caution><title>Attention</title>

<para>Usage of this function is discouraged, since the need for it indicates bad software design</para>
</caution>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>task</entry>
                                <entry>
<para>task waiting for anything</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if successful</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WSTATE</computeroutput> if task is not waiting for anything</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6">TN_TaskState</link> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__tasks_8h_1aee0ef296af18733f64269386adf8a2d7"/>    <section>
    <title>tn_task_irelease_wait()</title>
<indexterm><primary>tn_task_irelease_wait</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_irelease_wait</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_irelease_wait (struct <link linkend="_structTN__Task">TN_Task</link> * task)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__tasks_8h_1ae90ecdbd7d87d050c2c98ec775e6efc7">tn_task_release_wait()</link></computeroutput> but for using in the ISR. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__tasks_8h_1a23e562731e616f01e325bc9830bcc021"/>    <section>
    <title>tn_task_exit()</title>
<indexterm><primary>tn_task_exit</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_exit</secondary></indexterm>
<para><computeroutput>void tn_task_exit (enum <link linkend="_tn__tasks_8h_1a467b60e4dccb0e225a4d65b4b1aaea49">TN_TaskExitOpt</link> opts)</computeroutput></para><para>

<para>This function terminates the currently running task. </para>
</para>

<para>The task is moved to the <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a46ec35f78d82d1b14f1dd35b3e762b3b"><computeroutput>DORMANT</computeroutput></link> state.</para>

<para>After exiting, the task may be either deleted by the <computeroutput><link linkend="_tn__tasks_8h_1adbc4dbbd4a57b73642b76550a0c7c83f">tn_task_delete()</link></computeroutput> function call or reactivated by the <computeroutput><link linkend="_tn__tasks_8h_1a3c14832fe7dfd2c44678608767f40230">tn_task_activate()</link></computeroutput> / <computeroutput><link linkend="_tn__tasks_8h_1a46c30078ae437c75121965f70c9d7b4c">tn_task_iactivate()</link></computeroutput> function call. In this case task starts execution from beginning (as after creation/activation). The task will have the lowest precedence among all tasks with the same priority in the <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a02783ac7808aeda318a6f506b7a276dc"><computeroutput>RUNNABLE</computeroutput></link> state.</para>

<para>If this function is invoked with <computeroutput>#TN_TASK_EXIT_OPT_DELETE</computeroutput> option set, the task will be deleted after termination and cannot be reactivated (needs recreation).</para>

<para>Please note that returning from task body function has the same effect as calling <computeroutput>tn_task_exit(0)</computeroutput>.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para><formalpara><title>Returns</title>

<para>Returns if only called from wrong context. Normally, it never returns (since calling task becomes terminated)</para>
</formalpara>
<formalpara><title>See also</title>

<para><computeroutput>#<link linkend="_tn__tasks_8h_1a467b60e4dccb0e225a4d65b4b1aaea49adc9e81b172d91a4b11ed80143a08015e">TN_TASK_EXIT_OPT_DELETE</link></computeroutput> </para>

<para><computeroutput><link linkend="_tn__tasks_8h_1adbc4dbbd4a57b73642b76550a0c7c83f">tn_task_delete()</link></computeroutput> </para>

<para><computeroutput><link linkend="_tn__tasks_8h_1a3c14832fe7dfd2c44678608767f40230">tn_task_activate()</link></computeroutput> </para>

<para><computeroutput><link linkend="_tn__tasks_8h_1a46c30078ae437c75121965f70c9d7b4c">tn_task_iactivate()</link></computeroutput> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__tasks_8h_1a8ae6615de7022a327bdcd4c37a0f5b90"/>    <section>
    <title>tn_task_terminate()</title>
<indexterm><primary>tn_task_terminate</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_terminate</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_terminate (struct <link linkend="_structTN__Task">TN_Task</link> * task)</computeroutput></para><para>

<para>This function is similar to <computeroutput><link linkend="_tn__tasks_8h_1a23e562731e616f01e325bc9830bcc021">tn_task_exit()</link></computeroutput> but it terminates any task other than currently running one. </para>
</para>

<para>After task is terminated, the task may be either deleted by the <computeroutput><link linkend="_tn__tasks_8h_1adbc4dbbd4a57b73642b76550a0c7c83f">tn_task_delete()</link></computeroutput> function call or reactivated by the <computeroutput><link linkend="_tn__tasks_8h_1a3c14832fe7dfd2c44678608767f40230">tn_task_activate()</link></computeroutput> / <computeroutput><link linkend="_tn__tasks_8h_1a46c30078ae437c75121965f70c9d7b4c">tn_task_iactivate()</link></computeroutput> function call. In this case task starts execution from beginning (as after creation/activation). The task will have the lowest precedence among all tasks with the same priority in the <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a02783ac7808aeda318a6f506b7a276dc"><computeroutput>RUNNABLE</computeroutput></link> state.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>task</entry>
                                <entry>
<para>task to terminate</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if successful</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WSTATE</computeroutput> if task is already dormant</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__tasks_8h_1adbc4dbbd4a57b73642b76550a0c7c83f"/>    <section>
    <title>tn_task_delete()</title>
<indexterm><primary>tn_task_delete</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_delete</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_delete (struct <link linkend="_structTN__Task">TN_Task</link> * task)</computeroutput></para><para>

<para>This function deletes the task specified by the task. </para>
</para>

<para>The task must be in the <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a46ec35f78d82d1b14f1dd35b3e762b3b"><computeroutput>DORMANT</computeroutput></link> state, otherwise <computeroutput>#TN_RC_WCONTEXT</computeroutput> will be returned.</para>

<para>This function resets the <computeroutput>id_task</computeroutput> field in the task structure to 0 and removes the task from the system tasks list. The task can not be reactivated after this function call (the task must be recreated).</para>

<para>  <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>task</entry>
                                <entry>
<para>dormant task to delete</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if successful</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WSTATE</computeroutput> if task is not dormant</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__tasks_8h_1a18408d825c0dab03511f3aaeeb3ffbb3"/>    <section>
    <title>tn_task_state_get()</title>
<indexterm><primary>tn_task_state_get</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_state_get</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_state_get (struct <link linkend="_structTN__Task">TN_Task</link> * task, enum <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6">TN_TaskState</link> * p_state)</computeroutput></para><para>

<para>Get current state of the task; note that returned state is a bitmask, that is, states could be combined with each other. </para>
</para>

<para>Currently, only <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6aaa3dfaf2bb5992e0cef981618ce30d56"><computeroutput>WAIT</computeroutput></link> and <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6adcf21b28920038f38cccc50fda12ba58"><computeroutput>SUSPEND</computeroutput></link> states are allowed to be set together. Nevertheless, it would be probably good idea to test individual bits in the returned value instead of plain comparing values.</para>

<para>Note that if something goes wrong, variable pointed to by <computeroutput>p_state</computeroutput> isn&apos;t touched.</para>

<para>  <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>task</entry>
                                <entry>
<para>task to get state of </para>
</entry>
                            </row>
                            <row>
                                <entry>p_state</entry>
                                <entry>
<para>pointer to the location where to store state of the task</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>state of the task </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__tasks_8h_1a8f90a88f54d2d49bb1de00886241edfe"/>    <section>
    <title>tn_task_profiler_timing_get()</title>
<indexterm><primary>tn_task_profiler_timing_get</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_profiler_timing_get</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_profiler_timing_get (const struct <link linkend="_structTN__Task">TN_Task</link> * task, struct <link linkend="_structTN__TaskTiming">TN_TaskTiming</link> * tgt)</computeroutput></para><para>

<para>Read profiler timing data of the task. </para>
</para>

<para>See <computeroutput>struct #<link linkend="_structTN__TaskTiming">TN_TaskTiming</link></computeroutput> for details on timing data.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>task</entry>
                                <entry>
<para>Task to get timing data of </para>
</entry>
                            </row>
                            <row>
                                <entry>tgt</entry>
                                <entry>
<para>Target structure to fill with data, should be allocated by caller </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_tn__tasks_8h_1a2ddad9d6dc0e611a7f09c878463aea41"/>    <section>
    <title>tn_task_change_priority()</title>
<indexterm><primary>tn_task_change_priority</primary><secondary>tn_tasks.h</secondary></indexterm>
<indexterm><primary>tn_tasks.h</primary><secondary>tn_task_change_priority</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_task_change_priority (struct <link linkend="_structTN__Task">TN_Task</link> * task, int new_priority)</computeroutput></para><para>

<para>Set new priority for task. </para>
</para>

<para>If priority is 0, then task&apos;s base_priority is set.</para>

<para>  <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para><caution><title>Attention</title>

<para>this function is obsolete and will probably be removed </para>
</caution>
</para>
</section>
</section>
</section>
