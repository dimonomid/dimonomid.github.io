<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_time_ticks">

<para>The kernel needs to calculate timeouts. There are two schemes available: <emphasis>static tick</emphasis> and <emphasis>dynamic tick</emphasis>.</para>
<section xml:id="_time_ticks_1time_ticks__static_tick">
<title>Static tick</title>

<para>Static tick is the easiest way to implement timeouts: there should be just some kind of hardware timer that generates interrupts periodically. Throughout this text, this timer is referred to as <emphasis>system timer</emphasis>. The period of this timer is determined by user (typically 1 ms, but user is free to set different value). In the ISR for this timer, it is only necessary to call the <computeroutput><link linkend="_tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing()</link></computeroutput> function:</para>

<para><literallayout><computeroutput>//--&#32;example&#32;for&#32;PIC32,&#32;hardware&#32;timer&#32;5&#32;interrupt:
tn_p32_soft_isr(_TIMER_5_VECTOR)
{
&#32;&#32;&#32;INTClearFlag(INT_T5);
&#32;&#32;&#32;tn_tick_int_processing();
}
</computeroutput></literallayout></para>

<para>But for some applications that spend a lot of time doing nothing this could be far from perfect: instead of being constantly in the power-saving mode while there&apos;s nothing to do, the CPU needs to wake up regularly. So, <emphasis>dynamic tick</emphasis> scheme was implemented:</para>
</section>
<section xml:id="_time_ticks_1time_ticks__dynamic_tick">
<title>Dynamic tick</title>

<para>The general idea is that there should be no useless calls to <computeroutput><link linkend="_tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing()</link></computeroutput>. If the kernel needs to wake up after 100 system ticks, then, <computeroutput><link linkend="_tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing()</link></computeroutput> should be called exactly after 100 periods of system tick (but external asynchronous events still can happen and re-schedule that, of course).</para>

<para>To this end, the kernel should be able to communicate with the application:</para>

<para><itemizedlist>
<listitem>
<para>To schedule next call to <computeroutput><link linkend="_tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing()</link></computeroutput> after <computeroutput>N</computeroutput> ticks;</para>
</listitem><listitem>
<para>To ask what time is now (i.e. get current system ticks count)</para>
</listitem></itemizedlist>
</para>

<para>To use dynamic tick, turn the option <computeroutput>#TN_DYNAMIC_TICK</computeroutput> to <computeroutput>1</computeroutput>.</para>

<para>Then, a couple of callback prototypes becomes available:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_CBTickSchedule</computeroutput>;</para>
</listitem><listitem>
<para><computeroutput>#TN_CBTickCntGet</computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>And you must provide these callbacks to <computeroutput>#<link linkend="_tn__sys_8h_1ab4e879240635c8f73e20905b8e499c1c">tn_callback_dyn_tick_set()</link></computeroutput> <emphasis role="bold">before</emphasis> starting the system (i.e. before calling <computeroutput>#<link linkend="_tn__sys_8h_1a62ab25d9d8ca01c02d368968f19e49bf">tn_sys_start()</link></computeroutput>)</para>

<para><caution><title>Attention</title>

<para>In dynamic tick mode, <link linkend="_quick_guide_1round_robin">round-robin</link> is not yet supported. </para>
</caution>
</para>
</section>
</section>
