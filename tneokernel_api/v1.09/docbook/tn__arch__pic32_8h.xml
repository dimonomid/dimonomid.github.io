<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tn__arch__pic32_8h">
<title>arch/pic32/tn_arch_pic32.h File Reference</title>
<indexterm><primary>arch/pic32/tn_arch_pic32.h</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>PIC32 architecture-dependent routines </para>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_tn__arch__pic32_8h_1a02d853d8d573f928fb8da65ef0c2bc8e">tn_p32_soft_isr</link>(vec)</para>

<para>Interrupt handler wrapper macro for software context saving. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__pic32_8h_1a523bb667617e6bb6f68a8f85855030a5">tn_p32_srs_isr</link>(vec)</para>

<para>Interrupt handler wrapper macro for shadow register context saving. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__arch__pic32_8h_1afde61cfabbeed1562ea2135fea8e919b"/>#define <link linkend="_tn__arch__pic32_8h_1afde61cfabbeed1562ea2135fea8e919b">tn_soft_isr</link>   <link linkend="_tn__arch__pic32_8h_1a02d853d8d573f928fb8da65ef0c2bc8e">tn_p32_soft_isr</link></para>

<para>For compatibility with old projects, old name of <computeroutput><link linkend="_tn__arch__pic32_8h_1a02d853d8d573f928fb8da65ef0c2bc8e">tn_p32_soft_isr()</link></computeroutput> macro is kept; please don&apos;t use it in new code. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__arch__pic32_8h_1a714962dd7eb6b94feee7f4d769b601c0"/>#define <link linkend="_tn__arch__pic32_8h_1a714962dd7eb6b94feee7f4d769b601c0">tn_srs_isr</link>   <link linkend="_tn__arch__pic32_8h_1a523bb667617e6bb6f68a8f85855030a5">tn_p32_srs_isr</link></para>

<para>For compatibility with old projects, old name of <computeroutput><link linkend="_tn__arch__pic32_8h_1a523bb667617e6bb6f68a8f85855030a5">tn_p32_srs_isr()</link></computeroutput> macro is kept; please don&apos;t use it in new code. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>volatile int <link linkend="_tn__arch__pic32_8h_1a20de0bafa66d054b8d280c9e60cbad4c">tn_p32_int_nest_count</link></para>

<para>current interrupt nesting count. </para>
</listitem>
            <listitem><para>void * <link linkend="_tn__arch__pic32_8h_1aa2ef593f83b92d75837b4b884185d3fa">tn_p32_user_sp</link></para>

<para>saved task stack pointer. </para>
</listitem>
            <listitem><para>void * <link linkend="_tn__arch__pic32_8h_1affc7724f74e4630699a105cb6a46422b">tn_p32_int_sp</link></para>

<para>saved ISR stack pointer. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_tn__arch__pic32_8h_1a02d853d8d573f928fb8da65ef0c2bc8e"/>    <section>
    <title>tn_p32_soft_isr</title>
<indexterm><primary>tn_p32_soft_isr</primary><secondary>tn_arch_pic32.h</secondary></indexterm>
<indexterm><primary>tn_arch_pic32.h</primary><secondary>tn_p32_soft_isr</secondary></indexterm>
<para><computeroutput>#define tn_p32_soft_isr( vec)</computeroutput></para><para>

<para>Interrupt handler wrapper macro for software context saving. </para>
</para>

<para>Usage looks like the following: <literallayout><computeroutput>tn_p32_soft_isr(_TIMER_1_VECTOR)
{
   INTClearFlag(INT_T1);

   //-- do something useful
}
</computeroutput></literallayout></para>

<para>Note that you should not use <computeroutput>__ISR(_TIMER_1_VECTOR)</computeroutput> macro for that.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>vec</entry>
                                <entry>
<para>interrupt vector number, such as <computeroutput>_TIMER_1_VECTOR</computeroutput>, etc. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 344 of file tn_arch_pic32.h.</para>
    </section><anchor xml:id="_tn__arch__pic32_8h_1a523bb667617e6bb6f68a8f85855030a5"/>    <section>
    <title>tn_p32_srs_isr</title>
<indexterm><primary>tn_p32_srs_isr</primary><secondary>tn_arch_pic32.h</secondary></indexterm>
<indexterm><primary>tn_arch_pic32.h</primary><secondary>tn_p32_srs_isr</secondary></indexterm>
<para><computeroutput>#define tn_p32_srs_isr( vec)</computeroutput></para><para>

<para>Interrupt handler wrapper macro for shadow register context saving. </para>
</para>

<para>Usage looks like the following: <literallayout><computeroutput>tn_p32_srs_isr(_INT_UART_1_VECTOR)
{
   INTClearFlag(INT_U1);

   //-- do something useful
}
</computeroutput></literallayout></para>

<para>Note that you should not use <computeroutput>__ISR(_INT_UART_1_VECTOR)</computeroutput> macro for that.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>vec</entry>
                                <entry>
<para>interrupt vector number, such as <computeroutput>_TIMER_1_VECTOR</computeroutput>, etc. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 493 of file tn_arch_pic32.h.</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_tn__arch__pic32_8h_1a20de0bafa66d054b8d280c9e60cbad4c"/>    <section>
    <title>tn_p32_int_nest_count</title>
<indexterm><primary>tn_p32_int_nest_count</primary><secondary>tn_arch_pic32.h</secondary></indexterm>
<indexterm><primary>tn_arch_pic32.h</primary><secondary>tn_p32_int_nest_count</secondary></indexterm>
<para><computeroutput>volatile int tn_p32_int_nest_count</computeroutput></para><para>

<para>current interrupt nesting count. </para>
</para>

<para>Used by macros <computeroutput><link linkend="_tn__arch__pic32_8h_1a02d853d8d573f928fb8da65ef0c2bc8e">tn_p32_soft_isr()</link></computeroutput> and <computeroutput><link linkend="_tn__arch__pic32_8h_1a523bb667617e6bb6f68a8f85855030a5">tn_p32_srs_isr()</link></computeroutput>. </para>
    </section><anchor xml:id="_tn__arch__pic32_8h_1aa2ef593f83b92d75837b4b884185d3fa"/>    <section>
    <title>tn_p32_user_sp</title>
<indexterm><primary>tn_p32_user_sp</primary><secondary>tn_arch_pic32.h</secondary></indexterm>
<indexterm><primary>tn_arch_pic32.h</primary><secondary>tn_p32_user_sp</secondary></indexterm>
<para><computeroutput>void* tn_p32_user_sp</computeroutput></para><para>

<para>saved task stack pointer. </para>
</para>

<para>Needed when switching stack pointer from task stack to interrupt stack. </para>
    </section><anchor xml:id="_tn__arch__pic32_8h_1affc7724f74e4630699a105cb6a46422b"/>    <section>
    <title>tn_p32_int_sp</title>
<indexterm><primary>tn_p32_int_sp</primary><secondary>tn_arch_pic32.h</secondary></indexterm>
<indexterm><primary>tn_arch_pic32.h</primary><secondary>tn_p32_int_sp</secondary></indexterm>
<para><computeroutput>void* tn_p32_int_sp</computeroutput></para><para>

<para>saved ISR stack pointer. </para>
</para>

<para>Needed when switching stack pointer from interrupt stack to task stack. </para>
</section>
</section>
</section>
