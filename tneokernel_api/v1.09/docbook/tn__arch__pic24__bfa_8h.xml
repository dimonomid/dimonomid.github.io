<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tn__arch__pic24__bfa_8h">
<title>arch/pic24_dspic/tn_arch_pic24_bfa.h File Reference</title>
<indexterm><primary>arch/pic24_dspic/tn_arch_pic24_bfa.h</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>Atomic bit-field access macros for PIC24/dsPIC.</para>

<para>Initially, the code was taken from the <link xlink:href="http://www.pic24.ru/doku.php/articles/mchp/c30_atomic_access">article by Alex Borisov (russian)</link>, and modified a bit.</para>

<para>The kernel would not probably provide that kind of functionality, but the kernel itself needs it, so, it is made public so that application can use it too. </para>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_tn__arch__pic24__bfa_8h_1afb3b3db3cf42fd7a24eff3f5e5447ae6"/>#define <link linkend="_tn__arch__pic24__bfa_8h_1afb3b3db3cf42fd7a24eff3f5e5447ae6">TN_BFA_SET</link>   0x1111</para>

<para>Command for <computeroutput><link linkend="_tn__arch__pic24__bfa_8h_1a0ab285a4620fe66e07b62e83c199ff54">TN_BFA()</link></computeroutput> macro: Set bits in the bit field by mask; <computeroutput>...</computeroutput> macro param should be set to the bit mask to set. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__arch__pic24__bfa_8h_1aea0ed6f4978ea16f626851f17b93a9c0"/>#define <link linkend="_tn__arch__pic24__bfa_8h_1aea0ed6f4978ea16f626851f17b93a9c0">TN_BFA_CLR</link>   0x2222</para>

<para>Command for <computeroutput><link linkend="_tn__arch__pic24__bfa_8h_1a0ab285a4620fe66e07b62e83c199ff54">TN_BFA()</link></computeroutput> macro: Clear bits in the bit field by mask; <computeroutput>...</computeroutput> macro param should be set to the bit mask to clear. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__arch__pic24__bfa_8h_1a5a6d5f573973d827c6eda13675cb6996"/>#define <link linkend="_tn__arch__pic24__bfa_8h_1a5a6d5f573973d827c6eda13675cb6996">TN_BFA_INV</link>   0x3333</para>

<para>Command for <computeroutput><link linkend="_tn__arch__pic24__bfa_8h_1a0ab285a4620fe66e07b62e83c199ff54">TN_BFA()</link></computeroutput> macro: Invert bits in the bit field by mask; <computeroutput>...</computeroutput> macro param should be set to the bit mask to invert. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__arch__pic24__bfa_8h_1a883fc2ffdb105d460e575de78c877b62"/>#define <link linkend="_tn__arch__pic24__bfa_8h_1a883fc2ffdb105d460e575de78c877b62">TN_BFA_WR</link>   0xAAAA</para>

<para>Command for <computeroutput><link linkend="_tn__arch__pic24__bfa_8h_1a0ab285a4620fe66e07b62e83c199ff54">TN_BFA()</link></computeroutput> macro: Write bit field; <computeroutput>...</computeroutput> macro param should be set to the value to write. </para>
</listitem>
            <listitem><para><anchor xml:id="_tn__arch__pic24__bfa_8h_1ac2d2bd0a156045085b452360be0d621b"/>#define <link linkend="_tn__arch__pic24__bfa_8h_1ac2d2bd0a156045085b452360be0d621b">TN_BFA_RD</link>   0xBBBB</para>

<para>Command for <computeroutput><link linkend="_tn__arch__pic24__bfa_8h_1a0ab285a4620fe66e07b62e83c199ff54">TN_BFA()</link></computeroutput> macro: Read bit field; <computeroutput>...</computeroutput> macro param ignored. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__pic24__bfa_8h_1a0ab285a4620fe66e07b62e83c199ff54">TN_BFA</link>(comm,  reg_name,  field_name, ...)</para>

<para>Macro for atomic access to the structure bit field. </para>
</listitem>
            <listitem><para>#define <link linkend="_tn__arch__pic24__bfa_8h_1a8d4b939f57687bf93c982917100c064b">TN_BFAR</link>(comm,  reg_name,  lower,  upper, ...)</para>

<para>Macro for atomic access to the structure bit field specified as a range. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_tn__arch__pic24__bfa_8h_1a0ab285a4620fe66e07b62e83c199ff54"/>    <section>
    <title>TN_BFA</title>
<indexterm><primary>TN_BFA</primary><secondary>tn_arch_pic24_bfa.h</secondary></indexterm>
<indexterm><primary>tn_arch_pic24_bfa.h</primary><secondary>TN_BFA</secondary></indexterm>
<para><computeroutput>#define TN_BFA( comm,  reg_name,  field_name,  ...)</computeroutput></para><para>

<para>Macro for atomic access to the structure bit field. </para>
</para>

<para>The <computeroutput>BFA</computeroutput> acronym means Bit Field Access.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>command to execute:<itemizedlist>
<listitem>
<para><computeroutput>#TN_BFA_WR</computeroutput> - write bit field</para>
</listitem><listitem>
<para><computeroutput>#TN_BFA_RD</computeroutput> - read bit field</para>
</listitem><listitem>
<para><computeroutput>#TN_BFA_SET</computeroutput> - set bits by mask</para>
</listitem><listitem>
<para><computeroutput>#TN_BFA_CLR</computeroutput> - clear bits by mask</para>
</listitem><listitem>
<para><computeroutput>#TN_BFA_INV</computeroutput> - invert bits by mask</para>
</listitem></itemizedlist>
</para>
</entry>
                            </row>
                            <row>
                                <entry>reg_name</entry>
                                <entry>
<para>register name (<computeroutput>PORTA</computeroutput>, <computeroutput>CMCON</computeroutput>, ...).</para>
</entry>
                            </row>
                            <row>
                                <entry>field_name</entry>
                                <entry>
<para>structure field name</para>
</entry>
                            </row>
                            <row>
                                <entry>...</entry>
                                <entry>
<para>used if only <computeroutput>comm != #TN_BFA_RD</computeroutput>. Meaning depends on the <computeroutput>comm</computeroutput>, see comments for specific command: <computeroutput>#TN_BFA_WR</computeroutput>, etc.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Usage examples:</para>

<para><literallayout><computeroutput>int&#32;a&#32;=&#32;0x02;

//--&#32;Set&#32;third&#32;bit&#32;of&#32;the&#32;INT0IP&#32;field&#32;in&#32;the&#32;IPC0&#32;register:
//&#32;&#32;&#32;IPC0bits.INT0IP&#32;|=&#32;(1&#32;&lt;&lt;&#32;2);
TN_BFA(TN_BFA_SET,&#32;IPC0,&#32;INT0IP,&#32;(1&#32;&lt;&lt;&#32;2));

//--&#32;Clear&#32;second&#32;bit&#32;of&#32;the&#32;INT0IP&#32;field&#32;in&#32;the&#32;IPC0&#32;register:
//&#32;&#32;&#32;IPC0bits.INT0IP&#32;&amp;=&#32;~(1&#32;&lt;&lt;&#32;1);
TN_BFA(TN_BFA_CLR,&#32;IPC0,&#32;INT0IP,&#32;(1&#32;&lt;&lt;&#32;1));

//--&#32;Invert&#32;two&#32;less-significant&#32;bits&#32;of&#32;the&#32;INT0IP&#32;field&#32;
//&#32;&#32;&#32;in&#32;the&#32;IPC0&#32;register:
//&#32;&#32;&#32;IPC0bits.INT0IP&#32;^=&#32;0x03;
TN_BFA(TN_BFA_INV,&#32;IPC0,&#32;INT0IP,&#32;0x03);

//--&#32;Write&#32;value&#32;0x05&#32;to&#32;the&#32;INT0IP&#32;field&#32;of&#32;the&#32;IPC0&#32;register:
//&#32;&#32;&#32;IPC0bits.INT0IP&#32;=&#32;0x05;
TN_BFA(TN_BFA_WR,&#32;IPC0,&#32;INT0IP,&#32;0x05);

//--&#32;Write&#32;value&#32;of&#32;the&#32;variable&#32;a&#32;to&#32;the&#32;INT0IP&#32;field&#32;of&#32;the&#32;IPC0&#32;
//&#32;&#32;&#32;register:
//&#32;&#32;&#32;IPC0bits.INT0IP&#32;=&#32;a;
TN_BFA(TN_BFA_WR,&#32;IPC0,&#32;INT0IP,&#32;a);

//--&#32;Read&#32;the&#32;value&#32;that&#32;is&#32;stored&#32;in&#32;the&#32;INT0IP&#32;field&#32;of&#32;the&#32;IPC0&#32;
//&#32;&#32;&#32;register,&#32;to&#32;the&#32;int&#32;variable&#32;a:
//&#32;&#32;&#32;int&#32;a&#32;=&#32;IPC0bits.INT0IP;
a&#32;=&#32;TN_BFA(TN_BFA_RD,&#32;IPC0,&#32;INT0IP);
</computeroutput></literallayout> </para>
<para>
Definition at line 154 of file tn_arch_pic24_bfa.h.</para>
    </section><anchor xml:id="_tn__arch__pic24__bfa_8h_1a8d4b939f57687bf93c982917100c064b"/>    <section>
    <title>TN_BFAR</title>
<indexterm><primary>TN_BFAR</primary><secondary>tn_arch_pic24_bfa.h</secondary></indexterm>
<indexterm><primary>tn_arch_pic24_bfa.h</primary><secondary>TN_BFAR</secondary></indexterm>
<para><computeroutput>#define TN_BFAR( comm,  reg_name,  lower,  upper,  ...)</computeroutput></para><para>

<para>Macro for atomic access to the structure bit field specified as a range. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>command to execute:<itemizedlist>
<listitem>
<para><computeroutput>#TN_BFA_WR</computeroutput> - write bit field</para>
</listitem><listitem>
<para><computeroutput>#TN_BFA_RD</computeroutput> - read bit field</para>
</listitem><listitem>
<para><computeroutput>#TN_BFA_SET</computeroutput> - set bits by mask</para>
</listitem><listitem>
<para><computeroutput>#TN_BFA_CLR</computeroutput> - clear bits by mask</para>
</listitem><listitem>
<para><computeroutput>#TN_BFA_INV</computeroutput> - invert bits by mask</para>
</listitem></itemizedlist>
</para>
</entry>
                            </row>
                            <row>
                                <entry>reg_name</entry>
                                <entry>
<para>variable name (<computeroutput>PORTA</computeroutput>, <computeroutput>CMCON</computeroutput>, ...). Variable should be in the near memory (first 8 KB)</para>
</entry>
                            </row>
                            <row>
                                <entry>lower</entry>
                                <entry>
<para>number of lowest affected bit of the field</para>
</entry>
                            </row>
                            <row>
                                <entry>upper</entry>
                                <entry>
<para>number of highest affected bit of the field</para>
</entry>
                            </row>
                            <row>
                                <entry>...</entry>
                                <entry>
<para>used if only <computeroutput>comm != #TN_BFA_RD</computeroutput>. Meaning depends on the <computeroutput>comm</computeroutput>, see comments for specific command: <computeroutput>#TN_BFA_WR</computeroutput>, etc.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Usage examples:</para>

<para><literallayout><computeroutput>int&#32;a&#32;=&#32;0x02;

//--&#32;Write&#32;constant&#32;0xaa&#32;to&#32;the&#32;least&#32;significant&#32;byte&#32;of&#32;the&#32;TRISB
//&#32;&#32;&#32;register:
TN_BFAR(TN_BFA_WR,&#32;TRISB,&#32;0,&#32;7,&#32;0xaa);

//--&#32;Invert&#32;least&#32;significant&#32;nibble&#32;of&#32;the&#32;most&#32;significant&#32;byte&#32;
//&#32;&#32;&#32;in&#32;the&#32;register&#32;TRISB:
TN_BFAR(TN_BFA_INV,&#32;TRISB,&#32;8,&#32;15,&#32;0x0f);

//--&#32;Get&#32;5&#32;least&#32;significant&#32;bits&#32;from&#32;the&#32;register&#32;TRISB&#32;and&#32;store
//&#32;&#32;&#32;result&#32;to&#32;the&#32;variable&#32;a
a&#32;=&#32;TN_BFAR(TN_BFA_RD,&#32;TRISB,&#32;0,&#32;4);
</computeroutput></literallayout> </para>
<para>
Definition at line 270 of file tn_arch_pic24_bfa.h.</para>
</section>
</section>
</section>
