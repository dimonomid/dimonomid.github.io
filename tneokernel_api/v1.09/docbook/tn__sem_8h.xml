<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tn__sem_8h">
<title>core/tn_sem.h File Reference</title>
<indexterm><primary>core/tn_sem.h</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>A semaphore: an object to provide signaling mechanism.</para>

<para>There is a lot of confusion about differences between semaphores and mutexes, so, it&apos;s quite recommended to read small article by Michael Barr: <link xlink:href="http://goo.gl/YprPBW">Mutexes and Semaphores Demystified</link>.</para>

<para>Very short:</para>

<para>While mutex is seemingly similar to a semaphore with maximum count of <computeroutput>1</computeroutput> (the so-called binary semaphore), their usage is very different: the purpose of mutex is to protect shared resource. A locked mutex is &quot;owned&quot; by the task that locked it, and only the same task may unlock it. This ownership allows to implement algorithms to prevent priority inversion. So, mutex is a <emphasis>locking mechanism</emphasis>.</para>

<para>Semaphore, on the other hand, is <emphasis>signaling mechanism</emphasis>. It&apos;s quite legal and encouraged for semaphore to be waited for in the task A, and then signaled from task B or even from ISR. It may be used in situations like &quot;producer
and consumer&quot;, etc.</para>

<para>In addition to the article mentioned above, you may want to look at the <link xlink:href="http://goo.gl/ZBReHK">related question on stackoverflow.com</link>. </para>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structTN__Sem">TN_Sem</link></para>

<para>Semaphore. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__sem_8h_1a302b9a0fbb1843e38d95fdc1390d5c31">tn_sem_create</link> (struct <link linkend="_structTN__Sem">TN_Sem</link> *sem, int start_count, int max_count)</para>

<para>Construct the semaphore. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__sem_8h_1a427022246912c9f2bea8a14033b4d103">tn_sem_delete</link> (struct <link linkend="_structTN__Sem">TN_Sem</link> *sem)</para>

<para>Destruct the semaphore. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__sem_8h_1a39f52729fc651ccef7696310d3642a24">tn_sem_signal</link> (struct <link linkend="_structTN__Sem">TN_Sem</link> *sem)</para>

<para>Signal the semaphore. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__sem_8h_1a215fd97b86fc63192106bb30b0574d14">tn_sem_isignal</link> (struct <link linkend="_structTN__Sem">TN_Sem</link> *sem)</para>

<para>The same as <computeroutput><link linkend="_tn__sem_8h_1a39f52729fc651ccef7696310d3642a24">tn_sem_signal()</link></computeroutput> but for using in the ISR. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__sem_8h_1acfed2a27719c87638d2eb6edfdeea150">tn_sem_wait</link> (struct <link linkend="_structTN__Sem">TN_Sem</link> *sem, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</para>

<para>Wait for the semaphore. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__sem_8h_1a7dd4429a9f3942764b23025f2f2e364e">tn_sem_wait_polling</link> (struct <link linkend="_structTN__Sem">TN_Sem</link> *sem)</para>

<para>The same as <computeroutput><link linkend="_tn__sem_8h_1acfed2a27719c87638d2eb6edfdeea150">tn_sem_wait()</link></computeroutput> with zero timeout. </para>
</listitem>
            <listitem><para>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="_tn__sem_8h_1a22e181857dbc681f962cfda5d34d71c0">tn_sem_iwait_polling</link> (struct <link linkend="_structTN__Sem">TN_Sem</link> *sem)</para>

<para>The same as <computeroutput><link linkend="_tn__sem_8h_1acfed2a27719c87638d2eb6edfdeea150">tn_sem_wait()</link></computeroutput> with zero timeout, but for using in the ISR. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_tn__sem_8h_1a302b9a0fbb1843e38d95fdc1390d5c31"/>    <section>
    <title>tn_sem_create()</title>
<indexterm><primary>tn_sem_create</primary><secondary>tn_sem.h</secondary></indexterm>
<indexterm><primary>tn_sem.h</primary><secondary>tn_sem_create</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_sem_create (struct <link linkend="_structTN__Sem">TN_Sem</link> * sem, int start_count, int max_count)</computeroutput></para><para>

<para>Construct the semaphore. </para>
</para>

<para><computeroutput>id_sem</computeroutput> field should not contain <computeroutput>#TN_ID_SEMAPHORE</computeroutput>, otherwise, <computeroutput>#TN_RC_WPARAM</computeroutput> is returned.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>sem</entry>
                                <entry>
<para>Pointer to already allocated <computeroutput>struct <link linkend="_structTN__Sem">TN_Sem</link></computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>start_count</entry>
                                <entry>
<para>Initial counter value, typically it is equal to <computeroutput>max_count</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>max_count</entry>
                                <entry>
<para>Maximum counter value.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if semaphore was successfully created;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return code is available: <computeroutput>#TN_RC_WPARAM</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__sem_8h_1a427022246912c9f2bea8a14033b4d103"/>    <section>
    <title>tn_sem_delete()</title>
<indexterm><primary>tn_sem_delete</primary><secondary>tn_sem.h</secondary></indexterm>
<indexterm><primary>tn_sem.h</primary><secondary>tn_sem_delete</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_sem_delete (struct <link linkend="_structTN__Sem">TN_Sem</link> * sem)</computeroutput></para><para>

<para>Destruct the semaphore. </para>
</para>

<para>All tasks that wait for the semaphore become runnable with <computeroutput>#TN_RC_DELETED</computeroutput> code returned.</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>sem</entry>
                                <entry>
<para>semaphore to destruct</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if semaphore was successfully deleted;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__sem_8h_1a39f52729fc651ccef7696310d3642a24"/>    <section>
    <title>tn_sem_signal()</title>
<indexterm><primary>tn_sem_signal</primary><secondary>tn_sem.h</secondary></indexterm>
<indexterm><primary>tn_sem.h</primary><secondary>tn_sem_signal</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_sem_signal (struct <link linkend="_structTN__Sem">TN_Sem</link> * sem)</computeroutput></para><para>

<para>Signal the semaphore. </para>
</para>

<para>If current semaphore counter (<computeroutput>count</computeroutput>) is less than <computeroutput>max_count</computeroutput>, counter is incremented by one, and first task (if any) that <link linkend="_tn__sem_8h_1acfed2a27719c87638d2eb6edfdeea150">waits</link> for the semaphore becomes runnable with <computeroutput>#TN_RC_OK</computeroutput> returned from <computeroutput><link linkend="_tn__sem_8h_1acfed2a27719c87638d2eb6edfdeea150">tn_sem_wait()</link></computeroutput>.</para>

<para>if semaphore counter is already has its max value, no action performed and <computeroutput>#TN_RC_OVERFLOW</computeroutput> is returned</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>sem</entry>
                                <entry>
<para>semaphore to signal</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if successful</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_WCONTEXT</computeroutput> if called from wrong context;</para>
</listitem><listitem>
<para><computeroutput>#TN_RC_OVERFLOW</computeroutput> if <computeroutput>count</computeroutput> is already at maximum value (<computeroutput>max_count</computeroutput>)</para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__sem_8h_1a215fd97b86fc63192106bb30b0574d14"/>    <section>
    <title>tn_sem_isignal()</title>
<indexterm><primary>tn_sem_isignal</primary><secondary>tn_sem.h</secondary></indexterm>
<indexterm><primary>tn_sem.h</primary><secondary>tn_sem_isignal</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_sem_isignal (struct <link linkend="_structTN__Sem">TN_Sem</link> * sem)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__sem_8h_1a39f52729fc651ccef7696310d3642a24">tn_sem_signal()</link></computeroutput> but for using in the ISR. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__sem_8h_1acfed2a27719c87638d2eb6edfdeea150"/>    <section>
    <title>tn_sem_wait()</title>
<indexterm><primary>tn_sem_wait</primary><secondary>tn_sem.h</secondary></indexterm>
<indexterm><primary>tn_sem.h</primary><secondary>tn_sem_wait</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_sem_wait (struct <link linkend="_structTN__Sem">TN_Sem</link> * sem, <link linkend="_tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> timeout)</computeroutput></para><para>

<para>Wait for the semaphore. </para>
</para>

<para>If the current semaphore counter (<computeroutput>count</computeroutput>) is non-zero, it is decremented and <computeroutput>#TN_RC_OK</computeroutput> is returned. Otherwise, behavior depends on <computeroutput>timeout</computeroutput> value: task might switch to <link linkend="_tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6aaa3dfaf2bb5992e0cef981618ce30d56"><computeroutput>WAIT</computeroutput></link> state until someone <link linkend="_tn__sem_8h_1a39f52729fc651ccef7696310d3642a24">signaled</link> the semaphore or until the <computeroutput>timeout</computeroutput> expired. refer to <computeroutput>#TN_TickCnt</computeroutput>.</para>

<para>      <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>sem</entry>
                                <entry>
<para>semaphore to wait for </para>
</entry>
                            </row>
                            <row>
                                <entry>timeout</entry>
                                <entry>
<para>refer to <computeroutput>#TN_TickCnt</computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><itemizedlist>
<listitem>
<para><computeroutput>#TN_RC_OK</computeroutput> if waiting was successfull</para>
</listitem><listitem>
<para>Other possible return codes depend on <computeroutput>timeout</computeroutput> value, refer to <computeroutput>#TN_TickCnt</computeroutput></para>
</listitem><listitem>
<para>If <computeroutput>#TN_CHECK_PARAM</computeroutput> is non-zero, additional return codes are available: <computeroutput>#TN_RC_WPARAM</computeroutput> and <computeroutput>#TN_RC_INVALID_OBJ</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__sem_8h_1a7dd4429a9f3942764b23025f2f2e364e"/>    <section>
    <title>tn_sem_wait_polling()</title>
<indexterm><primary>tn_sem_wait_polling</primary><secondary>tn_sem.h</secondary></indexterm>
<indexterm><primary>tn_sem.h</primary><secondary>tn_sem_wait_polling</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_sem_wait_polling (struct <link linkend="_structTN__Sem">TN_Sem</link> * sem)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__sem_8h_1acfed2a27719c87638d2eb6edfdeea150">tn_sem_wait()</link></computeroutput> with zero timeout. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
    </section><anchor xml:id="_tn__sem_8h_1a22e181857dbc681f962cfda5d34d71c0"/>    <section>
    <title>tn_sem_iwait_polling()</title>
<indexterm><primary>tn_sem_iwait_polling</primary><secondary>tn_sem.h</secondary></indexterm>
<indexterm><primary>tn_sem.h</primary><secondary>tn_sem_iwait_polling</secondary></indexterm>
<para><computeroutput>enum <link linkend="_tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> tn_sem_iwait_polling (struct <link linkend="_structTN__Sem">TN_Sem</link> * sem)</computeroutput></para><para>

<para>The same as <computeroutput><link linkend="_tn__sem_8h_1acfed2a27719c87638d2eb6edfdeea150">tn_sem_wait()</link></computeroutput> with zero timeout, but for using in the ISR. </para>
</para>

<para>    <emphasis>(refer to <link linkend="_legend">Legend</link> for details)</emphasis> </para>
</section>
</section>
</section>
