<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tn__arch_8h">
<title>arch/tn_arch.h File Reference</title>
<indexterm><primary>arch/tn_arch.h</primary></indexterm>
<section>
<title>Detailed Description</title>

<para>Architecture-dependent routines declaration. </para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_tn__arch_8h_1a2b3f2294ac42a599662c573394b14c75">tn_arch_int_dis</link> (void)</para>

<para>Unconditionally disable <emphasis>system interrupts</emphasis>. </para>
</listitem>
            <listitem><para>void <link linkend="_tn__arch_8h_1a2997c6d98ac43cb90216fc4e8137bcfb">tn_arch_int_en</link> (void)</para>

<para>Unconditionally enable interrupts. </para>
</listitem>
            <listitem><para><link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> <link linkend="_tn__arch_8h_1a7078b776570ca67a51b89d2746bdb6f7">tn_arch_sr_save_int_dis</link> (void)</para>

<para>Disable <emphasis>system interrupts</emphasis> and return previous value of status register, atomically. </para>
</listitem>
            <listitem><para>void <link linkend="_tn__arch_8h_1aa755327bd8c4e4303c87c2b0cbed0f17">tn_arch_sr_restore</link> (<link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> sr)</para>

<para>Restore previously saved status register. </para>
</listitem>
            <listitem><para><link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> <link linkend="_tn__arch_8h_1a19e3b6ac25f75016b316ee217114e26d">tn_arch_sched_dis_save</link> (void)</para>

<para>Disable kernel scheduler and return previous state. </para>
</listitem>
            <listitem><para>void <link linkend="_tn__arch_8h_1ad607fcabe50af27f55f41082fde2ec3e">tn_arch_sched_restore</link> (<link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> sched_state)</para>

<para>Restore state of the kernel scheduler. </para>
</listitem>
            <listitem><para><link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> * <link linkend="_tn__arch_8h_1adfec508be4a01fd3b251dbbeec12d7d6">_tn_arch_stack_init</link> (<link linkend="_tn__common_8h_1a603cbe1ffdafc7e6813ef692bbd7d22f">TN_TaskBody</link> *task_func, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> *stack_low_addr, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> *stack_high_addr, void *param)</para>

<para>Should put initial CPU context to the provided stack pointer for new task and return current stack pointer. </para>
</listitem>
            <listitem><para>int <link linkend="_tn__arch_8h_1a34ffbae8b6837f7f3014bca9991e2272">_tn_arch_inside_isr</link> (void)</para>

<para>Should return 1 if <emphasis>system ISR</emphasis> is currently running, 0 otherwise. </para>
</listitem>
            <listitem><para>int <link linkend="_tn__arch_8h_1a024f41d79c823ecac5ed6b83c36f164e">_tn_arch_is_int_disabled</link> (void)</para>

<para>Should return 1 if <emphasis>system interrupts</emphasis> are currently disabled, 0 otherwise. </para>
</listitem>
            <listitem><para>void <link linkend="_tn__arch_8h_1a28871f82c82d549092930dd4842e2980">_tn_arch_context_switch_pend</link> (void)</para>

<para>Called whenever we need to switch context from one task to another. </para>
</listitem>
            <listitem><para>void <link linkend="_tn__arch_8h_1afd5f43f42f5645de164ba6d13d3a4bcf">_tn_arch_context_switch_now_nosave</link> (void)</para>

<para>Called whenever we need to switch context to new task, but don&apos;t save current context. </para>
</listitem>
            <listitem><para>void <link linkend="_tn__arch_8h_1a8b4b954fc132b3426ca8b564a38efc20">_tn_arch_sys_start</link> (<link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> *int_stack, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> int_stack_size)</para>

<para>Performs first context switch to the first task (<computeroutput>_tn_next_task_to_run</computeroutput> is already set to needed task). </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_tn__arch_8h_1a2b3f2294ac42a599662c573394b14c75"/>    <section>
    <title>tn_arch_int_dis()</title>
<indexterm><primary>tn_arch_int_dis</primary><secondary>tn_arch.h</secondary></indexterm>
<indexterm><primary>tn_arch.h</primary><secondary>tn_arch_int_dis</secondary></indexterm>
<para><computeroutput>void tn_arch_int_dis (void )</computeroutput></para><para>

<para>Unconditionally disable <emphasis>system interrupts</emphasis>. </para>
</para>

<para>Refer to the section <link linkend="_interrupts_1interrupt_types">Interrupt types</link> for details on what is <emphasis>system interrupt</emphasis>. </para>
    </section><anchor xml:id="_tn__arch_8h_1a2997c6d98ac43cb90216fc4e8137bcfb"/>    <section>
    <title>tn_arch_int_en()</title>
<indexterm><primary>tn_arch_int_en</primary><secondary>tn_arch.h</secondary></indexterm>
<indexterm><primary>tn_arch.h</primary><secondary>tn_arch_int_en</secondary></indexterm>
<para><computeroutput>void tn_arch_int_en (void )</computeroutput></para><para>

<para>Unconditionally enable interrupts. </para>
</para>

<para>Refer to the section <link linkend="_interrupts_1interrupt_types">Interrupt types</link> for details on what is <emphasis>system interrupt</emphasis>. </para>
    </section><anchor xml:id="_tn__arch_8h_1a7078b776570ca67a51b89d2746bdb6f7"/>    <section>
    <title>tn_arch_sr_save_int_dis()</title>
<indexterm><primary>tn_arch_sr_save_int_dis</primary><secondary>tn_arch.h</secondary></indexterm>
<indexterm><primary>tn_arch.h</primary><secondary>tn_arch_sr_save_int_dis</secondary></indexterm>
<para><computeroutput><link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> tn_arch_sr_save_int_dis (void )</computeroutput></para><para>

<para>Disable <emphasis>system interrupts</emphasis> and return previous value of status register, atomically. </para>
</para>

<para>Refer to the section <link linkend="_interrupts_1interrupt_types">Interrupt types</link> for details on what is <emphasis>system interrupt</emphasis>.</para>

<para><formalpara><title>See also</title>

<para><computeroutput><link linkend="_tn__arch_8h_1aa755327bd8c4e4303c87c2b0cbed0f17">tn_arch_sr_restore()</link></computeroutput> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__arch_8h_1aa755327bd8c4e4303c87c2b0cbed0f17"/>    <section>
    <title>tn_arch_sr_restore()</title>
<indexterm><primary>tn_arch_sr_restore</primary><secondary>tn_arch.h</secondary></indexterm>
<indexterm><primary>tn_arch.h</primary><secondary>tn_arch_sr_restore</secondary></indexterm>
<para><computeroutput>void tn_arch_sr_restore (<link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> sr)</computeroutput></para><para>

<para>Restore previously saved status register. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>sr</entry>
                                <entry>
<para>status register value previously from <computeroutput><link linkend="_tn__arch_8h_1a7078b776570ca67a51b89d2746bdb6f7">tn_arch_sr_save_int_dis()</link></computeroutput></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><computeroutput><link linkend="_tn__arch_8h_1a7078b776570ca67a51b89d2746bdb6f7">tn_arch_sr_save_int_dis()</link></computeroutput> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__arch_8h_1a19e3b6ac25f75016b316ee217114e26d"/>    <section>
    <title>tn_arch_sched_dis_save()</title>
<indexterm><primary>tn_arch_sched_dis_save</primary><secondary>tn_arch.h</secondary></indexterm>
<indexterm><primary>tn_arch.h</primary><secondary>tn_arch_sched_dis_save</secondary></indexterm>
<para><computeroutput><link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> tn_arch_sched_dis_save (void )</computeroutput></para><para>

<para>Disable kernel scheduler and return previous state. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Scheduler state to be restored later by <computeroutput>#<link linkend="_tn__arch_8h_1ad607fcabe50af27f55f41082fde2ec3e">tn_arch_sched_restore()</link></computeroutput>. </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__arch_8h_1ad607fcabe50af27f55f41082fde2ec3e"/>    <section>
    <title>tn_arch_sched_restore()</title>
<indexterm><primary>tn_arch_sched_restore</primary><secondary>tn_arch.h</secondary></indexterm>
<indexterm><primary>tn_arch.h</primary><secondary>tn_arch_sched_restore</secondary></indexterm>
<para><computeroutput>void tn_arch_sched_restore (<link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> sched_state)</computeroutput></para><para>

<para>Restore state of the kernel scheduler. </para>
</para>

<para>See <computeroutput>#<link linkend="_tn__arch_8h_1a19e3b6ac25f75016b316ee217114e26d">tn_arch_sched_dis_save()</link></computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>sched_state</entry>
                                <entry>
<para>Value returned from <computeroutput>#<link linkend="_tn__arch_8h_1a19e3b6ac25f75016b316ee217114e26d">tn_arch_sched_dis_save()</link></computeroutput> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_tn__arch_8h_1adfec508be4a01fd3b251dbbeec12d7d6"/>    <section>
    <title>_tn_arch_stack_init()</title>
<indexterm><primary>_tn_arch_stack_init</primary><secondary>tn_arch.h</secondary></indexterm>
<indexterm><primary>tn_arch.h</primary><secondary>_tn_arch_stack_init</secondary></indexterm>
<para><computeroutput><link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link>* _tn_arch_stack_init (<link linkend="_tn__common_8h_1a603cbe1ffdafc7e6813ef692bbd7d22f">TN_TaskBody</link> * task_func, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> * stack_low_addr, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> * stack_high_addr, void * param)</computeroutput></para><para>

<para>Should put initial CPU context to the provided stack pointer for new task and return current stack pointer. </para>
</para>

<para>When resulting context gets restored by <computeroutput><link linkend="_tn__arch_8h_1afd5f43f42f5645de164ba6d13d3a4bcf">_tn_arch_context_switch_now_nosave()</link></computeroutput> or <computeroutput><link linkend="_tn__arch_8h_1a28871f82c82d549092930dd4842e2980">_tn_arch_context_switch_pend()</link></computeroutput>, the following conditions should be met:</para>

<para><itemizedlist>
<listitem>
<para>Interrupts are enabled;</para>
</listitem><listitem>
<para>Return address is set to <computeroutput><link linkend="_tn__tasks_8h_1a23e562731e616f01e325bc9830bcc021">tn_task_exit()</link></computeroutput>, so that when task body function returns, <computeroutput><link linkend="_tn__tasks_8h_1a23e562731e616f01e325bc9830bcc021">tn_task_exit()</link></computeroutput> gets automatially called;</para>
</listitem><listitem>
<para>Argument 0 contains <computeroutput>param</computeroutput> pointer</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>task_func</entry>
                                <entry>
<para>Pointer to task body function. </para>
</entry>
                            </row>
                            <row>
                                <entry>stack_low_addr</entry>
                                <entry>
<para>Lowest address of the stack, independently of the architecture stack implementation </para>
</entry>
                            </row>
                            <row>
                                <entry>stack_high_addr</entry>
                                <entry>
<para>Highest address of the stack, independently of the architecture stack implementation </para>
</entry>
                            </row>
                            <row>
                                <entry>param</entry>
                                <entry>
<para>User-provided parameter for task body function.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>current stack pointer (top of the stack) </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__arch_8h_1a34ffbae8b6837f7f3014bca9991e2272"/>    <section>
    <title>_tn_arch_inside_isr()</title>
<indexterm><primary>_tn_arch_inside_isr</primary><secondary>tn_arch.h</secondary></indexterm>
<indexterm><primary>tn_arch.h</primary><secondary>_tn_arch_inside_isr</secondary></indexterm>
<para><computeroutput>int _tn_arch_inside_isr (void )</computeroutput></para><para>

<para>Should return 1 if <emphasis>system ISR</emphasis> is currently running, 0 otherwise. </para>
</para>

<para>Refer to the section <link linkend="_interrupts_1interrupt_types">Interrupt types</link> for details on what is <emphasis>system ISR</emphasis>. </para>
    </section><anchor xml:id="_tn__arch_8h_1a024f41d79c823ecac5ed6b83c36f164e"/>    <section>
    <title>_tn_arch_is_int_disabled()</title>
<indexterm><primary>_tn_arch_is_int_disabled</primary><secondary>tn_arch.h</secondary></indexterm>
<indexterm><primary>tn_arch.h</primary><secondary>_tn_arch_is_int_disabled</secondary></indexterm>
<para><computeroutput>int _tn_arch_is_int_disabled (void )</computeroutput></para><para>

<para>Should return 1 if <emphasis>system interrupts</emphasis> are currently disabled, 0 otherwise. </para>
</para>

<para>Refer to the section <link linkend="_interrupts_1interrupt_types">Interrupt types</link> for details on what is <emphasis>system interrupt</emphasis>. </para>
    </section><anchor xml:id="_tn__arch_8h_1a28871f82c82d549092930dd4842e2980"/>    <section>
    <title>_tn_arch_context_switch_pend()</title>
<indexterm><primary>_tn_arch_context_switch_pend</primary><secondary>tn_arch.h</secondary></indexterm>
<indexterm><primary>tn_arch.h</primary><secondary>_tn_arch_context_switch_pend</secondary></indexterm>
<para><computeroutput>void _tn_arch_context_switch_pend (void )</computeroutput></para><para>

<para>Called whenever we need to switch context from one task to another. </para>
</para>

<para>This function typically does NOT switch context; it merely pends it, that is, it sets appropriate interrupt flag. If current level is an application level, interrupt is fired immediately, and context gets switched. Otherwise (if some ISR is currently running), context switch keeps pending until all ISR return.</para>

<para><emphasis role="bold">Preconditions:</emphasis></para>

<para><itemizedlist>
<listitem>
<para>interrupts are enabled;</para>
</listitem><listitem>
<para><computeroutput>_tn_curr_run_task</computeroutput> points to currently running (preempted) task;</para>
</listitem><listitem>
<para><computeroutput>_tn_next_task_to_run</computeroutput> points to new task to run.</para>
</listitem></itemizedlist>
</para>

<para><emphasis role="bold">Actions to perform in actual context switching routine:</emphasis></para>

<para><itemizedlist>
<listitem>
<para>save context of the preempted task to its stack;</para>
</listitem><listitem>
<para>if preprocessor macro <computeroutput>#_TN_ON_CONTEXT_SWITCH_HANDLER</computeroutput> is non-zero, call <computeroutput>_tn_sys_on_context_switch(_tn_curr_run_task, _tn_next_task_to_run);</computeroutput>.</para>
</listitem><listitem>
<para>set <computeroutput>_tn_curr_run_task</computeroutput> to <computeroutput>_tn_next_task_to_run</computeroutput>;</para>
</listitem><listitem>
<para>restore context of the newly activated task from its stack.</para>
</listitem></itemizedlist>
</para>

<para><formalpara><title>See also</title>

<para><computeroutput>_tn_curr_run_task</computeroutput> </para>

<para><computeroutput>_tn_next_task_to_run</computeroutput> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__arch_8h_1afd5f43f42f5645de164ba6d13d3a4bcf"/>    <section>
    <title>_tn_arch_context_switch_now_nosave()</title>
<indexterm><primary>_tn_arch_context_switch_now_nosave</primary><secondary>tn_arch.h</secondary></indexterm>
<indexterm><primary>tn_arch.h</primary><secondary>_tn_arch_context_switch_now_nosave</secondary></indexterm>
<para><computeroutput>void _tn_arch_context_switch_now_nosave (void )</computeroutput></para><para>

<para>Called whenever we need to switch context to new task, but don&apos;t save current context. </para>
</para>

<para>This happens:<itemizedlist>
<listitem>
<para>At system start, inside <computeroutput><link linkend="_tn__sys_8h_1a62ab25d9d8ca01c02d368968f19e49bf">tn_sys_start()</link></computeroutput> (well, it is actually called indirectly but from <computeroutput><link linkend="_tn__arch_8h_1a8b4b954fc132b3426ca8b564a38efc20">_tn_arch_sys_start()</link></computeroutput>);</para>
</listitem><listitem>
<para>At task exit, inside <computeroutput><link linkend="_tn__tasks_8h_1a23e562731e616f01e325bc9830bcc021">tn_task_exit()</link></computeroutput>.</para>
</listitem></itemizedlist>
</para>

<para>This function doesn&apos;t need to pend context switch, it switches context immediately.</para>

<para><emphasis role="bold">Preconditions:</emphasis></para>

<para><itemizedlist>
<listitem>
<para>interrupts are disabled;</para>
</listitem><listitem>
<para><computeroutput>_tn_next_task_to_run</computeroutput> is already set to needed task.</para>
</listitem></itemizedlist>
</para>

<para><emphasis role="bold">Actions to perform:</emphasis></para>

<para><itemizedlist>
<listitem>
<para>if preprocessor macro <computeroutput>#_TN_ON_CONTEXT_SWITCH_HANDLER</computeroutput> is non-zero, call <computeroutput>_tn_sys_on_context_switch(_tn_curr_run_task, _tn_next_task_to_run);</computeroutput>.</para>
</listitem><listitem>
<para>set <computeroutput>_tn_curr_run_task</computeroutput> to <computeroutput>_tn_next_task_to_run</computeroutput>;</para>
</listitem><listitem>
<para>restore context of the newly activated task from its stack.</para>
</listitem></itemizedlist>
</para>

<para><formalpara><title>See also</title>

<para><computeroutput>_tn_curr_run_task</computeroutput> </para>

<para><computeroutput>_tn_next_task_to_run</computeroutput> </para>
</formalpara>
</para>
    </section><anchor xml:id="_tn__arch_8h_1a8b4b954fc132b3426ca8b564a38efc20"/>    <section>
    <title>_tn_arch_sys_start()</title>
<indexterm><primary>_tn_arch_sys_start</primary><secondary>tn_arch.h</secondary></indexterm>
<indexterm><primary>tn_arch.h</primary><secondary>_tn_arch_sys_start</secondary></indexterm>
<para><computeroutput>void _tn_arch_sys_start (<link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> * int_stack, <link linkend="_tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> int_stack_size)</computeroutput></para><para>

<para>Performs first context switch to the first task (<computeroutput>_tn_next_task_to_run</computeroutput> is already set to needed task). </para>
</para>

<para>Typically, this function just calls <computeroutput><link linkend="_tn__arch_8h_1afd5f43f42f5645de164ba6d13d3a4bcf">_tn_arch_context_switch_now_nosave()</link></computeroutput>, but it also can perform any architecture-dependent actions first, if needed. </para>
</section>
</section>
</section>
