<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Why reimplement TNKernel</title>

<para>Explanation of essential TNKernel problems as well as several examples of poor implementation.</para>
<section xml:id="why_reimplement_1why_reimplement__problems_of_tnkernel">
<title>Essential problems of TNKernel</title>

<para><itemizedlist>
<listitem>
<para>The most essential problem is that TNKernel is a very hastily-written project. Several concepts are just poorly thought out, others are poorly implemented: there is a lot of code duplication and inconsistency;</para>
</listitem><listitem>
<para>It is untested: there are no unit tests for the kernel, this is not acceptable for the project like real-time kernel;</para>
</listitem></itemizedlist>
</para>

<para>As a result of the two above, the kernel is buggy. And even more, the kernel is really <emphasis role="bold">hard to maintain</emphasis> because of inconsistency, so when we add new features or change something, we are likely to add new bugs as well.</para>

<para><itemizedlist>
<listitem>
<para>It is unsupported. I&apos;ve written to the Yuri Tiomkin about <link linkend="tnkernel_diff_1tnkernel_diff_make_alig">troubles with MAKE_ALIG() macro</link> as well as about bugs in the kernel, my messages were just ignored;</para>
</listitem><listitem>
<para>People are unable to <link linkend="contribution">contribute to the kernel</link>. There is even no some kind of main repository: there&apos;s just an archive with source code published on the website. When someone wants to contribute, he or she has no way to do this but to write to Yuri, but, as I&apos;ve already mentioned, messages like this are ignored. So, eventually people end up maintaining their own modification of TNKernel. Rest assured this will never happen with TNeo: even if some day I completely stop maintaining the kernel, I&apos;ll transfer ownership of the repository to someone who is interested in maintaining it.</para>
</listitem><listitem>
<para>Documentation is far from perfect and it lives separately of the project itself: latest kernel version at the moment is 2.7 (published at 2013), but latest documentation is for 2.3 (published at 2006).</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="why_reimplement_1why_reimplement__tnkernel_impl_details">
<title>Examples of poor implementation</title>
<section xml:id="why_reimplement_1why_reimplement__one_exit_point">
<title>One entry point, one exit point</title>

<para>The most common example that happens across all TNKernel sources is code like the following:</para>

<para><literallayout><computeroutput>int&#32;my_function(void)
{
&#32;&#32;&#32;tn_disable_interrupt();
&#32;&#32;&#32;//--&#32;do&#32;something

&#32;&#32;&#32;if&#32;(error()){
&#32;&#32;&#32;&#32;&#32;&#32;//--&#32;do&#32;something

&#32;&#32;&#32;&#32;&#32;&#32;tn_enable_interrupt();
&#32;&#32;&#32;&#32;&#32;&#32;return&#32;ERROR;
&#32;&#32;&#32;}
&#32;&#32;&#32;//--&#32;do&#32;something

&#32;&#32;&#32;tn_enable_interrupt();
&#32;&#32;&#32;return&#32;SUCCESS;
}
</computeroutput></literallayout></para>

<para>If you have multiple <computeroutput>return</computeroutput> statements or, even more, if you have to perform some action before return (<computeroutput><link linkend="tn__oldsymbols_8h_1acc85567ca09ede9cf2d58717506def46">tn_enable_interrupt()</link></computeroutput> in the example above), it&apos;s great job for <computeroutput>goto</computeroutput>:</para>

<para><literallayout><computeroutput>int&#32;my_function(void)
{
&#32;&#32;&#32;int&#32;rc&#32;=&#32;SUCCESS;
&#32;&#32;&#32;tn_disable_interrupt();
&#32;&#32;&#32;//--&#32;do&#32;something

&#32;&#32;&#32;if&#32;(error()){
&#32;&#32;&#32;&#32;&#32;&#32;//--&#32;do&#32;something
&#32;&#32;&#32;&#32;&#32;&#32;rc&#32;=&#32;ERROR;
&#32;&#32;&#32;&#32;&#32;&#32;goto&#32;out;
&#32;&#32;&#32;}
&#32;&#32;&#32;//--&#32;do&#32;something

out:
&#32;&#32;&#32;tn_enable_interrupt();
&#32;&#32;&#32;return&#32;rc;
}
</computeroutput></literallayout></para>

<para>I understand there are a lot of people that don&apos;t agree with me on this (mostly because they religiously believe that <computeroutput>goto</computeroutput> is unconditionally evil), but anyway I decided to explain it. And, let&apos;s go further:</para>

<para>While multiple <computeroutput>goto</computeroutput>-s to single label are better than multiple <computeroutput>return</computeroutput> statements, it becomes less useful as we get to something more complicated. Imagine we need to perform some checks <emphasis>before</emphasis> disabling interrupts, and perform some other checks <emphasis>after</emphasis> disabling them. Then, we have to create two labels, like that:</para>

<para><literallayout><computeroutput>int&#32;my_function(void)
{
&#32;&#32;&#32;int&#32;rc&#32;=&#32;SUCCESS;

&#32;&#32;&#32;if&#32;(error1()){
&#32;&#32;&#32;&#32;&#32;&#32;rc&#32;=&#32;ERROR1;
&#32;&#32;&#32;&#32;&#32;&#32;goto&#32;out;
&#32;&#32;&#32;}

&#32;&#32;&#32;tn_disable_interrupt();

&#32;&#32;&#32;if&#32;(error2()){
&#32;&#32;&#32;&#32;&#32;&#32;rc&#32;=&#32;ERROR2;
&#32;&#32;&#32;&#32;&#32;&#32;goto&#32;out_ei;
&#32;&#32;&#32;}

&#32;&#32;&#32;if&#32;(error3()){
&#32;&#32;&#32;&#32;&#32;&#32;rc&#32;=&#32;ERROR3;
&#32;&#32;&#32;&#32;&#32;&#32;goto&#32;out_ei;
&#32;&#32;&#32;}

&#32;&#32;&#32;//--&#32;perform&#32;job

out_ei:
&#32;&#32;&#32;tn_enable_interrupt();

out:
&#32;&#32;&#32;return&#32;rc;
}
</computeroutput></literallayout></para>

<para>For each error handling, we should specify the label explicitly, and it&apos;s easy to mix labels up, especially if we add some new case to check in the future. So, I believe this approach is a superior:</para>

<para><literallayout><computeroutput>int&#32;my_function(void)
{
&#32;&#32;&#32;int&#32;rc&#32;=&#32;SUCCESS;

&#32;&#32;&#32;if&#32;(error1()){
&#32;&#32;&#32;&#32;&#32;&#32;rc&#32;=&#32;ERROR1;
&#32;&#32;&#32;}&#32;else&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;tn_disable_interrupt();

&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(error2()){
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rc&#32;=&#32;ERROR2;
&#32;&#32;&#32;&#32;&#32;&#32;}&#32;else&#32;if&#32;(error3()){
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rc&#32;=&#32;ERROR3;
&#32;&#32;&#32;&#32;&#32;&#32;}&#32;else&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//--&#32;perform&#32;job
&#32;&#32;&#32;&#32;&#32;&#32;}

&#32;&#32;&#32;&#32;&#32;&#32;tn_enable_interrupt();
&#32;&#32;&#32;}

&#32;&#32;&#32;return&#32;rc;
}
</computeroutput></literallayout></para>

<para>Then, for each new error handling, we should just add new <computeroutput>else if</computeroutput> block, and there&apos;s no need to care where to go if error happened. Let the compiler do the branching job for you. More, this code looks more compact.</para>

<para>Needless to say, I already found such bug in original TNKernel 2.7 code. The function <computeroutput><link linkend="tn__oldsymbols_8h_1a74b0cfd9bbf5a85f4e0d00a984f60f5e">tn_sys_tslice_ticks()</link></computeroutput> looks as follows:</para>

<para><literallayout><computeroutput>int&#32;tn_sys_tslice_ticks(int&#32;priority,int&#32;value)
{
&#32;&#32;&#32;TN_INTSAVE_DATA

&#32;&#32;&#32;TN_CHECK_NON_INT_CONTEXT

&#32;&#32;&#32;tn_disable_interrupt();

&#32;&#32;&#32;if(priority&#32;&lt;=&#32;0&#32;||&#32;priority&#32;&gt;=&#32;TN_NUM_PRIORITY-1&#32;||
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;&lt;&#32;0&#32;||&#32;value&#32;&gt;&#32;MAX_TIME_SLICE)
&#32;&#32;&#32;&#32;&#32;&#32;return&#32;TERR_WRONG_PARAM;

&#32;&#32;&#32;tn_tslice_ticks[priority]&#32;=&#32;value;

&#32;&#32;&#32;tn_enable_interrupt();
&#32;&#32;&#32;return&#32;TERR_NO_ERR;
}
</computeroutput></literallayout></para>

<para>If you look closely, you can see that if wrong params were given, <computeroutput><link linkend="tn__oldsymbols_8h_1a35ec519d54f884d84c5814f49f00a22b">TERR_WRONG_PARAM</link></computeroutput> is returned, and <emphasis role="bold">interrupts remain disabled</emphasis>. If we follow the <emphasis>one entry point, one exit point</emphasis> rule, this bug is much less likely to happen.</para>
</section>
<section xml:id="why_reimplement_1why_reimplement__dont_repeat_yourself">
<title>Don&apos;t repeat yourself</title>

<para>Original TNKernel 2.7 code has <emphasis role="bold">a lot</emphasis> of code duplication. So many similar things are done in several places just by copy-pasting the code.</para>

<para><itemizedlist>
<listitem>
<para>If we have similar functions (like, <computeroutput><link linkend="tn__dqueue_8h_1a043dd3133a57489d7d10f53be6939957">tn_queue_send()</link></computeroutput>, <computeroutput><link linkend="tn__dqueue_8h_1af60c61c12ed90f4bcc7d13ca4da8562b">tn_queue_send_polling()</link></computeroutput> and <computeroutput><link linkend="tn__dqueue_8h_1ac059f15f07625ca25e4aac5790cce1ea">tn_queue_isend_polling()</link></computeroutput>), the implementation is just copy-pasted, there&apos;s no effort to generalize things.</para>
</listitem><listitem>
<para>Mutexes have complicated algorithms for task priorities. It is implemented in inconsistent, messy manner, which leads to bugs (refer to <link linkend="why_reimplement_1why_reimplement__bugs">Bugs of TNKernel 2.7</link>)</para>
</listitem><listitem>
<para>Transitions between task states are done, again, in inconsistent copy-pasting manner. When we need to move task from, say, <link linkend="tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6a02783ac7808aeda318a6f506b7a276dc"><computeroutput>RUNNABLE</computeroutput></link> state to the <link linkend="tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6aaa3dfaf2bb5992e0cef981618ce30d56"><computeroutput>WAIT</computeroutput></link> state, it&apos;s not enough to just clear one flag and set another one: we also need to remove it from whatever run queue the task is contained, probably find next task to run, then set reason of waiting, probably add to wait queue, set up timeout if specified, etc. In original TNKernel 2.7, there&apos;s no general mechanism to do this.</para>

<para>Meanwhile, the correct way is to create three functions for each state:<itemizedlist>
<listitem>
<para>to set the state;</para>
</listitem><listitem>
<para>to clear the state;</para>
</listitem><listitem>
<para>to test if the state active.</para>
</listitem></itemizedlist>
</para>

<para>And then, when we need to move task from one state to another, we typically should just call two functions: one for clearing current state, and one for settine a new one. It <emphasis role="bold">is</emphasis> consistent, and of course this approach is used in TNeo.</para>
</listitem></itemizedlist>
</para>

<para>As a result of the violation of the rule <emphasis>Don&apos;t repeat yourself</emphasis>, when we need to change something, we need to change it in several places. Needless to say, it is very error-prone practice, and of course there are bugs in original TNKernel because of that (refer to <link linkend="why_reimplement_1why_reimplement__bugs">Bugs of TNKernel 2.7</link>).</para>
</section>
<section xml:id="why_reimplement_1why_reimplement__returning_macro">
<title>Macros that return from function</title>

<para>TNKernel uses architecture-depended macros like <computeroutput>TN_CHECK_NON_INT_CONTEXT</computeroutput>. This macro checks the current context (task or ISR), and if it is ISR, it returns <computeroutput>TERR_WRONG_PARAM</computeroutput>.</para>

<para>It isn&apos;t obvious to the reader of the code, but things like returning from function <emphasis role="bold">must</emphasis> be as obvious as possible.</para>

<para>It is better to invent some function that tests current context, and return the value explicitly:</para>

<para><literallayout><computeroutput>enum&#32;TN_RCode&#32;my_function(void)
&#32;&#32;&#32;enum&#32;TN_RCode&#32;rc&#32;=&#32;TN_RC_OK;

&#32;&#32;&#32;//&#32;...

&#32;&#32;&#32;if&#32;(!tn_is_task_context()){
&#32;&#32;&#32;&#32;&#32;&#32;rc&#32;=&#32;TN_RC_WCONTEXT;
&#32;&#32;&#32;&#32;&#32;&#32;goto&#32;out;
&#32;&#32;&#32;}

&#32;&#32;&#32;//&#32;...

out:
&#32;&#32;&#32;return&#32;rc
}
</computeroutput></literallayout></para>
</section>
<section xml:id="why_reimplement_1why_reimplement__linked_lists">
<title>Code for doubly-linked lists</title>

<para>TNKernel uses doubly-linked lists heavily, which is very good. I must admit that I really like the way data is organized in TNKernel. But, unfortunately, code that manages data is far from perfect, as I already mentioned.</para>

<para>So, let&apos;s get to the lists. I won&apos;t paste all the macros here, just make some overview. If we have a list, it&apos;s very common task to iterate through it. Typical snippet in TNKernel looks like this:</para>

<para><literallayout><computeroutput>CDLL_QUEUE&#32;*&#32;curr_que;
TN_MUTEX&#32;*&#32;tmp_mutex;

curr_que&#32;=&#32;tn_curr_run_task-&gt;mutex_queue.next;
while(curr_que&#32;!=&#32;&amp;(tn_curr_run_task-&gt;mutex_queue))
{
&#32;&#32;&#32;tmp_mutex&#32;=&#32;get_mutex_by_mutex_queque(curr_que);

&#32;&#32;&#32;/*&#32;now,&#32;tmp_mutex&#32;points&#32;to&#32;the&#32;next&#32;object,&#32;so,
&#32;&#32;&#32;&#32;&#32;&#32;we&#32;can&#32;do&#32;something&#32;useful&#32;with&#32;it&#32;*/

&#32;&#32;&#32;curr_que&#32;=&#32;curr_que-&gt;next;
}
</computeroutput></literallayout></para>

<para>This code is neither easy to read nor elegant. It&apos;s much better to use special macro for that (actually, similar macros are used across the whole Linux kernel code) :</para>

<para><literallayout><computeroutput>TN_MUTEX&#32;*&#32;tmp_mutex;

tn_list_for_each_entry(tmp_mutex,&#32;&amp;(tn_curr_run_task-&gt;mutex_queue),&#32;mutex_queue){
&#32;&#32;&#32;/*&#32;now,&#32;tmp_mutex&#32;points&#32;to&#32;the&#32;next&#32;object,&#32;so,
&#32;&#32;&#32;&#32;&#32;&#32;we&#32;can&#32;do&#32;something&#32;useful&#32;with&#32;it&#32;*/
}
</computeroutput></literallayout></para>

<para>Much shorter and intuitive, isn&apos;t it? We even don&apos;t have to keep special <computeroutput>curr_que</computeroutput>.</para>
</section>
</section>
<section xml:id="why_reimplement_1why_reimplement__bugs">
<title>Bugs of TNKernel 2.7</title>

<para>TNKernel 2.7 has several bugs, which are caught by detailed unit tests and fixed.</para>

<para><itemizedlist>
<listitem>
<para>We have two tasks: low-priority one <computeroutput>task_low</computeroutput> and high-priority one <computeroutput>task_high</computeroutput>. They use mutex <computeroutput>M1</computeroutput> with priority inheritance.<itemizedlist>
<listitem>
<para><computeroutput>task_low</computeroutput> locks <computeroutput>M1</computeroutput></para>
</listitem><listitem>
<para><computeroutput>task_high</computeroutput> tries to lock mutex <computeroutput>M1</computeroutput> and gets blocked -&gt; priority of <computeroutput>task_low</computeroutput> elevates to the priority of <computeroutput>task_high</computeroutput></para>
</listitem><listitem>
<para><computeroutput>task_high</computeroutput> stops waiting for mutex by timeout -&gt; priority of <computeroutput>task_low</computeroutput> remains elevated. The same happens if <computeroutput>task_high</computeroutput> is terminated by <computeroutput><link linkend="tn__tasks_8h_1a8ae6615de7022a327bdcd4c37a0f5b90">tn_task_terminate()</link></computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para>We have three tasks: two low-priority tasks <computeroutput>task_low1</computeroutput> and <computeroutput>task_low2</computeroutput>, and high-priority one <computeroutput>task_high</computeroutput>. They use mutex <computeroutput>M1</computeroutput> with priority inheritance.<itemizedlist>
<listitem>
<para><computeroutput>task_low1</computeroutput> locks <computeroutput>M1</computeroutput></para>
</listitem><listitem>
<para><computeroutput>task_low2</computeroutput> tries to lock <computeroutput>M1</computeroutput> and gets blocked</para>
</listitem><listitem>
<para><computeroutput>task_high</computeroutput> tries to lock <computeroutput>M1</computeroutput> and gets blocked -&gt; priority if <computeroutput>task_low1</computeroutput> is elevated</para>
</listitem><listitem>
<para><computeroutput>task_low1</computeroutput> unlocks <computeroutput>M1</computeroutput> -&gt;<itemizedlist>
<listitem>
<para>priority of <computeroutput>task_low1</computeroutput> returns to base value</para>
</listitem><listitem>
<para><computeroutput>task_low2</computeroutput> locks <computeroutput>M1</computeroutput> because it&apos;s the next task in the mutex queue</para>
</listitem><listitem>
<para>now, priority of <computeroutput>task_low2</computeroutput> should be elevated, but it doesn&apos;t happen. Priority inversion is in effect.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><computeroutput><link linkend="tn__mutex_8h_1a9c935ae470f1d36f8d88c254a4d513e4">tn_mutex_delete()</link></computeroutput> : if mutex is not locked, <computeroutput><link linkend="tn__oldsymbols_8h_1acc6afb7d5fab73e262e8cb4f9fd06ac4">TERR_ILUSE</link></computeroutput> is returned. Of course, task should be able to delete non-locked mutex;</para>
</listitem><listitem>
<para>If task that waits for mutex is in <link linkend="tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6ad010070ccc16a5c706c286baf2e3ee2a"><computeroutput>WAIT+SUSPEND</computeroutput></link> state, and mutex is deleted, <computeroutput><link linkend="tn__oldsymbols_8h_1a71970f860643e62fad7ec03076bdc1d8">TERR_NO_ERR</link></computeroutput> is returned after returning from <link linkend="tn__tasks_8h_1a5e12e8a0ab280b515f44bf3fee1210a6adcf21b28920038f38cccc50fda12ba58"><computeroutput>SUSPEND</computeroutput></link> state, instead of <computeroutput><link linkend="tn__oldsymbols_8h_1ae6a83c118d209d8702c3fc40d58ea18f">TERR_DLT</link></computeroutput>. The same for queue deletion, semaphore deletion, event deletion.</para>
</listitem><listitem>
<para><computeroutput><link linkend="tn__oldsymbols_8h_1a74b0cfd9bbf5a85f4e0d00a984f60f5e">tn_sys_tslice_ticks()</link></computeroutput> : if wrong params are given, <computeroutput><link linkend="tn__oldsymbols_8h_1a35ec519d54f884d84c5814f49f00a22b">TERR_WRONG_PARAM</link></computeroutput> is returned and interrupts remain disabled.</para>
</listitem><listitem>
<para><computeroutput><link linkend="tn__dqueue_8h_1ab47ed49af7dffc5a71eaabd25422d0e4">tn_queue_receive()</link></computeroutput> and <computeroutput><link linkend="tn__fmem_8h_1a2ecd094041dbd0e92d61b852b7952444">tn_fmem_get()</link></computeroutput> : if <computeroutput>timeout</computeroutput> is in effect, then <computeroutput><link linkend="tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a5b4d73fde6b5d1c9579c02e6aafce1fb">TN_RC_TIMEOUT</link></computeroutput> is returned, but user-provided pointer is altered anyway (some garbage data is written there)</para>
</listitem><listitem>
<para>Probably not a &quot;bug&quot;, but an issue in the data queue: actual capacity of the buffer is less by 1 than user has specified and allocated</para>
</listitem><listitem>
<para>Event: if <computeroutput>TN_EVENT_ATTR_CLR</computeroutput> flag is set, and the task that is waiting for event is suspended, this flag <computeroutput>TN_EVENT_ATTR_CLR</computeroutput> is ignored (pattern is not reset). I can&apos;t say this bug is &quot;fixed&quot; because TNeo has <link linkend="tnkernel_diff_1tnkernel_diff_event">event groups instead of events</link>, and there is no <computeroutput>TN_EVENT_ATTR_CLR</computeroutput> flag.</para>
</listitem></itemizedlist>
</para>

<para>Bugs with mutexes are the direct result of the inconsistency and copy-pasting the code, as well as lack of unit tests. </para>
</section>

</chapter>
