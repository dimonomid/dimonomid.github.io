<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>PIC24/dsPIC details</title>

<para>PIC24/dsPIC port implementation details</para>
<section xml:id="pic24_details_1pic24_context_switch">
<title>Context switch</title>

<para>The context switch is implemented using the external interrupt 0 (<computeroutput>INT0</computeroutput>). It is handled completely by the kernel, application should never touch it.</para>
</section>
<section xml:id="pic24_details_1pic24_interrupts">
<title>Interrupts</title>

<para>For detailed information about interrupts in TNeoKernel, refer to the page <link linkend="interrupts">Interrupts</link>.</para>

<para>PIC24/dsPIC TNeoKernel port supports nested interrupts. It allows to specify the range of <emphasis>system interrupt priorities</emphasis>. Refer to the section <link linkend="interrupts_1interrupt_types">Interrupt types</link> for details on what is <emphasis>system interrupt</emphasis>.</para>

<para>System interrupts use separate interrupt stack instead of the task&apos;s stack. This approach saves a lot of RAM.</para>

<para>The range is specified by just a single number: <computeroutput><link linkend="tn__cfg__default_8h_1a4feb7eb34fc2f175167b7496b63c398a">TN_P24_SYS_IPL</link></computeroutput>, which represents maximum <emphasis>system interrupt priority</emphasis>. Here is a list of available priorities and their characteristics:</para>

<para><itemizedlist>
<listitem>
<para>priorities <computeroutput>[1 .. <link linkend="tn__cfg__default_8h_1a4feb7eb34fc2f175167b7496b63c398a">TN_P24_SYS_IPL</link>]</computeroutput>:<itemizedlist>
<listitem>
<para>Kernel services <emphasis role="bold">are</emphasis> allowed to call;</para>
</listitem><listitem>
<para>The macro <computeroutput><link linkend="tn__arch__pic24_8h_1a0b184d3c15066f5504144379d2624ff3">tn_p24_soft_isr()</link></computeroutput> <emphasis role="bold">must</emphasis> be used.</para>
</listitem><listitem>
<para>Separate interrupt stack is used by ISR;</para>
</listitem><listitem>
<para>Interrupts get disabled for short periods of time when modifying critical kernel data (for about 100 cycles or the like).</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para>priorities <computeroutput>[(<link linkend="tn__cfg__default_8h_1a4feb7eb34fc2f175167b7496b63c398a">TN_P24_SYS_IPL</link> + 1) .. 6]</computeroutput>:<itemizedlist>
<listitem>
<para>Kernel services <emphasis role="bold">are not</emphasis> allowed to call;</para>
</listitem><listitem>
<para>The macro <computeroutput><link linkend="tn__arch__pic24_8h_1a0b184d3c15066f5504144379d2624ff3">tn_p24_soft_isr()</link></computeroutput> <emphasis role="bold">must not</emphasis> be used.</para>
</listitem><listitem>
<para>Task&apos;s stack is used by ISR;</para>
</listitem><listitem>
<para>Interrupts are not disabled when modifying critical kernel data, but they are disabled for 4..8 cycles by <computeroutput>disi</computeroutput> instruction when entering/exiting system ISR: we need to safely modify <computeroutput>SP</computeroutput> and <computeroutput>SPLIM</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para>priority <computeroutput>7</computeroutput>:<itemizedlist>
<listitem>
<para>Kernel services <emphasis role="bold">are not</emphasis> allowed to call;</para>
</listitem><listitem>
<para>The macro <computeroutput><link linkend="tn__arch__pic24_8h_1a0b184d3c15066f5504144379d2624ff3">tn_p24_soft_isr()</link></computeroutput> <emphasis role="bold">must not</emphasis> be used.</para>
</listitem><listitem>
<para>Task&apos;s stack is used by ISR;</para>
</listitem><listitem>
<para>Interrupts are never disabled by the kernel. Note that <computeroutput>disi</computeroutput> instruction leaves interrupts of priority 7 enabled.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>

<para>The kernel provides C-language macro for calling C-language <emphasis role="bold">system</emphasis> interrupt service routines.</para>

<para>Usage is as follows:</para>

<para><literallayout><computeroutput>/*&#32;
&#32;*&#32;Timer&#32;1&#32;interrupt&#32;handler&#32;using&#32;software&#32;interrupt&#32;context&#32;saving,&#32;&#32;
&#32;*&#32;PSV&#32;is&#32;handled&#32;automatically:
&#32;*/
tn_p24_soft_isr(_T1Interrupt,&#32;auto_psv)
{
&#32;&#32;&#32;//--&#32;clear&#32;interrupt&#32;flag
&#32;&#32;&#32;IFS0bits.T1IF&#32;=&#32;0;

&#32;&#32;&#32;//--&#32;do&#32;something&#32;useful
}
</computeroutput></literallayout></para>

<para><formalpara><title>Attention: </title>

<para>do <emphasis role="bold">not</emphasis> use this macro for non-system interrupt (that is, for interrupt of priority higher than <computeroutput><link linkend="tn__cfg__default_8h_1a4feb7eb34fc2f175167b7496b63c398a">TN_P24_SYS_IPL</link></computeroutput>). Use standard way to define it. If you violate this rule, debugger will be halted by the kernel when entering ISR. In release build, CPU is just reset.</para>
</formalpara>
</para>
</section>
<section xml:id="pic24_details_1pic24_bfa">
<title>Atomic access to the structure bit field</title>

<para>The problem with PIC24/dsPIC is that when we write something like:</para>

<para><literallayout><computeroutput>IPC0bits.INT0IP&#32;=&#32;0x05;
</computeroutput></literallayout></para>

<para>We actually have read-modify-write sequence which can be interrupted, so that resulting data could be corrupted. PIC24/dsPIC port provides several macros that offer atomic access to the structure bit field.</para>

<para>The kernel would not probably provide that kind of functionality, but TNeoKernel itself needs it, so, it is made public so that application can use it too.</para>

<para>Refer to the page <link linkend="tn__arch__pic24__bfa_8h">Atomic bit-field access macros</link> for details.</para>
</section>
<section xml:id="pic24_details_1pic24_building">
<title>Building</title>

<para>For generic information on building TNeoKernel, refer to the page <link linkend="building">Building the project</link>.</para>

<para>MPLABX project for PIC24/dsPIC port resides in the <computeroutput>src/arch/pic24_dspic/tneokernel_pic24_dspic.X</computeroutput> directory. This is a <emphasis>library project</emphasis> in terms of MPLABX, so if you use MPLABX you can easily add it to your main project by right-clicking <computeroutput>Libraries -&gt; Add Library Project ...</computeroutput>.</para>

<para><formalpara><title>Attention: </title>

<para>there are two configurations of this project: <emphasis>eds</emphasis> and <emphasis> no_eds</emphasis>, for devices with and without extended data space, respectively. When you add library project to your application project, you should select correct configuration for your device; otherwise, you get &quot;undefined reference&quot; errors at linker step.</para>
</formalpara>
Alternatively, of course you can just build it and use resulting <computeroutput>.a</computeroutput> file in whatever way you like. </para>
</section>

</chapter>
