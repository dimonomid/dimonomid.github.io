<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>PIC32 details</title>

<para>PIC32 port implementation details</para>
<section xml:id="pic32_details_1pic32_context_switch">
<title>Context switch</title>

<para>The context switch is implemented using the core software 0 interrupt (<computeroutput>CS0</computeroutput>), which is configured by the kernel to the lowest priority (1). This interrupt is handled completely by the kernel, application should never touch it.</para>

<para>The interrupt priority level 1 should not be configured to use shadow register sets.</para>

<para>Multi-vectored interrupt mode should be enabled.</para>

<para><formalpara><title>Attention: </title>

<para>if tneokernel is built as a separate library, then the file <computeroutput>src/arch/pic32/tn_arch_pic32_int_vec1.S</computeroutput> must be included in the main project itself, in order to dispatch vector1 (core software interrupt 0) correctly. Do note that if we include this file in the TNeoKernel library project, it doesn&apos;t work for vector, unfortunately.</para>
<simplesect/>
<para>If you forgot to include this file, you got an error on the link step, like this: <literallayout><computeroutput>undefined&#32;reference&#32;to&#32;`_you_should_add_file___tn_arch_pic32_int_vec1_S___to_the_project&apos;
</computeroutput></literallayout> Which is much more informative than if you just get to <computeroutput>_DefaultInterrupt</computeroutput> when it&apos;s time to switch context.</para>
</formalpara>
</para>
</section>
<section xml:id="pic32_details_1pic32_interrupts">
<title>Interrupts</title>

<para>For generic information about interrupts in TNeoKernel, refer to the page <link linkend="interrupts">Interrupts</link>.</para>

<para>PIC32 port has <emphasis>system interrupts</emphasis> only, there are no <emphasis>user interrupts</emphasis>.</para>

<para>PIC32 port supports nested interrupts. The kernel provides C-language macros for calling C-language interrupt service routines, which can use either MIPS32 or MIPS16e mode. Both software and shadow register interrupt context saving is supported. Usage is as follows:</para>

<para><literallayout><computeroutput>/*&#32;Timer&#32;1&#32;interrupt&#32;handler&#32;using&#32;software&#32;interrupt&#32;context&#32;saving&#32;*/
tn_p32_soft_isr(_TIMER_1_VECTOR)
{
&#32;&#32;&#32;/*&#32;here&#32;is&#32;your&#32;ISR&#32;code,&#32;including&#32;clearing&#32;of&#32;interrupt&#32;flag,&#32;and&#32;so&#32;on&#32;*/
}

/*&#32;High-priority&#32;UART&#32;interrupt&#32;handler&#32;using&#32;shadow&#32;register&#32;set&#32;*/
tn_p32_srs_isr(_UART_1_VECTOR)
{
&#32;&#32;&#32;/*&#32;here&#32;is&#32;your&#32;ISR&#32;code,&#32;including&#32;clearing&#32;of&#32;interrupt&#32;flag,&#32;and&#32;so&#32;on&#32;*/
}
</computeroutput></literallayout></para>

<para>In spite of the fact that the kernel provides separate stack for interrupt, this isn&apos;t a mandatory on PIC32: you&apos;re able to define your ISR in a standard way, making it use stask of interrupted task and work a bit faster. Like this:</para>

<para><literallayout><computeroutput>void&#32;__ISR(_TIMER_1_VECTOR)&#32;timer_1_isr(void)
{
&#32;&#32;&#32;/*&#32;here&#32;is&#32;your&#32;ISR&#32;code,&#32;including&#32;clearing&#32;of&#32;interrupt&#32;flag,&#32;and&#32;so&#32;on&#32;*/
}
</computeroutput></literallayout></para>

<para>There is always a tradeoff. There are <emphasis role="bold">no additional constraints</emphasis> on ISR defined without kernel-provided macro: in either ISR, you can call the same set of kernel services.</para>

<para>When you make a decision on whether particular ISR should use separate stack, consider the following:</para>

<para><itemizedlist>
<listitem>
<para>When ISR is defined in a standard way, and no function is called from that ISR, only necessary registers are saved on stack. If you have such an ISR (that doesn&apos;t call any function), and this ISR should work very fast, consider using standard way instead of kernel-provided macro.</para>
</listitem><listitem>
<para>When ISR is defined in a standard way, but it calls any function and doesn&apos;t use shadow register set, compiler saves (almost) full context <emphasis role="bold">on the task&apos;s stack</emphasis>, because it doesn&apos;t know which registers are used inside the function. In this case, it usually makes more sense to use kernel-provided macro (see below).</para>
</listitem><listitem>
<para>Kernel-provided interrupt macros switch stack pointer between interrupt stack and task stack automatically, it takes additional time: e.g. on PIC32 it&apos;s about 20 cycles.</para>
</listitem><listitem>
<para>Kernel-provided interrupt macro that doesn&apos;t use shadow register set always saves (almost) full context <emphasis role="bold">on the interrupt stack</emphasis>, independently of whether any function is called from an ISR.</para>
</listitem><listitem>
<para>Kernel-provided interrupt macro that uses shadow register set saves a little amount of registers <emphasis role="bold">on the interrupt stack</emphasis>.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="pic32_details_1pic32_building">
<title>Building</title>

<para>For generic information on building TNeoKernel, refer to the page <link linkend="building">Building the project</link>.</para>

<para>MPLABX project for PIC32 port resides in the <computeroutput>src/arch/pic32/tneokernel_pic32.X</computeroutput> directory. This is a <emphasis>library project</emphasis> in terms of MPLABX, so if you use MPLABX you can easily add it to your main project by right-clicking <computeroutput>Libraries -&gt; Add Library Project ...</computeroutput>. Alternatively, of course you can just build it and use resulting <computeroutput>tneokernel_pic32.X.a</computeroutput> file in whatever way you like. </para>
</section>

</chapter>
