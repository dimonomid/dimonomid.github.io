<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Differences from TNKernel API</title>

<para>If you have experience of using TNKernel, you really want to read this.</para>
<section xml:id="tnkernel_diff_1tnkernel_diff_api">
<title>Incompatible API changes</title>
<section xml:id="tnkernel_diff_1tnkernel_diff_api_sys_start">
<title>System startup</title>

<para>Original TNKernel code designed to be built together with main project only, there&apos;s no way to build as a separate library: at least, arrays for idle and timer task stacks are allocated statically, so size of them is defined at tnkernel compile time.</para>

<para>It&apos;s much better if we could pass these things to tnkernel at runtime, so, <computeroutput><link linkend="tn__sys_8h_1a62ab25d9d8ca01c02d368968f19e49bf">tn_sys_start()</link></computeroutput> now takes pointers to stack arrays and their sizes. Refer to <link linkend="quick_guide_1starting_the_kernel">Starting the kernel</link> section for the details.</para>
</section>
<section xml:id="tnkernel_diff_1tnkernel_diff_task_create">
<title>Task creation API</title>

<para>In original TNKernel, one should give bottom address of the task stack to <computeroutput><link linkend="tn__tasks_8h_1a548d5adda09d1b4e393b5df0e9e1a7a5">tn_task_create()</link></computeroutput>, like this:</para>

<para><literallayout><computeroutput>#define&#32;MY_STACK_SIZE&#32;&#32;&#32;0x100
static&#32;unsigned&#32;int&#32;my_stack[&#32;MY_STACK_SIZE&#32;];

tn_task_create(/*&#32;...&#32;several&#32;arguments&#32;omitted&#32;...&#32;*/
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;(my_stack[&#32;MY_STACK_SIZE&#32;-&#32;1]),
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/*&#32;...&#32;several&#32;arguments&#32;omitted&#32;...&#32;*/);
</computeroutput></literallayout></para>

<para>Alex Borisov implemented it more conveniently in his port: one should give just array address, like this: <literallayout><computeroutput>tn_task_create(/*&#32;...&#32;several&#32;arguments&#32;omitted&#32;...&#32;*/
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;my_stack,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/*&#32;...&#32;several&#32;arguments&#32;omitted&#32;...&#32;*/);
</computeroutput></literallayout></para>

<para>TNeo uses the second way (i.e. the way used in the port by Alex Borisov), and it does so independently of the architecture being used.</para>
</section>
<section xml:id="tnkernel_diff_1tnkernel_diff_wakeup_count">
<title>Task wakeup count, activate count, suspend count</title>

<para>In original TNKernel, requesting non-sleeping task to wake up is quite legal and causes next call to <computeroutput><link linkend="tn__tasks_8h_1ae768a72ca0efde5767796cc1770bd45e">tn_task_sleep()</link></computeroutput> to not sleep. The same is with suspending/resuming tasks.</para>

<para>So, if you call <computeroutput><link linkend="tn__tasks_8h_1abb88bc8b1cec6b82e7b6e2e90d0e155a">tn_task_wakeup()</link></computeroutput> on non-sleeping task first time, <computeroutput><link linkend="tn__oldsymbols_8h_1a71970f860643e62fad7ec03076bdc1d8">TERR_NO_ERR</link></computeroutput> is returned. If you call it second time, before target task called <computeroutput><link linkend="tn__tasks_8h_1ae768a72ca0efde5767796cc1770bd45e">tn_task_sleep()</link></computeroutput>, <computeroutput><link linkend="tn__oldsymbols_8h_1abfe40d04917509ecd3a98c38878df5ff">TERR_OVERFLOW</link></computeroutput> is returned.</para>

<para>All of this seems to me as a complete dirty hack, it probably might be used as a workaround to avoid race condition problems, or as a hacky replacement for semaphore.</para>

<para>It just encourages programmer to go with hacky approach, instead of creating straightforward semaphore and provide proper synchronization.</para>

<para>In TNeo these &quot;features&quot; are removed, and if you try to wake up non-sleeping task, or try to resume non-suspended task, <computeroutput><link linkend="tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a7b6d93374f52ba4b2fc01b38b783aa4c">TN_RC_WSTATE</link></computeroutput> is returned.</para>

<para>By the way, <computeroutput>suspend_count</computeroutput> is present in <computeroutput>TCB</computeroutput> structure, but is never used, so, it is just removed. And comments for <computeroutput>wakeup_count</computeroutput>, <computeroutput>activate_count</computeroutput>, <computeroutput>suspend_count</computeroutput> suggested that these fields are used for statistics, which is clearly not true.</para>
</section>
<section xml:id="tnkernel_diff_1tnkernel_diff_fmem">
<title>Fixed memory pool: non-aligned address or block size</title>

<para>In original TNKernel it&apos;s illegal to pass <computeroutput>block_size</computeroutput> that is less than <computeroutput>sizeof(int)</computeroutput>. But, it is legal to pass some value that isn&apos;t multiple of <computeroutput>sizeof(int)</computeroutput>: in this case, <computeroutput>block_size</computeroutput> is silently rounded up, and therefore <computeroutput>block_cnt</computeroutput> is silently decremented to fit as many blocks of newly calculated <computeroutput>block_size</computeroutput> as possible. If resulting <computeroutput>block_cnt</computeroutput> is at least 2, it is assumed that everything is fine and we can go on.</para>

<para>Why I don&apos;t like it: firstly, silent behavior like this is generally bad practice that leads to hard-to-catch bugs. Secondly, it is inconsistency again: why is it legal for <computeroutput>block_size</computeroutput> not to be multiple of <computeroutput>sizeof(int)</computeroutput>, but it is illegal for it to be less than <computeroutput>sizeof(int)</computeroutput>? After all, the latter is the partucular case of the former.</para>

<para>So, TNeo returns <computeroutput><link linkend="tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a89909a6426b477a38496a1be67590e68">TN_RC_WPARAM</link></computeroutput> in these cases. User must provide <computeroutput>start_addr</computeroutput> and <computeroutput>block_size</computeroutput> that are properly aligned.</para>

<para>TNeo also provides convenience macro <computeroutput><link linkend="tn__fmem_8h_1ab45e9c2ad4a64345214f9a912bf76fc3">TN_FMEM_BUF_DEF()</link></computeroutput> for buffer definition, so, as a generic rule, it is good practice to define buffers for memory pool like this:</para>

<para><literallayout><computeroutput>//--&#32;number&#32;of&#32;blocks&#32;in&#32;the&#32;pool
#define&#32;MY_MEMORY_BUF_SIZE&#32;&#32;&#32;&#32;8

//--&#32;type&#32;for&#32;memory&#32;block
struct&#32;MyMemoryItem&#32;{
&#32;&#32;&#32;//&#32;...&#32;arbitrary&#32;fields&#32;...
};

//--&#32;define&#32;buffer&#32;for&#32;memory&#32;pool
TN_FMEM_BUF_DEF(my_fmem_buf,&#32;struct&#32;MyMemoryItem,&#32;MY_MEMORY_BUF_SIZE);

//--&#32;define&#32;memory&#32;pool&#32;structure
struct&#32;TN_FMem&#32;my_fmem;
</computeroutput></literallayout></para>

<para>And then, construct your <computeroutput>my_fmem</computeroutput> as follows:</para>

<para><literallayout><computeroutput>enum&#32;TN_RCode&#32;rc;
rc&#32;=&#32;tn_fmem_create(&#32;&amp;my_fmem,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;my_fmem_buf,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TN_MAKE_ALIG_SIZE(sizeof(struct&#32;MyMemoryItem)),
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MY_MEMORY_BUF_SIZE&#32;);
if&#32;(rc&#32;!=&#32;TN_RC_OK){
&#32;&#32;&#32;//--&#32;handle&#32;error
}
</computeroutput></literallayout></para>
</section>
<section xml:id="tnkernel_diff_1tnkernel_diff_task_retval">
<title>Task service return values cleaned</title>

<para>In original TNKernel, <computeroutput><link linkend="tn__oldsymbols_8h_1ad591ae7c53bbb81247492ea1d34a70b6">TERR_WCONTEXT</link></computeroutput> is returned in the following cases:</para>

<para><itemizedlist>
<listitem>
<para>call to <computeroutput><link linkend="tn__tasks_8h_1a8ae6615de7022a327bdcd4c37a0f5b90">tn_task_terminate()</link></computeroutput> for already terminated task;</para>
</listitem><listitem>
<para>call to <computeroutput><link linkend="tn__tasks_8h_1adbc4dbbd4a57b73642b76550a0c7c83f">tn_task_delete()</link></computeroutput> for non-terminated task;</para>
</listitem><listitem>
<para>call to <computeroutput><link linkend="tn__tasks_8h_1a2ddad9d6dc0e611a7f09c878463aea41">tn_task_change_priority()</link></computeroutput> for terminated task;</para>
</listitem><listitem>
<para>call to <computeroutput><link linkend="tn__tasks_8h_1abb88bc8b1cec6b82e7b6e2e90d0e155a">tn_task_wakeup()</link></computeroutput>/<computeroutput><link linkend="tn__tasks_8h_1a94e6a0312013e53cf08bcf871e6f4172">tn_task_iwakeup()</link></computeroutput> for terminated task;</para>
</listitem><listitem>
<para>call to <computeroutput><link linkend="tn__tasks_8h_1ae90ecdbd7d87d050c2c98ec775e6efc7">tn_task_release_wait()</link></computeroutput>/<computeroutput><link linkend="tn__tasks_8h_1aee0ef296af18733f64269386adf8a2d7">tn_task_irelease_wait()</link></computeroutput> for terminated task.</para>
</listitem></itemizedlist>
</para>

<para>The actual error is, of course, wrong state, not wrong context; so, TNeo returns <computeroutput><link linkend="tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a7b6d93374f52ba4b2fc01b38b783aa4c">TN_RC_WSTATE</link></computeroutput> in these cases.</para>
</section>
<section xml:id="tnkernel_diff_1tnkernel_diff_release_wait">
<title>Force task releasing from wait</title>

<para>In original TNKernel, a call to <computeroutput><link linkend="tn__tasks_8h_1ae90ecdbd7d87d050c2c98ec775e6efc7">tn_task_release_wait()</link></computeroutput> / <computeroutput><link linkend="tn__tasks_8h_1aee0ef296af18733f64269386adf8a2d7">tn_task_irelease_wait()</link></computeroutput> causes waiting task to wake up, regardless of wait reason, and <computeroutput><link linkend="tn__oldsymbols_8h_1a71970f860643e62fad7ec03076bdc1d8">TERR_NO_ERR</link></computeroutput> is returned as a wait result. Actually I believe it is bad idea to ever use <computeroutput><link linkend="tn__tasks_8h_1ae90ecdbd7d87d050c2c98ec775e6efc7">tn_task_release_wait()</link></computeroutput>, but if we have this service, error code surely should be distinguishable from normal wait completion, so, new code is added: <computeroutput><link linkend="tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876ae5cbacb0fb01805c9003046c08bf4356">TN_RC_FORCED</link></computeroutput>, and it is returned when task wakes up because of <computeroutput><link linkend="tn__tasks_8h_1ae90ecdbd7d87d050c2c98ec775e6efc7">tn_task_release_wait()</link></computeroutput> call.</para>
</section>
<section xml:id="tnkernel_diff_1tnkernel_diff_task_sleep">
<title>Return code of tn_task_sleep()</title>

<para>In original TNKernel, <computeroutput><link linkend="tn__tasks_8h_1ae768a72ca0efde5767796cc1770bd45e">tn_task_sleep()</link></computeroutput> always returns <computeroutput><link linkend="tn__oldsymbols_8h_1a71970f860643e62fad7ec03076bdc1d8">TERR_NO_ERR</link></computeroutput>, independently of what actually happened. In TNeo, there are three possible return codes:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput><link linkend="tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876a5b4d73fde6b5d1c9579c02e6aafce1fb">TN_RC_TIMEOUT</link></computeroutput> if timeout is actually in effect;</para>
</listitem><listitem>
<para><computeroutput><link linkend="tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876afb291924237186f5765865256c75e639">TN_RC_OK</link></computeroutput> if task was woken up by some other task with <computeroutput><link linkend="tn__tasks_8h_1abb88bc8b1cec6b82e7b6e2e90d0e155a">tn_task_wakeup()</link></computeroutput>;</para>
</listitem><listitem>
<para><computeroutput><link linkend="tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876ae5cbacb0fb01805c9003046c08bf4356">TN_RC_FORCED</link></computeroutput> if task was woken up forcibly by some other task with <computeroutput><link linkend="tn__tasks_8h_1ae90ecdbd7d87d050c2c98ec775e6efc7">tn_task_release_wait()</link></computeroutput>;</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="tnkernel_diff_1tnkernel_diff_event">
<title>Events API is changed almost completely</title>

<para>Note: for old TNKernel projects, there is a compatibility mode, see <computeroutput><link linkend="tn__cfg__default_8h_1ac61d5f6a716cdcab205a2c8afbde4242">TN_OLD_EVENT_API</link></computeroutput>.</para>

<para>In original TNKernel, I always found events API somewhat confusing. Why is this object named &quot;event&quot;, but there are many flags inside, so that they can actually represent many events?</para>

<para>Meanwhile, attributes like <computeroutput>TN_EVENT_ATTR_SINGLE</computeroutput>, <computeroutput>TN_EVENT_ATTR_CLR</computeroutput> imply that &quot;event&quot; object is really just a single event, since it makes no sense to clear just <emphasis role="bold">all</emphasis> event bits when some particular event happened.</para>

<para>After all, when we call <computeroutput><link linkend="tn__oldsymbols_8h_1aee4d9866fcfb8b9b6a96066b288150dc">tn_event_clear(&amp;my_event_obj, flags)</link></computeroutput>, we might expect that <computeroutput>flags</computeroutput> argument actually specifies flags to clear. But in fact, we must invert it, to make it work: <computeroutput>~flags</computeroutput>. This is really confusing.</para>

<para>In TNeo, there is no such <emphasis>event</emphasis> object. Instead, there is object <emphasis>events group</emphasis>. Attributes like <computeroutput>...SINGLE</computeroutput>, <computeroutput>...MULTI</computeroutput>, <computeroutput>...CLR</computeroutput> are removed, since they make no sense for events group. Instead, you may set the flag <computeroutput><link linkend="tn__eventgrp_8h_1a9d42ee61ae8da342f1cd6440b7e54bbdaf45098235d31f72a2b09e30792686573">TN_EVENTGRP_WMODE_AUTOCLR</link></computeroutput> when task is going to wait for some event bit(s), and then these event bit(s) will be atomically cleared automatically when task successfully finishes waiting for these bits.</para>

<para>TNeo also offers a very useful feature: connecting an event group to other kernel objects. Refer to the section <link linkend="tn__eventgrp_8h_1eventgrp_connect">Connecting an event group to other system objects</link>.</para>

<para>For detailed API reference, refer to the <computeroutput><link linkend="tn__eventgrp_8h">tn_eventgrp.h</link></computeroutput>.</para>
</section>
<section xml:id="tnkernel_diff_1tnkernel_diff_zero_timeout">
<title>Zero timeout given to system functions</title>

<para>In original TNKernel, system functions refused to perform job and returned <computeroutput><link linkend="tn__oldsymbols_8h_1a35ec519d54f884d84c5814f49f00a22b">TERR_WRONG_PARAM</link></computeroutput> if <computeroutput>timeout</computeroutput> is 0, but it is actually neither convenient nor intuitive: it is much better if the function behaves just like <computeroutput>...polling()</computeroutput> version of the function. All TNeo system functions allows timeout to be zero: in this case, function doesn&apos;t wait.</para>
</section>
</section>
<section xml:id="tnkernel_diff_1tnkernel_new_features">
<title>New features</title>

<para>Well, I&apos;m tired of maintaining this additional list of features, so I just say that there is a lot of new features: timers, event group connection, stack overflow check, recursive mutexes, mutex deadlock detection, profiler, dynamic tick, etc.</para>

<para>Refer to the generic <link linkend="features">feature list</link>.</para>
</section>
<section xml:id="tnkernel_diff_1tnkernel_new_api">
<title>Compatible API changes</title>
<section xml:id="tnkernel_diff_1tnkernel_diff_make_alig">
<title>Macro MAKE_ALIG()</title>

<para>There is a terrible mess with <computeroutput><link linkend="tn__oldsymbols_8h_1aa42d2e6b5b7ff37bd485803fa2cb70a8">MAKE_ALIG()</link></computeroutput> macro: TNKernel docs specify that the argument of it should be the size to align, but almost all ports, including original one, defined it so that it takes type, not size.</para>

<para>But the port by AlexB implemented it differently (i.e. accordingly to the docs) : it takes size as an argument.</para>

<para>When I was moving from the port by AlexB to another one, do you have any idea how much time it took me to figure out why do I have rare weird bug? :)</para>

<para>By the way, additional strange thing: why doesn&apos;t this macro have any prefix like <computeroutput>TN_</computeroutput>?</para>

<para>TNeo provides macro <computeroutput><link linkend="tn__common_8h_1a3f48380e8a624edc643319a81192d88e">TN_MAKE_ALIG_SIZE()</link></computeroutput> whose argument is <emphasis role="bold">size</emphasis>, so, its usage is as follows: <computeroutput><link linkend="tn__common_8h_1a3f48380e8a624edc643319a81192d88e">TN_MAKE_ALIG_SIZE(sizeof(struct MyStruct))</link></computeroutput>. This macro is preferred.</para>

<para>But for compatibility with messy <computeroutput><link linkend="tn__oldsymbols_8h_1aa42d2e6b5b7ff37bd485803fa2cb70a8">MAKE_ALIG()</link></computeroutput> from original TNKernel, there is an option <computeroutput><link linkend="tn__cfg__default_8h_1a2a1148efc6a74131cc83ee50cbc386cd">TN_API_MAKE_ALIG_ARG</link></computeroutput> with two possible values;</para>

<para><itemizedlist>
<listitem>
<para><computeroutput><link linkend="tn__cfg__dispatch_8h_1a4972bf0cbc72e51a7463cf7d786d2b64">TN_API_MAKE_ALIG_ARG__SIZE</link></computeroutput> - default value, use macro like this: <computeroutput><link linkend="tn__oldsymbols_8h_1aa42d2e6b5b7ff37bd485803fa2cb70a8">MAKE_ALIG(sizeof(struct my_struct))</link></computeroutput>, like in the port by Alex.</para>
</listitem><listitem>
<para><computeroutput><link linkend="tn__cfg__dispatch_8h_1a04321413cf21754a05682b298df0493d">TN_API_MAKE_ALIG_ARG__TYPE</link></computeroutput> - use macro like this: <computeroutput><link linkend="tn__oldsymbols_8h_1aa42d2e6b5b7ff37bd485803fa2cb70a8">MAKE_ALIG(struct my_struct)</link></computeroutput>, like in any other port.</para>
</listitem></itemizedlist>
</para>

<para>By the way, I wrote to the author of TNKernel (Yuri Tiomkin) about this mess, but he didn&apos;t answer anything. It&apos;s a pity of course, but we have what we have.</para>
</section>
<section xml:id="tnkernel_diff_1tnkernel_new_api__convenience_macros_stack">
<title>Convenience macros for stack arrays definition</title>

<para>You can still use &quot;manual&quot; definition of stack arrays, like that:</para>

<para><literallayout><computeroutput>TN_ARCH_STK_ATTR_BEFORE
TN_UWord&#32;my_task_stack[&#32;MY_TASK_STACK_SIZE&#32;]
TN_ARCH_STK_ATTR_AFTER;
</computeroutput></literallayout></para>

<para>Although it is recommended to use convenience macro for that: <computeroutput><link linkend="tn__sys_8h_1ad61af0f0e9ab96bdf1ac1bf1e03e3c75">TN_STACK_ARR_DEF()</link></computeroutput>. See <computeroutput><link linkend="tn__tasks_8h_1a548d5adda09d1b4e393b5df0e9e1a7a5">tn_task_create()</link></computeroutput> for the usage example.</para>
</section>
<section xml:id="tnkernel_diff_1tnkernel_new_api__convenience_macros_fmem">
<title>Convenience macros for fixed memory block pool buffers definition</title>

<para>Similarly to the previous section, you can still use &quot;manual&quot; definition of the buffer for fixed memory block pool, it is recommended to use convenience macro for that: <computeroutput><link linkend="tn__fmem_8h_1ab45e9c2ad4a64345214f9a912bf76fc3">TN_FMEM_BUF_DEF()</link></computeroutput>. See <computeroutput><link linkend="tn__fmem_8h_1a56d47d4a1b6453d959336448a0ce96ac">tn_fmem_create()</link></computeroutput> for usage example.</para>
</section>
<section xml:id="tnkernel_diff_1tnkernel_diff_api_rename">
<title>Things renamed</title>

<para>There is a lot of inconsistency with naming stuff in original TNKernel:</para>

<para><itemizedlist>
<listitem>
<para>Why do we have <computeroutput><link linkend="tn__dqueue_8h_1af60c61c12ed90f4bcc7d13ca4da8562b">tn_queue_send_polling()</link></computeroutput> / <computeroutput><link linkend="tn__dqueue_8h_1ac059f15f07625ca25e4aac5790cce1ea">tn_queue_isend_polling()</link></computeroutput> (notice the <computeroutput>i</computeroutput> letter before the verb, not before <computeroutput>polling</computeroutput>), but <computeroutput><link linkend="tn__fmem_8h_1affea42ad41734fadfe8170b4234ca567">tn_fmem_get_polling()</link></computeroutput> / <computeroutput><link linkend="tn__oldsymbols_8h_1a4293c359514306825a9007f071b2ad3f">tn_fmem_get_ipolling()</link></computeroutput> (notice the <computeroutput>i</computeroutput> letter before <computeroutput>polling</computeroutput>)?</para>
</listitem><listitem>
<para>All the system service names follow the naming scheme <computeroutput>tn_&lt;noun&gt;_&lt;verb&gt;[_&lt;adjustment&gt;]()</computeroutput>, but the <computeroutput><link linkend="tn__oldsymbols_8h_1a566625be14a6eed4a3574e3d31e776fc">tn_start_system()</link></computeroutput> is special, for some strange reason. To make it consistent, it should be named <computeroutput>tn_system_start()</computeroutput> or <computeroutput><link linkend="tn__sys_8h_1a62ab25d9d8ca01c02d368968f19e49bf">tn_sys_start()</link></computeroutput>;</para>
</listitem><listitem>
<para>A lot of macros don&apos;t have <computeroutput>TN_</computeroutput> prefix;</para>
</listitem><listitem>
<para>etc</para>
</listitem></itemizedlist>
</para>

<para>So, a lot of things (functions, macros, etc) has renamed. Old names are also available through <computeroutput><link linkend="tn__oldsymbols_8h">tn_oldsymbols.h</link></computeroutput>, which is included automatically if <computeroutput><link linkend="tn__cfg__default_8h_1ae9854c723c6a823c9126aa8390977d39">TN_OLD_TNKERNEL_NAMES</link></computeroutput> option is non-zero.</para>
</section>
<section xml:id="tnkernel_diff_1tnkernel_diff_api_rename_sem">
<title>We should wait for semaphore, not acquire it</title>

<para>One of the renamings deserves special mentioning: <computeroutput><link linkend="tn__oldsymbols_8h_1abdc5c428590ff525cdb566da613015ce">tn_sem_acquire()</link></computeroutput> and friends are renamed to <computeroutput><link linkend="tn__sem_8h_1acfed2a27719c87638d2eb6edfdeea150">tn_sem_wait()</link></computeroutput> and friends. That&apos;s because names acquire/release are actually misleading for the semaphore: semaphore is a <emphasis>signaling mechanism</emphasis>, and <emphasis role="bold">not</emphasis> the locking mechanism.</para>

<para>Actually, there&apos;s a lot of confusion about usage of mutexes/semaphores, so it&apos;s quite recommended to read small article by Michael Barr: <link xlink:href="http://goo.gl/YprPBW">Mutexes and Semaphores Demystified</link>.</para>

<para>Old names (<computeroutput><link linkend="tn__oldsymbols_8h_1abdc5c428590ff525cdb566da613015ce">tn_sem_acquire()</link></computeroutput> and friends) are still available through <computeroutput><link linkend="tn__oldsymbols_8h">tn_oldsymbols.h</link></computeroutput>.</para>
</section>
</section>
<section xml:id="tnkernel_diff_1tnkernel_diff_other">
<title>Changes that do not affect API directly</title>
<section xml:id="tnkernel_diff_1tnkernel_diff_timer_task">
<title>No timer task</title>

<para>Yes, timer task&apos;s job is important: it manages <computeroutput>tn_wait_timeout_list</computeroutput>, i.e. it wakes up tasks whose timeout is expired. But it&apos;s actually better to do it right in <computeroutput><link linkend="tn__sys_8h_1a944d96c7a5d442d271115b6cb22a085b">tn_tick_int_processing()</link></computeroutput> that is called from timer ISR, because presence of the special task provides significant overhead. Look at what happens when timer interrupt is fired (assume we don&apos;t use shadow register set for that, which is almost always the case):</para>

<para>(measurements were made at PIC32 port)</para>

<para><itemizedlist>
<listitem>
<para>Current context (23 words) is saved to the interrupt stack;</para>
</listitem><listitem>
<para>ISR called: particularly, <computeroutput><link linkend="tn__sys_8h_1a944d96c7a5d442d271115b6cb22a085b">tn_tick_int_processing()</link></computeroutput> is called;</para>
</listitem><listitem>
<para><computeroutput><link linkend="tn__sys_8h_1a944d96c7a5d442d271115b6cb22a085b">tn_tick_int_processing()</link></computeroutput> disables interrupts, manages round-robin (if needed), then it wakes up <computeroutput>tn_timer_task</computeroutput>, sets <computeroutput>tn_next_task_to_run</computeroutput>, and enables interrupts back;</para>
</listitem><listitem>
<para><computeroutput><link linkend="tn__sys_8h_1a944d96c7a5d442d271115b6cb22a085b">tn_tick_int_processing()</link></computeroutput> finishes, so ISR macro checks that <computeroutput>tn_next_task_to_run</computeroutput> is different from <computeroutput>tn_curr_run_task</computeroutput>, and sets <computeroutput>CS0</computeroutput> interrupt bit, so that context should be switched as soon as possible;</para>
</listitem><listitem>
<para>Context (23 words) gets restored to whatever task we interrupted;</para>
</listitem><listitem>
<para><computeroutput>CS0</computeroutput> ISR is immediately called, so full context (32 words) gets saved on task&apos;s stack, and context of <computeroutput>tn_timer_task</computeroutput> is restored;</para>
</listitem><listitem>
<para><computeroutput>tn_timer_task</computeroutput> disables interrupts, performs its not so big job (manages <computeroutput>tn_wait_timeout_list</computeroutput>), puts itself to wait, enables interrupts and pends context switching again;</para>
</listitem><listitem>
<para><computeroutput>CS0</computeroutput> ISR is immediately called, so full context of <computeroutput>tn_timer_task</computeroutput> gets saved in its stack, and then, after all, context of my own interrupted task gets restored and my task continues to run.</para>
</listitem></itemizedlist>
</para>

<para>I&apos;ve measured with MPLABX&apos;s stopwatch how much time it takes: with just three tasks (idle task, timer task, my own task with priority 6), i.e. without any sleeping tasks, all this routine takes <emphasis role="bold">682 cycles</emphasis>. So I tried to get rid of <computeroutput>tn_timer_task</computeroutput> and perform its job right in the <computeroutput><link linkend="tn__sys_8h_1a944d96c7a5d442d271115b6cb22a085b">tn_tick_int_processing()</link></computeroutput>.</para>

<para>Previously, application callback was called from timer task; since it is removed now, startup routine has changed, refer to <link linkend="quick_guide_1starting_the_kernel">Starting the kernel</link> for details.</para>

<para>Now, the following steps are performed when timer interrupt is fired:</para>

<para><itemizedlist>
<listitem>
<para>Current context (23 words) is saved to the interrupt stack;</para>
</listitem><listitem>
<para>ISR called: particularly, <computeroutput><link linkend="tn__sys_8h_1a944d96c7a5d442d271115b6cb22a085b">tn_tick_int_processing()</link></computeroutput> is called;</para>
</listitem><listitem>
<para><computeroutput><link linkend="tn__sys_8h_1a944d96c7a5d442d271115b6cb22a085b">tn_tick_int_processing()</link></computeroutput> disables interrupts, manages round-robin (if needed), manages <computeroutput>tn_wait_timeout_list</computeroutput>, and enables interrupts back;</para>
</listitem><listitem>
<para><computeroutput><link linkend="tn__sys_8h_1a944d96c7a5d442d271115b6cb22a085b">tn_tick_int_processing()</link></computeroutput> finishes, ISR macro checks that <computeroutput>tn_next_task_to_run</computeroutput> is the same as <computeroutput>tn_curr_run_task</computeroutput></para>
</listitem><listitem>
<para>Context (23 words) gets restored to whatever task we interrupted;</para>
</listitem></itemizedlist>
</para>

<para>That&apos;s all. It takes <emphasis role="bold">251 cycles</emphasis>: 2.7 times less.</para>

<para>So, we need to make sure that interrupt stack size is enough for this (not big) job. As a result, RAM is saved (since you don&apos;t need to allocate stack for timer task) and things work much faster. Win-win. </para>
</section>
</section>

</chapter>
