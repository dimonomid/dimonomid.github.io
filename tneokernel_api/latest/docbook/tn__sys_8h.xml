<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="tn__sys_8h">
    <title>tn_sys.h File Reference</title>
    <programlisting>#include &quot;tn_list.h&quot;</programlisting>
    <programlisting>#include &quot;../arch/tn_arch.h&quot;</programlisting>
    <programlisting>#include &quot;tn_cfg_dispatch.h&quot;</programlisting>
    <programlisting>#include &quot;tn_timer.h&quot;</programlisting>
        <section>
            <title> Data Structures </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="struct__TN__BuildCfg">_TN_BuildCfg</link></para>
<para><emphasis>Structure with build-time configurations values; it is needed for run-time
check which ensures that build-time options for the kernel match ones for
the application.</emphasis></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="tn__sys_8h_1ad61af0f0e9ab96bdf1ac1bf1e03e3c75">TN_STACK_ARR_DEF</link> <link linkend="tn__arch__example_8h_1ae245dddb19cd7c12b7038a62d576fafa">TN_ARCH_STK_ATTR_BEFORE</link>                   \
   <link linkend="tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> name[ (size) ]                   \
   <link linkend="tn__arch__example_8h_1ab082613959b539182b8b47bc87d18d6a">TN_ARCH_STK_ATTR_AFTER</link><para><emphasis>Convenience macro for the definition of stack array.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="tn__sys_8h_1ad98662c1f06abe650958bbf208414e18">_TN_BUILD_CFG_ARCH_STRUCT_FILL</link><para><emphasis>For internal kernel usage: helper macro that fills architecture-dependent
values.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="tn__sys_8h_1a7784d4218225b2cbd087628bad0d544a">_TN_BUILD_CFG_STRUCT_FILL</link> {                                                                       \
   memset((_p_struct), 0x00, sizeof(*(_p_struct)));                     \
                                                                        \
   (_p_struct)-&gt;priorities_cnt            = TN_PRIORITIES_CNT;          \
   (_p_struct)-&gt;check_param               = TN_CHECK_PARAM;             \
   (_p_struct)-&gt;debug                     = TN_DEBUG;                   \
   (_p_struct)-&gt;use_mutexes               = TN_USE_MUTEXES;             \
   (_p_struct)-&gt;mutex_rec                 = TN_MUTEX_REC;               \
   (_p_struct)-&gt;mutex_deadlock_detect     = TN_MUTEX_DEADLOCK_DETECT;   \
   (_p_struct)-&gt;tick_lists_cnt_minus_one  = (TN_TICK_LISTS_CNT - 1);    \
   (_p_struct)-&gt;api_make_alig_arg         = TN_API_MAKE_ALIG_ARG;       \
   (_p_struct)-&gt;profiler                  = TN_PROFILER;                \
   (_p_struct)-&gt;profiler_wait_time        = TN_PROFILER_WAIT_TIME;      \
   (_p_struct)-&gt;stack_overflow_check      = TN_STACK_OVERFLOW_CHECK;    \
   (_p_struct)-&gt;dynamic_tick              = TN_DYNAMIC_TICK;            \
   (_p_struct)-&gt;old_events_api            = TN_OLD_EVENT_API;           \
                                                                        \
   _TN_BUILD_CFG_ARCH_STRUCT_FILL(_p_struct);                           \
}<para><emphasis>For internal kernel usage: fill the structure &lt;tt&gt;#_TN_BuildCfg&lt;/tt&gt; with
current build-time configuration values.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="tn__sys_8h_1af26252bf220b89153a9fe6f5daf81237">_TN_MAX_INLINED_FUNC</link> /* nothing */<para><emphasis>For internal kernel usage: helper macro that allows functions to be inlined
or not depending on configuration (see &lt;tt&gt;#TN_MAX_INLINE&lt;/tt&gt;)</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="tn__sys_8h_1ab389cb36d15c2390d7868b10391c9b49">TN_NO_TIME_SLICE</link> 0<para><emphasis>Value to pass to &lt;tt&gt;tn_sys_tslice_set()&lt;/tt&gt; to turn round-robin off.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="tn__sys_8h_1a546b128561cc3bf46d0423bad1f5c8c7">TN_MAX_TIME_SLICE</link> 0xFFFE<para><emphasis>Max value of time slice.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Enumerations</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para><literallayout>enum <link linkend="tn__sys_8h_1ace9542d94b996fb2070cd57d6658a2d8">TN_StateFlag</link> {
<link linkend="tn__sys_8h_1ace9542d94b996fb2070cd57d6658a2d8aa5085b1c78bc7e75aeac04a76cab6a52">TN_STATE_FLAG__SYS_RUNNING</link>= (1 &lt;&lt; 0),
<link linkend="tn__sys_8h_1ace9542d94b996fb2070cd57d6658a2d8a188c405a2cde555e7aaaeaa1189a4580">TN_STATE_FLAG__DEADLOCK</link>= (1 &lt;&lt; 1)
}</literallayout>
<para><emphasis>System state flags.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para><literallayout>enum <link linkend="tn__sys_8h_1a54b0c697dfdb3b59e7bcc6eb7badda51">TN_Context</link> {
<link linkend="tn__sys_8h_1a54b0c697dfdb3b59e7bcc6eb7badda51ac6015804609fb2bb71335015c51c40a3">TN_CONTEXT_NONE</link>,
<link linkend="tn__sys_8h_1a54b0c697dfdb3b59e7bcc6eb7badda51ab78bafeb369a85700f793a7375e38ec6">TN_CONTEXT_TASK</link>,
<link linkend="tn__sys_8h_1a54b0c697dfdb3b59e7bcc6eb7badda51a4b0defef531f47e8cf5dc274355b6626">TN_CONTEXT_ISR</link>
}</literallayout>
<para><emphasis>System context.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Typedefs</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>typedef void()  <link linkend="tn__sys_8h_1aaa9bbc6c586cf6ce8d982b8d79bc27d6">TN_CBUserTaskCreate</link><para><emphasis>User-provided callback function that is called directly from
&lt;tt&gt;tn_sys_start()&lt;/tt&gt; as a part of system startup routine; it should merely
create at least one (and typically just one) user&apos;s task, which should
perform all the rest application initialization.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>typedef void()  <link linkend="tn__sys_8h_1ac3811d563ff671cb7bd1519735e20fd1">TN_CBIdle</link><para><emphasis>User-provided callback function which is called repeatedly from the idle
task loop.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>typedef void()  <link linkend="tn__sys_8h_1a64b76c41f847eff5ee6c8bb0f337c946">TN_CBStackOverflow</link><para><emphasis>User-provided callback function that is called when the kernel detects stack
overflow (see &lt;tt&gt;#TN_STACK_OVERFLOW_CHECK&lt;/tt&gt;).</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>typedef void()  <link linkend="tn__sys_8h_1a3a0439b7ba640754949f6d2c8e4ccc06">TN_CBDeadlock</link><para><emphasis>User-provided callback function that is called whenever 
deadlock becomes active or inactive.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="tn__sys_8h_1a62ab25d9d8ca01c02d368968f19e49bf">tn_sys_start</link> (
<link linkend="tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> * idle_task_stack, unsigned int idle_task_stack_size, <link linkend="tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> * int_stack, unsigned int int_stack_size, <link linkend="tn__sys_8h_1aaa9bbc6c586cf6ce8d982b8d79bc27d6">TN_CBUserTaskCreate</link> * cb_user_task_create, <link linkend="tn__sys_8h_1ac3811d563ff671cb7bd1519735e20fd1">TN_CBIdle</link> * cb_idle)<para><emphasis>Initial TNeo system start function, never returns.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="tn__sys_8h_1aa44d297639e0520420890ef2bb7e2c1c">tn_tick_int_processing</link> (
void )<para><emphasis>Process system tick; should be called periodically, typically
from some kind of timer ISR.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>enum <link linkend="tn__common_8h_1aa43bd3da1ad4c1e61224b5f23b369876">TN_RCode</link> <link linkend="tn__sys_8h_1a05fc370b6faa604fd8ff9411361c4cd0">tn_sys_tslice_set</link> (
int priority, int ticks)<para><emphasis>Set time slice ticks value for specified priority (see \ref round_robin).</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="tn__common_8h_1ac885b63d00c063de61cdbd80bf26d8aa">TN_TickCnt</link> <link linkend="tn__sys_8h_1a4864ca85d87bab0fa95ce11aefcd1a92">tn_sys_time_get</link> (
void )<para><emphasis>Get current system ticks count.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="tn__sys_8h_1aaa4a5c2feb4a0db5993b81dde496edc3">tn_callback_deadlock_set</link> (
<link linkend="tn__sys_8h_1a3a0439b7ba640754949f6d2c8e4ccc06">TN_CBDeadlock</link> * cb)<para><emphasis>Set callback function that should be called whenever deadlock occurs or
becomes inactive (say, if one of tasks involved in the deadlock was released
from wait because of timeout)</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="tn__sys_8h_1ab40a7069739439d7b70cc4e19d0b9fe3">tn_callback_stack_overflow_set</link> (
<link linkend="tn__sys_8h_1a64b76c41f847eff5ee6c8bb0f337c946">TN_CBStackOverflow</link> * cb)<para><emphasis>Set callback function that is called when the kernel detects stack overflow
(see &lt;tt&gt;#TN_STACK_OVERFLOW_CHECK&lt;/tt&gt;).</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>enum <link linkend="tn__sys_8h_1ace9542d94b996fb2070cd57d6658a2d8">TN_StateFlag</link> <link linkend="tn__sys_8h_1a202fb30400101599c1e39ba4e58d2fd5">tn_sys_state_flags_get</link> (
void )<para><emphasis>Returns current system state flags.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>enum <link linkend="tn__sys_8h_1a54b0c697dfdb3b59e7bcc6eb7badda51">TN_Context</link> <link linkend="tn__sys_8h_1ac3233931746c9d8b84ebd34a2a3a468a">tn_sys_context_get</link> (
void )<para><emphasis>Returns system context: task or ISR.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="tn__arch__example_8h_1a39b8c7b5ae653ec71be6f5a821eec3f6">_TN_STATIC_INLINE</link> <link linkend="tn__common_8h_1a9f76389d1506addfc7542f54e484a92c">TN_BOOL</link> <link linkend="tn__sys_8h_1a75204c95f65f14283921931b3baada0a">tn_is_task_context</link> (
void )<para><emphasis>Returns whether current system context is &lt;tt&gt;#TN_CONTEXT_TASK&lt;/tt&gt;</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="tn__arch__example_8h_1a39b8c7b5ae653ec71be6f5a821eec3f6">_TN_STATIC_INLINE</link> <link linkend="tn__common_8h_1a9f76389d1506addfc7542f54e484a92c">TN_BOOL</link> <link linkend="tn__sys_8h_1ad2b1d9eba4ab359a2632ecd986f4a42b">tn_is_isr_context</link> (
void )<para><emphasis>Returns whether current system context is &lt;tt&gt;#TN_CONTEXT_ISR&lt;/tt&gt;</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="structTN__Task">TN_Task</link> * <link linkend="tn__sys_8h_1a2ca353dcf362a5aa8d2e5a3960e51410">tn_cur_task_get</link> (
void )<para><emphasis>Returns pointer to the currently running task.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="tn__common_8h_1a603cbe1ffdafc7e6813ef692bbd7d22f">TN_TaskBody</link> * <link linkend="tn__sys_8h_1afa3c83dce52b17c9ee07b34af0fcebab">tn_cur_task_body_get</link> (
void )<para><emphasis>Returns pointer to the body function of the currently running task.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="tn__arch__example_8h_1a39b8c7b5ae653ec71be6f5a821eec3f6">_TN_STATIC_INLINE</link> <link linkend="tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> <link linkend="tn__sys_8h_1af1502619506a9c92eb954e45ff0f461b">tn_sched_dis_save</link> (
void )<para><emphasis>Disable kernel scheduler and return previous scheduler state.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="tn__arch__example_8h_1a39b8c7b5ae653ec71be6f5a821eec3f6">_TN_STATIC_INLINE</link> void <link linkend="tn__sys_8h_1a4cd5c9113872b2008184c567907653bd">tn_sched_restore</link> (
<link linkend="tn__arch__example_8h_1ab80cba0fe9ffcd9011d53dfeb9e39bf4">TN_UWord</link> sched_state)<para><emphasis>Restore state of the kernel scheduler.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="tn__sys_8h_1ab4e879240635c8f73e20905b8e499c1c">tn_callback_dyn_tick_set</link> (
<link linkend="tn__timer_8h_1a8c64f098ee0fa587a985d149b81bfba9">TN_CBTickSchedule</link> * cb_tick_schedule, <link linkend="tn__timer_8h_1a4cc3440639e990e3a3015b95e805374a">TN_CBTickCntGet</link> * cb_tick_cnt_get)<para><emphasis>$(TN_IF_ONLY_DYNAMIC_TICK_SET)</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>

<para>Kernel system routines: system start, tick processing, time slice managing. </para>
    <para>Definition in file /home/dimon/mydata/projects/tneo/src/core/tn_sys.h</para>
    </simplesect>
</section>
