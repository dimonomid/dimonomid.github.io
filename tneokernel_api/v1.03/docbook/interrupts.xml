<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Interrupts</title>
<section xml:id="interrupts_1interrupt_stack">
<title>Interrupt stack</title>

<para>TNeoKernel provides a separate stack for interrupt handlers. This approach could save a lot of RAM: interrupt can happen at any moment of time, and if there&apos;s no separate interrupt stack, then each task should have enough stack space for the worse case of interrupt nesting.</para>

<para>Assume application&apos;s ISRs take max 64 words (64 * 4 = 256 bytes on PIC32) and application has 4 tasks (plus one idle task). Then, each of 5 tasks must have 64 words for interrupts: 64 * 5 * 4 = 1280 bytes of RAM just for 64 words for ISR.</para>

<para>With separate stack for interrupts, these 64 words should be allocated just once. Interrupt stack array should be given to <computeroutput><link linkend="tn__sys_8h_1a62ab25d9d8ca01c02d368968f19e49bf">tn_sys_start()</link></computeroutput>. For additional information, refer to the section <link linkend="quick_guide_1starting_the_kernel">Starting the kernel</link>.</para>

<para>In order to make particular ISR use separate interrupt stack, this ISR should be defined by kernel-provided macro, which is platform-dependent: see <link linkend="pic32_details">PIC32 details</link>.</para>

<para>In spite of the fact that the kernel provides separate stack for interrupt, this isn&apos;t a mandatory: you&apos;re able to define your ISR in a standard way, making it use stask of interrupted task and work a bit faster. There is always a tradeoff. There are <emphasis role="bold">no additional constraints</emphasis> on ISR defined without kernel-provided macro: in either ISR, you can call the same set of kernel services.</para>

<para>When you make a decision on whether particular ISR should use separate stack, consider the following:</para>

<para><itemizedlist>
<listitem>
<para>When ISR is defined in a standard way, and no function is called from that ISR, only necessary registers are saved on stack. If you have such an ISR (that doesn&apos;t call any function), and this ISR should work very fast, consider using standard way instead of kernel-provided macro.</para>
</listitem><listitem>
<para>When ISR is defined in a standard way, but it calls any function and doesn&apos;t use shadow register set, compiler saves (almost) full context <emphasis role="bold">on the task&apos;s stack</emphasis>, because it doesn&apos;t know which registers are used inside the function. In this case, it usually makes more sense to use kernel-provided macro (see below).</para>
</listitem><listitem>
<para>Kernel-provided interrupt macros switch stack pointer between interrupt stack and task stack automatically, it takes additional time: e.g. on PIC32 it&apos;s about 20 cycles.</para>
</listitem><listitem>
<para>Kernel-provided interrupt macro that doesn&apos;t use shadow register set always saves (almost) full context <emphasis role="bold">on the interrupt stack</emphasis>, independently of whether any function is called from an ISR.</para>
</listitem><listitem>
<para>Kernel-provided interrupt macro that uses shadow register set saves a little amount of registers <emphasis role="bold">on the interrupt stack</emphasis>. </para>
</listitem></itemizedlist>
</para>
</section>

</chapter>
